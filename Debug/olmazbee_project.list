
olmazbee_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000034a4  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000015f8  080035b0  080035b0  000045b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004ba8  08004ba8  0000605c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08004ba8  08004ba8  0000605c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08004ba8  08004ba8  0000605c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004ba8  08004ba8  00005ba8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004bac  08004bac  00005bac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08004bb0  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000610  2000005c  08004c0c  0000605c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000066c  08004c0c  0000666c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000605c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ba92  00000000  00000000  00006085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d5d  00000000  00000000  00011b17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d40  00000000  00000000  00013878  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  000180ed  00000000  00000000  000145b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0000faee  00000000  00000000  0002c6a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0008b68a  00000000  00000000  0003c193  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  000c781d  2**0
                  CONTENTS, READONLY
 19 .debug_rnglists 00000a41  00000000  00000000  000c7860  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003cb0  00000000  00000000  000c82a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000051  00000000  00000000  000cbf54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000005c 	.word	0x2000005c
 8000128:	00000000 	.word	0x00000000
 800012c:	08003598 	.word	0x08003598

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000060 	.word	0x20000060
 8000148:	08003598 	.word	0x08003598

0800014c <microDelay>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// 1. 微秒延时函数
void microDelay(uint16_t delay)
{
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	4603      	mov	r3, r0
 8000154:	80fb      	strh	r3, [r7, #6]
  __HAL_TIM_SET_COUNTER(&htim1, 0);
 8000156:	4b08      	ldr	r3, [pc, #32]	@ (8000178 <microDelay+0x2c>)
 8000158:	681b      	ldr	r3, [r3, #0]
 800015a:	2200      	movs	r2, #0
 800015c:	625a      	str	r2, [r3, #36]	@ 0x24
  while (__HAL_TIM_GET_COUNTER(&htim1) < delay)
 800015e:	bf00      	nop
 8000160:	4b05      	ldr	r3, [pc, #20]	@ (8000178 <microDelay+0x2c>)
 8000162:	681b      	ldr	r3, [r3, #0]
 8000164:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000166:	88fb      	ldrh	r3, [r7, #6]
 8000168:	429a      	cmp	r2, r3
 800016a:	d3f9      	bcc.n	8000160 <microDelay+0x14>
    ;
}
 800016c:	bf00      	nop
 800016e:	bf00      	nop
 8000170:	370c      	adds	r7, #12
 8000172:	46bd      	mov	sp, r7
 8000174:	bc80      	pop	{r7}
 8000176:	4770      	bx	lr
 8000178:	200000cc 	.word	0x200000cc

0800017c <Set_Pin_Output>:

// 2. 设置引脚为输出模式
void Set_Pin_Output(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800017c:	b580      	push	{r7, lr}
 800017e:	b086      	sub	sp, #24
 8000180:	af00      	add	r7, sp, #0
 8000182:	6078      	str	r0, [r7, #4]
 8000184:	460b      	mov	r3, r1
 8000186:	807b      	strh	r3, [r7, #2]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000188:	f107 0308 	add.w	r3, r7, #8
 800018c:	2200      	movs	r2, #0
 800018e:	601a      	str	r2, [r3, #0]
 8000190:	605a      	str	r2, [r3, #4]
 8000192:	609a      	str	r2, [r3, #8]
 8000194:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pin = GPIO_Pin;
 8000196:	887b      	ldrh	r3, [r7, #2]
 8000198:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800019a:	2301      	movs	r3, #1
 800019c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800019e:	2302      	movs	r3, #2
 80001a0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 80001a2:	f107 0308 	add.w	r3, r7, #8
 80001a6:	4619      	mov	r1, r3
 80001a8:	6878      	ldr	r0, [r7, #4]
 80001aa:	f001 f825 	bl	80011f8 <HAL_GPIO_Init>
}
 80001ae:	bf00      	nop
 80001b0:	3718      	adds	r7, #24
 80001b2:	46bd      	mov	sp, r7
 80001b4:	bd80      	pop	{r7, pc}

080001b6 <Set_Pin_Input>:

// 3. 设置引脚为输入模式
void Set_Pin_Input(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80001b6:	b580      	push	{r7, lr}
 80001b8:	b086      	sub	sp, #24
 80001ba:	af00      	add	r7, sp, #0
 80001bc:	6078      	str	r0, [r7, #4]
 80001be:	460b      	mov	r3, r1
 80001c0:	807b      	strh	r3, [r7, #2]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80001c2:	f107 0308 	add.w	r3, r7, #8
 80001c6:	2200      	movs	r2, #0
 80001c8:	601a      	str	r2, [r3, #0]
 80001ca:	605a      	str	r2, [r3, #4]
 80001cc:	609a      	str	r2, [r3, #8]
 80001ce:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pin = GPIO_Pin;
 80001d0:	887b      	ldrh	r3, [r7, #2]
 80001d2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80001d4:	2300      	movs	r3, #0
 80001d6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL; // 假设外部已有上拉电阻
 80001d8:	2300      	movs	r3, #0
 80001da:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 80001dc:	f107 0308 	add.w	r3, r7, #8
 80001e0:	4619      	mov	r1, r3
 80001e2:	6878      	ldr	r0, [r7, #4]
 80001e4:	f001 f808 	bl	80011f8 <HAL_GPIO_Init>
}
 80001e8:	bf00      	nop
 80001ea:	3718      	adds	r7, #24
 80001ec:	46bd      	mov	sp, r7
 80001ee:	bd80      	pop	{r7, pc}

080001f0 <DHT11_Start>:

// 4. DHT11 开始信号
uint8_t DHT11_Start(void)
{
 80001f0:	b580      	push	{r7, lr}
 80001f2:	b082      	sub	sp, #8
 80001f4:	af00      	add	r7, sp, #0
  uint8_t Response = 0;
 80001f6:	2300      	movs	r3, #0
 80001f8:	717b      	strb	r3, [r7, #5]
  Set_Pin_Output(DHT11_PORT, DHT11_PIN);       // 设置为输出
 80001fa:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80001fe:	482d      	ldr	r0, [pc, #180]	@ (80002b4 <DHT11_Start+0xc4>)
 8000200:	f7ff ffbc 	bl	800017c <Set_Pin_Output>
  HAL_GPIO_WritePin(DHT11_PORT, DHT11_PIN, 0); // 拉低
 8000204:	2200      	movs	r2, #0
 8000206:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800020a:	482a      	ldr	r0, [pc, #168]	@ (80002b4 <DHT11_Start+0xc4>)
 800020c:	f001 f98f 	bl	800152e <HAL_GPIO_WritePin>
  HAL_Delay(20);                               // 至少18ms
 8000210:	2014      	movs	r0, #20
 8000212:	f000 fee9 	bl	8000fe8 <HAL_Delay>
  HAL_GPIO_WritePin(DHT11_PORT, DHT11_PIN, 1); // 拉高
 8000216:	2201      	movs	r2, #1
 8000218:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800021c:	4825      	ldr	r0, [pc, #148]	@ (80002b4 <DHT11_Start+0xc4>)
 800021e:	f001 f986 	bl	800152e <HAL_GPIO_WritePin>
  microDelay(30);                              // 等待 30us
 8000222:	201e      	movs	r0, #30
 8000224:	f7ff ff92 	bl	800014c <microDelay>
  Set_Pin_Input(DHT11_PORT, DHT11_PIN);        // 设置为输入
 8000228:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800022c:	4821      	ldr	r0, [pc, #132]	@ (80002b4 <DHT11_Start+0xc4>)
 800022e:	f7ff ffc2 	bl	80001b6 <Set_Pin_Input>

  // 等待传感器响应
  uint16_t timeout = 0;
 8000232:	2300      	movs	r3, #0
 8000234:	80fb      	strh	r3, [r7, #6]
  while (HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN))
 8000236:	e008      	b.n	800024a <DHT11_Start+0x5a>
  {
    timeout++;
 8000238:	88fb      	ldrh	r3, [r7, #6]
 800023a:	3301      	adds	r3, #1
 800023c:	80fb      	strh	r3, [r7, #6]
    if (timeout > 1000)
 800023e:	88fb      	ldrh	r3, [r7, #6]
 8000240:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000244:	d901      	bls.n	800024a <DHT11_Start+0x5a>
      return 0; // 超时
 8000246:	2300      	movs	r3, #0
 8000248:	e030      	b.n	80002ac <DHT11_Start+0xbc>
  while (HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN))
 800024a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800024e:	4819      	ldr	r0, [pc, #100]	@ (80002b4 <DHT11_Start+0xc4>)
 8000250:	f001 f956 	bl	8001500 <HAL_GPIO_ReadPin>
 8000254:	4603      	mov	r3, r0
 8000256:	2b00      	cmp	r3, #0
 8000258:	d1ee      	bne.n	8000238 <DHT11_Start+0x48>
  }
  timeout = 0;
 800025a:	2300      	movs	r3, #0
 800025c:	80fb      	strh	r3, [r7, #6]
  while (!HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN))
 800025e:	e008      	b.n	8000272 <DHT11_Start+0x82>
  {
    timeout++;
 8000260:	88fb      	ldrh	r3, [r7, #6]
 8000262:	3301      	adds	r3, #1
 8000264:	80fb      	strh	r3, [r7, #6]
    if (timeout > 1000)
 8000266:	88fb      	ldrh	r3, [r7, #6]
 8000268:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800026c:	d901      	bls.n	8000272 <DHT11_Start+0x82>
      return 0; // 超时
 800026e:	2300      	movs	r3, #0
 8000270:	e01c      	b.n	80002ac <DHT11_Start+0xbc>
  while (!HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN))
 8000272:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000276:	480f      	ldr	r0, [pc, #60]	@ (80002b4 <DHT11_Start+0xc4>)
 8000278:	f001 f942 	bl	8001500 <HAL_GPIO_ReadPin>
 800027c:	4603      	mov	r3, r0
 800027e:	2b00      	cmp	r3, #0
 8000280:	d0ee      	beq.n	8000260 <DHT11_Start+0x70>
  }
  timeout = 0;
 8000282:	2300      	movs	r3, #0
 8000284:	80fb      	strh	r3, [r7, #6]
  while (HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN))
 8000286:	e008      	b.n	800029a <DHT11_Start+0xaa>
  {
    timeout++;
 8000288:	88fb      	ldrh	r3, [r7, #6]
 800028a:	3301      	adds	r3, #1
 800028c:	80fb      	strh	r3, [r7, #6]
    if (timeout > 1000)
 800028e:	88fb      	ldrh	r3, [r7, #6]
 8000290:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000294:	d901      	bls.n	800029a <DHT11_Start+0xaa>
      return 0; // 超时
 8000296:	2300      	movs	r3, #0
 8000298:	e008      	b.n	80002ac <DHT11_Start+0xbc>
  while (HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN))
 800029a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800029e:	4805      	ldr	r0, [pc, #20]	@ (80002b4 <DHT11_Start+0xc4>)
 80002a0:	f001 f92e 	bl	8001500 <HAL_GPIO_ReadPin>
 80002a4:	4603      	mov	r3, r0
 80002a6:	2b00      	cmp	r3, #0
 80002a8:	d1ee      	bne.n	8000288 <DHT11_Start+0x98>
  }

  return 1; // 成功
 80002aa:	2301      	movs	r3, #1
}
 80002ac:	4618      	mov	r0, r3
 80002ae:	3708      	adds	r7, #8
 80002b0:	46bd      	mov	sp, r7
 80002b2:	bd80      	pop	{r7, pc}
 80002b4:	40010c00 	.word	0x40010c00

080002b8 <DHT11_Read>:

// 5. DHT11 读取一个字节
uint8_t DHT11_Read(void)
{
 80002b8:	b580      	push	{r7, lr}
 80002ba:	b082      	sub	sp, #8
 80002bc:	af00      	add	r7, sp, #0
  uint8_t i, value = 0;
 80002be:	2300      	movs	r3, #0
 80002c0:	71bb      	strb	r3, [r7, #6]
  for (i = 0; i < 8; i++)
 80002c2:	2300      	movs	r3, #0
 80002c4:	71fb      	strb	r3, [r7, #7]
 80002c6:	e03a      	b.n	800033e <DHT11_Read+0x86>
  {
    while (!HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN))
 80002c8:	bf00      	nop
 80002ca:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80002ce:	4820      	ldr	r0, [pc, #128]	@ (8000350 <DHT11_Read+0x98>)
 80002d0:	f001 f916 	bl	8001500 <HAL_GPIO_ReadPin>
 80002d4:	4603      	mov	r3, r0
 80002d6:	2b00      	cmp	r3, #0
 80002d8:	d0f7      	beq.n	80002ca <DHT11_Read+0x12>
      ;                                           // 等待位开始 (高)
    microDelay(40);                               // 延时40us
 80002da:	2028      	movs	r0, #40	@ 0x28
 80002dc:	f7ff ff36 	bl	800014c <microDelay>
    if (!HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN)) // 如果40us后还是低电平, 则是 0
 80002e0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80002e4:	481a      	ldr	r0, [pc, #104]	@ (8000350 <DHT11_Read+0x98>)
 80002e6:	f001 f90b 	bl	8001500 <HAL_GPIO_ReadPin>
 80002ea:	4603      	mov	r3, r0
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d10e      	bne.n	800030e <DHT11_Read+0x56>
    {
      value &= ~(1 << (7 - i));
 80002f0:	79fb      	ldrb	r3, [r7, #7]
 80002f2:	f1c3 0307 	rsb	r3, r3, #7
 80002f6:	2201      	movs	r2, #1
 80002f8:	fa02 f303 	lsl.w	r3, r2, r3
 80002fc:	b25b      	sxtb	r3, r3
 80002fe:	43db      	mvns	r3, r3
 8000300:	b25a      	sxtb	r2, r3
 8000302:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000306:	4013      	ands	r3, r2
 8000308:	b25b      	sxtb	r3, r3
 800030a:	71bb      	strb	r3, [r7, #6]
 800030c:	e00b      	b.n	8000326 <DHT11_Read+0x6e>
    }
    else // 否则是 1
    {
      value |= (1 << (7 - i));
 800030e:	79fb      	ldrb	r3, [r7, #7]
 8000310:	f1c3 0307 	rsb	r3, r3, #7
 8000314:	2201      	movs	r2, #1
 8000316:	fa02 f303 	lsl.w	r3, r2, r3
 800031a:	b25a      	sxtb	r2, r3
 800031c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000320:	4313      	orrs	r3, r2
 8000322:	b25b      	sxtb	r3, r3
 8000324:	71bb      	strb	r3, [r7, #6]
    }
    while (HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN))
 8000326:	bf00      	nop
 8000328:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800032c:	4808      	ldr	r0, [pc, #32]	@ (8000350 <DHT11_Read+0x98>)
 800032e:	f001 f8e7 	bl	8001500 <HAL_GPIO_ReadPin>
 8000332:	4603      	mov	r3, r0
 8000334:	2b00      	cmp	r3, #0
 8000336:	d1f7      	bne.n	8000328 <DHT11_Read+0x70>
  for (i = 0; i < 8; i++)
 8000338:	79fb      	ldrb	r3, [r7, #7]
 800033a:	3301      	adds	r3, #1
 800033c:	71fb      	strb	r3, [r7, #7]
 800033e:	79fb      	ldrb	r3, [r7, #7]
 8000340:	2b07      	cmp	r3, #7
 8000342:	d9c1      	bls.n	80002c8 <DHT11_Read+0x10>
      ; // 等待位结束 (低)
  }
  return value;
 8000344:	79bb      	ldrb	r3, [r7, #6]
}
 8000346:	4618      	mov	r0, r3
 8000348:	3708      	adds	r7, #8
 800034a:	46bd      	mov	sp, r7
 800034c:	bd80      	pop	{r7, pc}
 800034e:	bf00      	nop
 8000350:	40010c00 	.word	0x40010c00

08000354 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000354:	b580      	push	{r7, lr}
 8000356:	b094      	sub	sp, #80	@ 0x50
 8000358:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800035a:	f000 fde3 	bl	8000f24 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800035e:	f000 f913 	bl	8000588 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000362:	f000 f9d5 	bl	8000710 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000366:	f000 f955 	bl	8000614 <MX_I2C1_Init>
  MX_TIM1_Init();
 800036a:	f000 f981 	bl	8000670 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim1); // 启动微秒定时器
 800036e:	487a      	ldr	r0, [pc, #488]	@ (8000558 <main+0x204>)
 8000370:	f002 f9ee 	bl	8002750 <HAL_TIM_Base_Start>
  ssd1306_Init();             // 初始化OLED
 8000374:	f000 fa62 	bl	800083c <ssd1306_Init>

  ssd1306_SetCursor(0, 0);
 8000378:	2100      	movs	r1, #0
 800037a:	2000      	movs	r0, #0
 800037c:	f000 fc12 	bl	8000ba4 <ssd1306_SetCursor>
  ssd1306_WriteString("Starting...", Font_7x10, White);
 8000380:	4b76      	ldr	r3, [pc, #472]	@ (800055c <main+0x208>)
 8000382:	2201      	movs	r2, #1
 8000384:	9200      	str	r2, [sp, #0]
 8000386:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000388:	4875      	ldr	r0, [pc, #468]	@ (8000560 <main+0x20c>)
 800038a:	f000 fbe5 	bl	8000b58 <ssd1306_WriteString>
  ssd1306_UpdateScreen();
 800038e:	f000 fad7 	bl	8000940 <ssd1306_UpdateScreen>
  HAL_Delay(1000);
 8000392:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000396:	f000 fe27 	bl	8000fe8 <HAL_Delay>

  //
  // !!! --- 把变量定义在 while 循环外面 --- !!!
  //
  uint8_t RHI = 0, RHD = 0, TCI = 0, TCD = 0, SUM = 0;
 800039a:	2300      	movs	r3, #0
 800039c:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
 80003a0:	2300      	movs	r3, #0
 80003a2:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
 80003a6:	2300      	movs	r3, #0
 80003a8:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80003ac:	2300      	movs	r3, #0
 80003ae:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80003b2:	2300      	movs	r3, #0
 80003b4:	f887 3041 	strb.w	r3, [r7, #65]	@ 0x41
  uint8_t Temperature = 0; // 初始温度为0
 80003b8:	2300      	movs	r3, #0
 80003ba:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint8_t Humidity = 0;    // 初始湿度为0
 80003be:	2300      	movs	r3, #0
 80003c0:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

    // --- 1. 读取传感器 ---
    if (DHT11_Start())
 80003c4:	f7ff ff14 	bl	80001f0 <DHT11_Start>
 80003c8:	4603      	mov	r3, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d02f      	beq.n	800042e <main+0xda>
    {
      RHI = DHT11_Read(); // 湿度整数
 80003ce:	f7ff ff73 	bl	80002b8 <DHT11_Read>
 80003d2:	4603      	mov	r3, r0
 80003d4:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
      RHD = DHT11_Read(); // 湿度小数
 80003d8:	f7ff ff6e 	bl	80002b8 <DHT11_Read>
 80003dc:	4603      	mov	r3, r0
 80003de:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
      TCI = DHT11_Read(); // 温度整数
 80003e2:	f7ff ff69 	bl	80002b8 <DHT11_Read>
 80003e6:	4603      	mov	r3, r0
 80003e8:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
      TCD = DHT11_Read(); // 温度小数
 80003ec:	f7ff ff64 	bl	80002b8 <DHT11_Read>
 80003f0:	4603      	mov	r3, r0
 80003f2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      SUM = DHT11_Read(); // 校验和
 80003f6:	f7ff ff5f 	bl	80002b8 <DHT11_Read>
 80003fa:	4603      	mov	r3, r0
 80003fc:	f887 3041 	strb.w	r3, [r7, #65]	@ 0x41

      // 只有在校验和正确时, 才更新温湿度值
      // 如果校验失败, Temperature 会保持上一次的正确数值
      if (RHI + RHD + TCI + TCD == SUM)
 8000400:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8000404:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8000408:	441a      	add	r2, r3
 800040a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800040e:	441a      	add	r2, r3
 8000410:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 8000414:	441a      	add	r2, r3
 8000416:	f897 3041 	ldrb.w	r3, [r7, #65]	@ 0x41
 800041a:	429a      	cmp	r2, r3
 800041c:	d107      	bne.n	800042e <main+0xda>
      {
        Temperature = TCI;
 800041e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8000422:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
        Humidity = RHI;
 8000426:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 800042a:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    // (如果DHT11_Start()失败, Temperature 也会保持上一次的值)

    // --- 2. 控制逻辑 (风扇) ---
    // 硬件: 风扇在 PB4, 高电平有效 (SET = ON)
    // 逻辑: 温度 > 25 时 ON
    if (Temperature > 26)
 800042e:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8000432:	2b1a      	cmp	r3, #26
 8000434:	d90a      	bls.n	800044c <main+0xf8>
    {
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET); // <-- 控制 PB4, SET
 8000436:	2201      	movs	r2, #1
 8000438:	2110      	movs	r1, #16
 800043a:	484a      	ldr	r0, [pc, #296]	@ (8000564 <main+0x210>)
 800043c:	f001 f877 	bl	800152e <HAL_GPIO_WritePin>
      sprintf(fan_str, "FAN: ON");
 8000440:	1d3b      	adds	r3, r7, #4
 8000442:	4949      	ldr	r1, [pc, #292]	@ (8000568 <main+0x214>)
 8000444:	4618      	mov	r0, r3
 8000446:	f002 fbf7 	bl	8002c38 <siprintf>
 800044a:	e009      	b.n	8000460 <main+0x10c>
    }
    else
    {
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET); // <-- 控制 PB4, RESET
 800044c:	2200      	movs	r2, #0
 800044e:	2110      	movs	r1, #16
 8000450:	4844      	ldr	r0, [pc, #272]	@ (8000564 <main+0x210>)
 8000452:	f001 f86c 	bl	800152e <HAL_GPIO_WritePin>
      sprintf(fan_str, "FAN: OFF");
 8000456:	1d3b      	adds	r3, r7, #4
 8000458:	4944      	ldr	r1, [pc, #272]	@ (800056c <main+0x218>)
 800045a:	4618      	mov	r0, r3
 800045c:	f002 fbec 	bl	8002c38 <siprintf>
    }

    // --- 3. 控制逻辑 (蒸汽) ---
    // 硬件: 蒸汽在 PB10, 低电平有效 (RESET = ON)
    // 逻辑: 湿度 < 55 时 ON (你可以改回 45)
    if (Humidity < 65)
 8000460:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8000464:	2b40      	cmp	r3, #64	@ 0x40
 8000466:	d806      	bhi.n	8000476 <main+0x122>
    {
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET); // <-- 控制 PB10, RESET
 8000468:	2200      	movs	r2, #0
 800046a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800046e:	483d      	ldr	r0, [pc, #244]	@ (8000564 <main+0x210>)
 8000470:	f001 f85d 	bl	800152e <HAL_GPIO_WritePin>
 8000474:	e005      	b.n	8000482 <main+0x12e>
    }
    else
    {
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET); // <-- 控制 PB10, SET
 8000476:	2201      	movs	r2, #1
 8000478:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800047c:	4839      	ldr	r0, [pc, #228]	@ (8000564 <main+0x210>)
 800047e:	f001 f856 	bl	800152e <HAL_GPIO_WritePin>
    }

    // --- 4. 显示数据到OLED ---
    sprintf(temp_str, "Temp:%d C", Temperature);
 8000482:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 8000486:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800048a:	4939      	ldr	r1, [pc, #228]	@ (8000570 <main+0x21c>)
 800048c:	4618      	mov	r0, r3
 800048e:	f002 fbd3 	bl	8002c38 <siprintf>
    sprintf(hum_str, "Hum: %d %%", Humidity);
 8000492:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 8000496:	f107 0318 	add.w	r3, r7, #24
 800049a:	4936      	ldr	r1, [pc, #216]	@ (8000574 <main+0x220>)
 800049c:	4618      	mov	r0, r3
 800049e:	f002 fbcb 	bl	8002c38 <siprintf>
    if (Temperature > 26)
 80004a2:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80004a6:	2b1a      	cmp	r3, #26
 80004a8:	d905      	bls.n	80004b6 <main+0x162>
    {
      sprintf(fan_str, "FAN: ON");
 80004aa:	1d3b      	adds	r3, r7, #4
 80004ac:	492e      	ldr	r1, [pc, #184]	@ (8000568 <main+0x214>)
 80004ae:	4618      	mov	r0, r3
 80004b0:	f002 fbc2 	bl	8002c38 <siprintf>
 80004b4:	e004      	b.n	80004c0 <main+0x16c>
    }
    else
    {
      sprintf(fan_str, "FAN: OFF");
 80004b6:	1d3b      	adds	r3, r7, #4
 80004b8:	492c      	ldr	r1, [pc, #176]	@ (800056c <main+0x218>)
 80004ba:	4618      	mov	r0, r3
 80004bc:	f002 fbbc 	bl	8002c38 <siprintf>
    }

    ssd1306_Fill(Black); // 清屏
 80004c0:	2000      	movs	r0, #0
 80004c2:	f000 fa25 	bl	8000910 <ssd1306_Fill>

    // --- 显示图标和数据 (最终布局) ---
    // 1. 温度 (黄色区域)
    ssd1306_DrawBitmap(0, 0, icon_temperature, 14, 18, White); // 绘制 14x18 温度图标
 80004c6:	2301      	movs	r3, #1
 80004c8:	9301      	str	r3, [sp, #4]
 80004ca:	2312      	movs	r3, #18
 80004cc:	9300      	str	r3, [sp, #0]
 80004ce:	230e      	movs	r3, #14
 80004d0:	4a29      	ldr	r2, [pc, #164]	@ (8000578 <main+0x224>)
 80004d2:	2100      	movs	r1, #0
 80004d4:	2000      	movs	r0, #0
 80004d6:	f000 fb7d 	bl	8000bd4 <ssd1306_DrawBitmap>
    ssd1306_SetCursor(20, 0);                                  // 文字左移
 80004da:	2100      	movs	r1, #0
 80004dc:	2014      	movs	r0, #20
 80004de:	f000 fb61 	bl	8000ba4 <ssd1306_SetCursor>
    ssd1306_WriteString(temp_str, Font_11x18, White);
 80004e2:	4b26      	ldr	r3, [pc, #152]	@ (800057c <main+0x228>)
 80004e4:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 80004e8:	2201      	movs	r2, #1
 80004ea:	9200      	str	r2, [sp, #0]
 80004ec:	cb0e      	ldmia	r3, {r1, r2, r3}
 80004ee:	f000 fb33 	bl	8000b58 <ssd1306_WriteString>

    // 2. 湿度 (蓝色区域)
    ssd1306_DrawBitmap(0, 22, icon_humidity, 14, 18, White); // 绘制 14x18 湿度图标
 80004f2:	2301      	movs	r3, #1
 80004f4:	9301      	str	r3, [sp, #4]
 80004f6:	2312      	movs	r3, #18
 80004f8:	9300      	str	r3, [sp, #0]
 80004fa:	230e      	movs	r3, #14
 80004fc:	4a20      	ldr	r2, [pc, #128]	@ (8000580 <main+0x22c>)
 80004fe:	2116      	movs	r1, #22
 8000500:	2000      	movs	r0, #0
 8000502:	f000 fb67 	bl	8000bd4 <ssd1306_DrawBitmap>
    ssd1306_SetCursor(20, 24);                               // 文字左移并微调垂直位置
 8000506:	2118      	movs	r1, #24
 8000508:	2014      	movs	r0, #20
 800050a:	f000 fb4b 	bl	8000ba4 <ssd1306_SetCursor>
    ssd1306_WriteString(hum_str, Font_11x18, White);
 800050e:	4b1b      	ldr	r3, [pc, #108]	@ (800057c <main+0x228>)
 8000510:	f107 0018 	add.w	r0, r7, #24
 8000514:	2201      	movs	r2, #1
 8000516:	9200      	str	r2, [sp, #0]
 8000518:	cb0e      	ldmia	r3, {r1, r2, r3}
 800051a:	f000 fb1d 	bl	8000b58 <ssd1306_WriteString>

    // 3. 风扇状态 (蓝色区域)
    ssd1306_DrawBitmap(0, 45, icon_fan_on, 18, 18, White); // 绘制 18x18 风扇图标
 800051e:	2301      	movs	r3, #1
 8000520:	9301      	str	r3, [sp, #4]
 8000522:	2312      	movs	r3, #18
 8000524:	9300      	str	r3, [sp, #0]
 8000526:	2312      	movs	r3, #18
 8000528:	4a16      	ldr	r2, [pc, #88]	@ (8000584 <main+0x230>)
 800052a:	212d      	movs	r1, #45	@ 0x2d
 800052c:	2000      	movs	r0, #0
 800052e:	f000 fb51 	bl	8000bd4 <ssd1306_DrawBitmap>
    ssd1306_SetCursor(20, 50);                             // 文字左移
 8000532:	2132      	movs	r1, #50	@ 0x32
 8000534:	2014      	movs	r0, #20
 8000536:	f000 fb35 	bl	8000ba4 <ssd1306_SetCursor>
    ssd1306_WriteString(fan_str, Font_7x10, White);
 800053a:	4b08      	ldr	r3, [pc, #32]	@ (800055c <main+0x208>)
 800053c:	1d38      	adds	r0, r7, #4
 800053e:	2201      	movs	r2, #1
 8000540:	9200      	str	r2, [sp, #0]
 8000542:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000544:	f000 fb08 	bl	8000b58 <ssd1306_WriteString>

    ssd1306_UpdateScreen(); // 推送数据到屏幕
 8000548:	f000 f9fa 	bl	8000940 <ssd1306_UpdateScreen>

    HAL_Delay(1000); // 每一秒钟重复一次
 800054c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000550:	f000 fd4a 	bl	8000fe8 <HAL_Delay>
    if (DHT11_Start())
 8000554:	e736      	b.n	80003c4 <main+0x70>
 8000556:	bf00      	nop
 8000558:	200000cc 	.word	0x200000cc
 800055c:	08004b30 	.word	0x08004b30
 8000560:	080035b0 	.word	0x080035b0
 8000564:	40010c00 	.word	0x40010c00
 8000568:	080035bc 	.word	0x080035bc
 800056c:	080035c4 	.word	0x080035c4
 8000570:	080035d0 	.word	0x080035d0
 8000574:	080035dc 	.word	0x080035dc
 8000578:	080035e8 	.word	0x080035e8
 800057c:	08004b3c 	.word	0x08004b3c
 8000580:	0800360c 	.word	0x0800360c
 8000584:	08003630 	.word	0x08003630

08000588 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b090      	sub	sp, #64	@ 0x40
 800058c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800058e:	f107 0318 	add.w	r3, r7, #24
 8000592:	2228      	movs	r2, #40	@ 0x28
 8000594:	2100      	movs	r1, #0
 8000596:	4618      	mov	r0, r3
 8000598:	f002 fb70 	bl	8002c7c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800059c:	1d3b      	adds	r3, r7, #4
 800059e:	2200      	movs	r2, #0
 80005a0:	601a      	str	r2, [r3, #0]
 80005a2:	605a      	str	r2, [r3, #4]
 80005a4:	609a      	str	r2, [r3, #8]
 80005a6:	60da      	str	r2, [r3, #12]
 80005a8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005aa:	2301      	movs	r3, #1
 80005ac:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005ae:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80005b2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80005b4:	2300      	movs	r3, #0
 80005b6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005b8:	2301      	movs	r3, #1
 80005ba:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005bc:	2302      	movs	r3, #2
 80005be:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005c0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80005c4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80005c6:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80005ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005cc:	f107 0318 	add.w	r3, r7, #24
 80005d0:	4618      	mov	r0, r3
 80005d2:	f001 fc71 	bl	8001eb8 <HAL_RCC_OscConfig>
 80005d6:	4603      	mov	r3, r0
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d001      	beq.n	80005e0 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80005dc:	f000 f8f0 	bl	80007c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80005e0:	230f      	movs	r3, #15
 80005e2:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005e4:	2302      	movs	r3, #2
 80005e6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005e8:	2300      	movs	r3, #0
 80005ea:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005ec:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80005f0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005f2:	2300      	movs	r3, #0
 80005f4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80005f6:	1d3b      	adds	r3, r7, #4
 80005f8:	2102      	movs	r1, #2
 80005fa:	4618      	mov	r0, r3
 80005fc:	f001 fede 	bl	80023bc <HAL_RCC_ClockConfig>
 8000600:	4603      	mov	r3, r0
 8000602:	2b00      	cmp	r3, #0
 8000604:	d001      	beq.n	800060a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000606:	f000 f8db 	bl	80007c0 <Error_Handler>
  }
}
 800060a:	bf00      	nop
 800060c:	3740      	adds	r7, #64	@ 0x40
 800060e:	46bd      	mov	sp, r7
 8000610:	bd80      	pop	{r7, pc}
	...

08000614 <MX_I2C1_Init>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000618:	4b12      	ldr	r3, [pc, #72]	@ (8000664 <MX_I2C1_Init+0x50>)
 800061a:	4a13      	ldr	r2, [pc, #76]	@ (8000668 <MX_I2C1_Init+0x54>)
 800061c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800061e:	4b11      	ldr	r3, [pc, #68]	@ (8000664 <MX_I2C1_Init+0x50>)
 8000620:	4a12      	ldr	r2, [pc, #72]	@ (800066c <MX_I2C1_Init+0x58>)
 8000622:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000624:	4b0f      	ldr	r3, [pc, #60]	@ (8000664 <MX_I2C1_Init+0x50>)
 8000626:	2200      	movs	r2, #0
 8000628:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800062a:	4b0e      	ldr	r3, [pc, #56]	@ (8000664 <MX_I2C1_Init+0x50>)
 800062c:	2200      	movs	r2, #0
 800062e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000630:	4b0c      	ldr	r3, [pc, #48]	@ (8000664 <MX_I2C1_Init+0x50>)
 8000632:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000636:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000638:	4b0a      	ldr	r3, [pc, #40]	@ (8000664 <MX_I2C1_Init+0x50>)
 800063a:	2200      	movs	r2, #0
 800063c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800063e:	4b09      	ldr	r3, [pc, #36]	@ (8000664 <MX_I2C1_Init+0x50>)
 8000640:	2200      	movs	r2, #0
 8000642:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000644:	4b07      	ldr	r3, [pc, #28]	@ (8000664 <MX_I2C1_Init+0x50>)
 8000646:	2200      	movs	r2, #0
 8000648:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800064a:	4b06      	ldr	r3, [pc, #24]	@ (8000664 <MX_I2C1_Init+0x50>)
 800064c:	2200      	movs	r2, #0
 800064e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000650:	4804      	ldr	r0, [pc, #16]	@ (8000664 <MX_I2C1_Init+0x50>)
 8000652:	f000 ff85 	bl	8001560 <HAL_I2C_Init>
 8000656:	4603      	mov	r3, r0
 8000658:	2b00      	cmp	r3, #0
 800065a:	d001      	beq.n	8000660 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800065c:	f000 f8b0 	bl	80007c0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */
}
 8000660:	bf00      	nop
 8000662:	bd80      	pop	{r7, pc}
 8000664:	20000078 	.word	0x20000078
 8000668:	40005400 	.word	0x40005400
 800066c:	000186a0 	.word	0x000186a0

08000670 <MX_TIM1_Init>:
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b086      	sub	sp, #24
 8000674:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000676:	f107 0308 	add.w	r3, r7, #8
 800067a:	2200      	movs	r2, #0
 800067c:	601a      	str	r2, [r3, #0]
 800067e:	605a      	str	r2, [r3, #4]
 8000680:	609a      	str	r2, [r3, #8]
 8000682:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000684:	463b      	mov	r3, r7
 8000686:	2200      	movs	r2, #0
 8000688:	601a      	str	r2, [r3, #0]
 800068a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800068c:	4b1e      	ldr	r3, [pc, #120]	@ (8000708 <MX_TIM1_Init+0x98>)
 800068e:	4a1f      	ldr	r2, [pc, #124]	@ (800070c <MX_TIM1_Init+0x9c>)
 8000690:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 8000692:	4b1d      	ldr	r3, [pc, #116]	@ (8000708 <MX_TIM1_Init+0x98>)
 8000694:	2247      	movs	r2, #71	@ 0x47
 8000696:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000698:	4b1b      	ldr	r3, [pc, #108]	@ (8000708 <MX_TIM1_Init+0x98>)
 800069a:	2200      	movs	r2, #0
 800069c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800069e:	4b1a      	ldr	r3, [pc, #104]	@ (8000708 <MX_TIM1_Init+0x98>)
 80006a0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80006a4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006a6:	4b18      	ldr	r3, [pc, #96]	@ (8000708 <MX_TIM1_Init+0x98>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80006ac:	4b16      	ldr	r3, [pc, #88]	@ (8000708 <MX_TIM1_Init+0x98>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006b2:	4b15      	ldr	r3, [pc, #84]	@ (8000708 <MX_TIM1_Init+0x98>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80006b8:	4813      	ldr	r0, [pc, #76]	@ (8000708 <MX_TIM1_Init+0x98>)
 80006ba:	f001 fff9 	bl	80026b0 <HAL_TIM_Base_Init>
 80006be:	4603      	mov	r3, r0
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d001      	beq.n	80006c8 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80006c4:	f000 f87c 	bl	80007c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80006c8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006cc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80006ce:	f107 0308 	add.w	r3, r7, #8
 80006d2:	4619      	mov	r1, r3
 80006d4:	480c      	ldr	r0, [pc, #48]	@ (8000708 <MX_TIM1_Init+0x98>)
 80006d6:	f002 f885 	bl	80027e4 <HAL_TIM_ConfigClockSource>
 80006da:	4603      	mov	r3, r0
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d001      	beq.n	80006e4 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80006e0:	f000 f86e 	bl	80007c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006e4:	2300      	movs	r3, #0
 80006e6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006e8:	2300      	movs	r3, #0
 80006ea:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80006ec:	463b      	mov	r3, r7
 80006ee:	4619      	mov	r1, r3
 80006f0:	4805      	ldr	r0, [pc, #20]	@ (8000708 <MX_TIM1_Init+0x98>)
 80006f2:	f002 fa43 	bl	8002b7c <HAL_TIMEx_MasterConfigSynchronization>
 80006f6:	4603      	mov	r3, r0
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d001      	beq.n	8000700 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80006fc:	f000 f860 	bl	80007c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
}
 8000700:	bf00      	nop
 8000702:	3718      	adds	r7, #24
 8000704:	46bd      	mov	sp, r7
 8000706:	bd80      	pop	{r7, pc}
 8000708:	200000cc 	.word	0x200000cc
 800070c:	40012c00 	.word	0x40012c00

08000710 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b088      	sub	sp, #32
 8000714:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000716:	f107 0310 	add.w	r3, r7, #16
 800071a:	2200      	movs	r2, #0
 800071c:	601a      	str	r2, [r3, #0]
 800071e:	605a      	str	r2, [r3, #4]
 8000720:	609a      	str	r2, [r3, #8]
 8000722:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000724:	4b24      	ldr	r3, [pc, #144]	@ (80007b8 <MX_GPIO_Init+0xa8>)
 8000726:	699b      	ldr	r3, [r3, #24]
 8000728:	4a23      	ldr	r2, [pc, #140]	@ (80007b8 <MX_GPIO_Init+0xa8>)
 800072a:	f043 0320 	orr.w	r3, r3, #32
 800072e:	6193      	str	r3, [r2, #24]
 8000730:	4b21      	ldr	r3, [pc, #132]	@ (80007b8 <MX_GPIO_Init+0xa8>)
 8000732:	699b      	ldr	r3, [r3, #24]
 8000734:	f003 0320 	and.w	r3, r3, #32
 8000738:	60fb      	str	r3, [r7, #12]
 800073a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800073c:	4b1e      	ldr	r3, [pc, #120]	@ (80007b8 <MX_GPIO_Init+0xa8>)
 800073e:	699b      	ldr	r3, [r3, #24]
 8000740:	4a1d      	ldr	r2, [pc, #116]	@ (80007b8 <MX_GPIO_Init+0xa8>)
 8000742:	f043 0308 	orr.w	r3, r3, #8
 8000746:	6193      	str	r3, [r2, #24]
 8000748:	4b1b      	ldr	r3, [pc, #108]	@ (80007b8 <MX_GPIO_Init+0xa8>)
 800074a:	699b      	ldr	r3, [r3, #24]
 800074c:	f003 0308 	and.w	r3, r3, #8
 8000750:	60bb      	str	r3, [r7, #8]
 8000752:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000754:	4b18      	ldr	r3, [pc, #96]	@ (80007b8 <MX_GPIO_Init+0xa8>)
 8000756:	699b      	ldr	r3, [r3, #24]
 8000758:	4a17      	ldr	r2, [pc, #92]	@ (80007b8 <MX_GPIO_Init+0xa8>)
 800075a:	f043 0304 	orr.w	r3, r3, #4
 800075e:	6193      	str	r3, [r2, #24]
 8000760:	4b15      	ldr	r3, [pc, #84]	@ (80007b8 <MX_GPIO_Init+0xa8>)
 8000762:	699b      	ldr	r3, [r3, #24]
 8000764:	f003 0304 	and.w	r3, r3, #4
 8000768:	607b      	str	r3, [r7, #4]
 800076a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10 | GPIO_PIN_4, GPIO_PIN_RESET);
 800076c:	2200      	movs	r2, #0
 800076e:	f44f 6182 	mov.w	r1, #1040	@ 0x410
 8000772:	4812      	ldr	r0, [pc, #72]	@ (80007bc <MX_GPIO_Init+0xac>)
 8000774:	f000 fedb 	bl	800152e <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB10 PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_10 | GPIO_PIN_4;
 8000778:	f44f 6382 	mov.w	r3, #1040	@ 0x410
 800077c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800077e:	2301      	movs	r3, #1
 8000780:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000782:	2300      	movs	r3, #0
 8000784:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000786:	2302      	movs	r3, #2
 8000788:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800078a:	f107 0310 	add.w	r3, r7, #16
 800078e:	4619      	mov	r1, r3
 8000790:	480a      	ldr	r0, [pc, #40]	@ (80007bc <MX_GPIO_Init+0xac>)
 8000792:	f000 fd31 	bl	80011f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000796:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800079a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800079c:	2300      	movs	r3, #0
 800079e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a0:	2300      	movs	r3, #0
 80007a2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007a4:	f107 0310 	add.w	r3, r7, #16
 80007a8:	4619      	mov	r1, r3
 80007aa:	4804      	ldr	r0, [pc, #16]	@ (80007bc <MX_GPIO_Init+0xac>)
 80007ac:	f000 fd24 	bl	80011f8 <HAL_GPIO_Init>
}
 80007b0:	bf00      	nop
 80007b2:	3720      	adds	r7, #32
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bd80      	pop	{r7, pc}
 80007b8:	40021000 	.word	0x40021000
 80007bc:	40010c00 	.word	0x40010c00

080007c0 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80007c0:	b480      	push	{r7}
 80007c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007c4:	b672      	cpsid	i
}
 80007c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007c8:	bf00      	nop
 80007ca:	e7fd      	b.n	80007c8 <Error_Handler+0x8>

080007cc <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 80007cc:	b480      	push	{r7}
 80007ce:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 80007d0:	bf00      	nop
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bc80      	pop	{r7}
 80007d6:	4770      	bx	lr

080007d8 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 80007d8:	b580      	push	{r7, lr}
 80007da:	b086      	sub	sp, #24
 80007dc:	af04      	add	r7, sp, #16
 80007de:	4603      	mov	r3, r0
 80007e0:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 80007e2:	f04f 33ff 	mov.w	r3, #4294967295
 80007e6:	9302      	str	r3, [sp, #8]
 80007e8:	2301      	movs	r3, #1
 80007ea:	9301      	str	r3, [sp, #4]
 80007ec:	1dfb      	adds	r3, r7, #7
 80007ee:	9300      	str	r3, [sp, #0]
 80007f0:	2301      	movs	r3, #1
 80007f2:	2200      	movs	r2, #0
 80007f4:	2178      	movs	r1, #120	@ 0x78
 80007f6:	4803      	ldr	r0, [pc, #12]	@ (8000804 <ssd1306_WriteCommand+0x2c>)
 80007f8:	f000 fff6 	bl	80017e8 <HAL_I2C_Mem_Write>
}
 80007fc:	bf00      	nop
 80007fe:	3708      	adds	r7, #8
 8000800:	46bd      	mov	sp, r7
 8000802:	bd80      	pop	{r7, pc}
 8000804:	20000078 	.word	0x20000078

08000808 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8000808:	b580      	push	{r7, lr}
 800080a:	b086      	sub	sp, #24
 800080c:	af04      	add	r7, sp, #16
 800080e:	6078      	str	r0, [r7, #4]
 8000810:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8000812:	683b      	ldr	r3, [r7, #0]
 8000814:	b29b      	uxth	r3, r3
 8000816:	f04f 32ff 	mov.w	r2, #4294967295
 800081a:	9202      	str	r2, [sp, #8]
 800081c:	9301      	str	r3, [sp, #4]
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	9300      	str	r3, [sp, #0]
 8000822:	2301      	movs	r3, #1
 8000824:	2240      	movs	r2, #64	@ 0x40
 8000826:	2178      	movs	r1, #120	@ 0x78
 8000828:	4803      	ldr	r0, [pc, #12]	@ (8000838 <ssd1306_WriteData+0x30>)
 800082a:	f000 ffdd 	bl	80017e8 <HAL_I2C_Mem_Write>
}
 800082e:	bf00      	nop
 8000830:	3708      	adds	r7, #8
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}
 8000836:	bf00      	nop
 8000838:	20000078 	.word	0x20000078

0800083c <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 800083c:	b580      	push	{r7, lr}
 800083e:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8000840:	f7ff ffc4 	bl	80007cc <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8000844:	2064      	movs	r0, #100	@ 0x64
 8000846:	f000 fbcf 	bl	8000fe8 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 800084a:	2000      	movs	r0, #0
 800084c:	f000 fa30 	bl	8000cb0 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8000850:	2020      	movs	r0, #32
 8000852:	f7ff ffc1 	bl	80007d8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8000856:	2000      	movs	r0, #0
 8000858:	f7ff ffbe 	bl	80007d8 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 800085c:	20b0      	movs	r0, #176	@ 0xb0
 800085e:	f7ff ffbb 	bl	80007d8 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8000862:	20c8      	movs	r0, #200	@ 0xc8
 8000864:	f7ff ffb8 	bl	80007d8 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8000868:	2000      	movs	r0, #0
 800086a:	f7ff ffb5 	bl	80007d8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 800086e:	2010      	movs	r0, #16
 8000870:	f7ff ffb2 	bl	80007d8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8000874:	2040      	movs	r0, #64	@ 0x40
 8000876:	f7ff ffaf 	bl	80007d8 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 800087a:	20ff      	movs	r0, #255	@ 0xff
 800087c:	f000 fa05 	bl	8000c8a <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8000880:	20a1      	movs	r0, #161	@ 0xa1
 8000882:	f7ff ffa9 	bl	80007d8 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8000886:	20a6      	movs	r0, #166	@ 0xa6
 8000888:	f7ff ffa6 	bl	80007d8 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 800088c:	20a8      	movs	r0, #168	@ 0xa8
 800088e:	f7ff ffa3 	bl	80007d8 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8000892:	203f      	movs	r0, #63	@ 0x3f
 8000894:	f7ff ffa0 	bl	80007d8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8000898:	20a4      	movs	r0, #164	@ 0xa4
 800089a:	f7ff ff9d 	bl	80007d8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 800089e:	20d3      	movs	r0, #211	@ 0xd3
 80008a0:	f7ff ff9a 	bl	80007d8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 80008a4:	2000      	movs	r0, #0
 80008a6:	f7ff ff97 	bl	80007d8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 80008aa:	20d5      	movs	r0, #213	@ 0xd5
 80008ac:	f7ff ff94 	bl	80007d8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 80008b0:	20f0      	movs	r0, #240	@ 0xf0
 80008b2:	f7ff ff91 	bl	80007d8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 80008b6:	20d9      	movs	r0, #217	@ 0xd9
 80008b8:	f7ff ff8e 	bl	80007d8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 80008bc:	2022      	movs	r0, #34	@ 0x22
 80008be:	f7ff ff8b 	bl	80007d8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 80008c2:	20da      	movs	r0, #218	@ 0xda
 80008c4:	f7ff ff88 	bl	80007d8 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 80008c8:	2012      	movs	r0, #18
 80008ca:	f7ff ff85 	bl	80007d8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 80008ce:	20db      	movs	r0, #219	@ 0xdb
 80008d0:	f7ff ff82 	bl	80007d8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 80008d4:	2020      	movs	r0, #32
 80008d6:	f7ff ff7f 	bl	80007d8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 80008da:	208d      	movs	r0, #141	@ 0x8d
 80008dc:	f7ff ff7c 	bl	80007d8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 80008e0:	2014      	movs	r0, #20
 80008e2:	f7ff ff79 	bl	80007d8 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 80008e6:	2001      	movs	r0, #1
 80008e8:	f000 f9e2 	bl	8000cb0 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 80008ec:	2000      	movs	r0, #0
 80008ee:	f000 f80f 	bl	8000910 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 80008f2:	f000 f825 	bl	8000940 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 80008f6:	4b05      	ldr	r3, [pc, #20]	@ (800090c <ssd1306_Init+0xd0>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 80008fc:	4b03      	ldr	r3, [pc, #12]	@ (800090c <ssd1306_Init+0xd0>)
 80008fe:	2200      	movs	r2, #0
 8000900:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8000902:	4b02      	ldr	r3, [pc, #8]	@ (800090c <ssd1306_Init+0xd0>)
 8000904:	2201      	movs	r2, #1
 8000906:	711a      	strb	r2, [r3, #4]
}
 8000908:	bf00      	nop
 800090a:	bd80      	pop	{r7, pc}
 800090c:	20000514 	.word	0x20000514

08000910 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8000910:	b580      	push	{r7, lr}
 8000912:	b082      	sub	sp, #8
 8000914:	af00      	add	r7, sp, #0
 8000916:	4603      	mov	r3, r0
 8000918:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 800091a:	79fb      	ldrb	r3, [r7, #7]
 800091c:	2b00      	cmp	r3, #0
 800091e:	d101      	bne.n	8000924 <ssd1306_Fill+0x14>
 8000920:	2300      	movs	r3, #0
 8000922:	e000      	b.n	8000926 <ssd1306_Fill+0x16>
 8000924:	23ff      	movs	r3, #255	@ 0xff
 8000926:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800092a:	4619      	mov	r1, r3
 800092c:	4803      	ldr	r0, [pc, #12]	@ (800093c <ssd1306_Fill+0x2c>)
 800092e:	f002 f9a5 	bl	8002c7c <memset>
}
 8000932:	bf00      	nop
 8000934:	3708      	adds	r7, #8
 8000936:	46bd      	mov	sp, r7
 8000938:	bd80      	pop	{r7, pc}
 800093a:	bf00      	nop
 800093c:	20000114 	.word	0x20000114

08000940 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8000940:	b580      	push	{r7, lr}
 8000942:	b082      	sub	sp, #8
 8000944:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8000946:	2300      	movs	r3, #0
 8000948:	71fb      	strb	r3, [r7, #7]
 800094a:	e016      	b.n	800097a <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 800094c:	79fb      	ldrb	r3, [r7, #7]
 800094e:	3b50      	subs	r3, #80	@ 0x50
 8000950:	b2db      	uxtb	r3, r3
 8000952:	4618      	mov	r0, r3
 8000954:	f7ff ff40 	bl	80007d8 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8000958:	2000      	movs	r0, #0
 800095a:	f7ff ff3d 	bl	80007d8 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 800095e:	2010      	movs	r0, #16
 8000960:	f7ff ff3a 	bl	80007d8 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8000964:	79fb      	ldrb	r3, [r7, #7]
 8000966:	01db      	lsls	r3, r3, #7
 8000968:	4a08      	ldr	r2, [pc, #32]	@ (800098c <ssd1306_UpdateScreen+0x4c>)
 800096a:	4413      	add	r3, r2
 800096c:	2180      	movs	r1, #128	@ 0x80
 800096e:	4618      	mov	r0, r3
 8000970:	f7ff ff4a 	bl	8000808 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8000974:	79fb      	ldrb	r3, [r7, #7]
 8000976:	3301      	adds	r3, #1
 8000978:	71fb      	strb	r3, [r7, #7]
 800097a:	79fb      	ldrb	r3, [r7, #7]
 800097c:	2b07      	cmp	r3, #7
 800097e:	d9e5      	bls.n	800094c <ssd1306_UpdateScreen+0xc>
    }
}
 8000980:	bf00      	nop
 8000982:	bf00      	nop
 8000984:	3708      	adds	r7, #8
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}
 800098a:	bf00      	nop
 800098c:	20000114 	.word	0x20000114

08000990 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8000990:	b480      	push	{r7}
 8000992:	b083      	sub	sp, #12
 8000994:	af00      	add	r7, sp, #0
 8000996:	4603      	mov	r3, r0
 8000998:	71fb      	strb	r3, [r7, #7]
 800099a:	460b      	mov	r3, r1
 800099c:	71bb      	strb	r3, [r7, #6]
 800099e:	4613      	mov	r3, r2
 80009a0:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 80009a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	db3d      	blt.n	8000a26 <ssd1306_DrawPixel+0x96>
 80009aa:	79bb      	ldrb	r3, [r7, #6]
 80009ac:	2b3f      	cmp	r3, #63	@ 0x3f
 80009ae:	d83a      	bhi.n	8000a26 <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 80009b0:	797b      	ldrb	r3, [r7, #5]
 80009b2:	2b01      	cmp	r3, #1
 80009b4:	d11a      	bne.n	80009ec <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80009b6:	79fa      	ldrb	r2, [r7, #7]
 80009b8:	79bb      	ldrb	r3, [r7, #6]
 80009ba:	08db      	lsrs	r3, r3, #3
 80009bc:	b2d8      	uxtb	r0, r3
 80009be:	4603      	mov	r3, r0
 80009c0:	01db      	lsls	r3, r3, #7
 80009c2:	4413      	add	r3, r2
 80009c4:	4a1a      	ldr	r2, [pc, #104]	@ (8000a30 <ssd1306_DrawPixel+0xa0>)
 80009c6:	5cd3      	ldrb	r3, [r2, r3]
 80009c8:	b25a      	sxtb	r2, r3
 80009ca:	79bb      	ldrb	r3, [r7, #6]
 80009cc:	f003 0307 	and.w	r3, r3, #7
 80009d0:	2101      	movs	r1, #1
 80009d2:	fa01 f303 	lsl.w	r3, r1, r3
 80009d6:	b25b      	sxtb	r3, r3
 80009d8:	4313      	orrs	r3, r2
 80009da:	b259      	sxtb	r1, r3
 80009dc:	79fa      	ldrb	r2, [r7, #7]
 80009de:	4603      	mov	r3, r0
 80009e0:	01db      	lsls	r3, r3, #7
 80009e2:	4413      	add	r3, r2
 80009e4:	b2c9      	uxtb	r1, r1
 80009e6:	4a12      	ldr	r2, [pc, #72]	@ (8000a30 <ssd1306_DrawPixel+0xa0>)
 80009e8:	54d1      	strb	r1, [r2, r3]
 80009ea:	e01d      	b.n	8000a28 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80009ec:	79fa      	ldrb	r2, [r7, #7]
 80009ee:	79bb      	ldrb	r3, [r7, #6]
 80009f0:	08db      	lsrs	r3, r3, #3
 80009f2:	b2d8      	uxtb	r0, r3
 80009f4:	4603      	mov	r3, r0
 80009f6:	01db      	lsls	r3, r3, #7
 80009f8:	4413      	add	r3, r2
 80009fa:	4a0d      	ldr	r2, [pc, #52]	@ (8000a30 <ssd1306_DrawPixel+0xa0>)
 80009fc:	5cd3      	ldrb	r3, [r2, r3]
 80009fe:	b25a      	sxtb	r2, r3
 8000a00:	79bb      	ldrb	r3, [r7, #6]
 8000a02:	f003 0307 	and.w	r3, r3, #7
 8000a06:	2101      	movs	r1, #1
 8000a08:	fa01 f303 	lsl.w	r3, r1, r3
 8000a0c:	b25b      	sxtb	r3, r3
 8000a0e:	43db      	mvns	r3, r3
 8000a10:	b25b      	sxtb	r3, r3
 8000a12:	4013      	ands	r3, r2
 8000a14:	b259      	sxtb	r1, r3
 8000a16:	79fa      	ldrb	r2, [r7, #7]
 8000a18:	4603      	mov	r3, r0
 8000a1a:	01db      	lsls	r3, r3, #7
 8000a1c:	4413      	add	r3, r2
 8000a1e:	b2c9      	uxtb	r1, r1
 8000a20:	4a03      	ldr	r2, [pc, #12]	@ (8000a30 <ssd1306_DrawPixel+0xa0>)
 8000a22:	54d1      	strb	r1, [r2, r3]
 8000a24:	e000      	b.n	8000a28 <ssd1306_DrawPixel+0x98>
        return;
 8000a26:	bf00      	nop
    }
}
 8000a28:	370c      	adds	r7, #12
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bc80      	pop	{r7}
 8000a2e:	4770      	bx	lr
 8000a30:	20000114 	.word	0x20000114

08000a34 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8000a34:	b590      	push	{r4, r7, lr}
 8000a36:	b089      	sub	sp, #36	@ 0x24
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	4604      	mov	r4, r0
 8000a3c:	4638      	mov	r0, r7
 8000a3e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8000a42:	4623      	mov	r3, r4
 8000a44:	73fb      	strb	r3, [r7, #15]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8000a46:	7bfb      	ldrb	r3, [r7, #15]
 8000a48:	2b1f      	cmp	r3, #31
 8000a4a:	d902      	bls.n	8000a52 <ssd1306_WriteChar+0x1e>
 8000a4c:	7bfb      	ldrb	r3, [r7, #15]
 8000a4e:	2b7e      	cmp	r3, #126	@ 0x7e
 8000a50:	d901      	bls.n	8000a56 <ssd1306_WriteChar+0x22>
        return 0;
 8000a52:	2300      	movs	r3, #0
 8000a54:	e079      	b.n	8000b4a <ssd1306_WriteChar+0x116>
    
    // Char width is not equal to font width for proportional font
    const uint8_t char_width = Font.char_width ? Font.char_width[ch-32] : Font.width;
 8000a56:	68bb      	ldr	r3, [r7, #8]
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d005      	beq.n	8000a68 <ssd1306_WriteChar+0x34>
 8000a5c:	68ba      	ldr	r2, [r7, #8]
 8000a5e:	7bfb      	ldrb	r3, [r7, #15]
 8000a60:	3b20      	subs	r3, #32
 8000a62:	4413      	add	r3, r2
 8000a64:	781b      	ldrb	r3, [r3, #0]
 8000a66:	e000      	b.n	8000a6a <ssd1306_WriteChar+0x36>
 8000a68:	783b      	ldrb	r3, [r7, #0]
 8000a6a:	75fb      	strb	r3, [r7, #23]
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + char_width) ||
 8000a6c:	4b39      	ldr	r3, [pc, #228]	@ (8000b54 <ssd1306_WriteChar+0x120>)
 8000a6e:	881b      	ldrh	r3, [r3, #0]
 8000a70:	461a      	mov	r2, r3
 8000a72:	7dfb      	ldrb	r3, [r7, #23]
 8000a74:	4413      	add	r3, r2
 8000a76:	2b80      	cmp	r3, #128	@ 0x80
 8000a78:	dc06      	bgt.n	8000a88 <ssd1306_WriteChar+0x54>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.height))
 8000a7a:	4b36      	ldr	r3, [pc, #216]	@ (8000b54 <ssd1306_WriteChar+0x120>)
 8000a7c:	885b      	ldrh	r3, [r3, #2]
 8000a7e:	461a      	mov	r2, r3
 8000a80:	787b      	ldrb	r3, [r7, #1]
 8000a82:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + char_width) ||
 8000a84:	2b40      	cmp	r3, #64	@ 0x40
 8000a86:	dd01      	ble.n	8000a8c <ssd1306_WriteChar+0x58>
    {
        // Not enough space on current line
        return 0;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	e05e      	b.n	8000b4a <ssd1306_WriteChar+0x116>
    }
    
    // Use the font to write
    for(i = 0; i < Font.height; i++) {
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	61fb      	str	r3, [r7, #28]
 8000a90:	e04d      	b.n	8000b2e <ssd1306_WriteChar+0xfa>
        b = Font.data[(ch - 32) * Font.height + i];
 8000a92:	687a      	ldr	r2, [r7, #4]
 8000a94:	7bfb      	ldrb	r3, [r7, #15]
 8000a96:	3b20      	subs	r3, #32
 8000a98:	7879      	ldrb	r1, [r7, #1]
 8000a9a:	fb01 f303 	mul.w	r3, r1, r3
 8000a9e:	4619      	mov	r1, r3
 8000aa0:	69fb      	ldr	r3, [r7, #28]
 8000aa2:	440b      	add	r3, r1
 8000aa4:	005b      	lsls	r3, r3, #1
 8000aa6:	4413      	add	r3, r2
 8000aa8:	881b      	ldrh	r3, [r3, #0]
 8000aaa:	613b      	str	r3, [r7, #16]
        for(j = 0; j < char_width; j++) {
 8000aac:	2300      	movs	r3, #0
 8000aae:	61bb      	str	r3, [r7, #24]
 8000ab0:	e036      	b.n	8000b20 <ssd1306_WriteChar+0xec>
            if((b << j) & 0x8000)  {
 8000ab2:	693a      	ldr	r2, [r7, #16]
 8000ab4:	69bb      	ldr	r3, [r7, #24]
 8000ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8000aba:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d013      	beq.n	8000aea <ssd1306_WriteChar+0xb6>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8000ac2:	4b24      	ldr	r3, [pc, #144]	@ (8000b54 <ssd1306_WriteChar+0x120>)
 8000ac4:	881b      	ldrh	r3, [r3, #0]
 8000ac6:	b2da      	uxtb	r2, r3
 8000ac8:	69bb      	ldr	r3, [r7, #24]
 8000aca:	b2db      	uxtb	r3, r3
 8000acc:	4413      	add	r3, r2
 8000ace:	b2d8      	uxtb	r0, r3
 8000ad0:	4b20      	ldr	r3, [pc, #128]	@ (8000b54 <ssd1306_WriteChar+0x120>)
 8000ad2:	885b      	ldrh	r3, [r3, #2]
 8000ad4:	b2da      	uxtb	r2, r3
 8000ad6:	69fb      	ldr	r3, [r7, #28]
 8000ad8:	b2db      	uxtb	r3, r3
 8000ada:	4413      	add	r3, r2
 8000adc:	b2db      	uxtb	r3, r3
 8000ade:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8000ae2:	4619      	mov	r1, r3
 8000ae4:	f7ff ff54 	bl	8000990 <ssd1306_DrawPixel>
 8000ae8:	e017      	b.n	8000b1a <ssd1306_WriteChar+0xe6>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8000aea:	4b1a      	ldr	r3, [pc, #104]	@ (8000b54 <ssd1306_WriteChar+0x120>)
 8000aec:	881b      	ldrh	r3, [r3, #0]
 8000aee:	b2da      	uxtb	r2, r3
 8000af0:	69bb      	ldr	r3, [r7, #24]
 8000af2:	b2db      	uxtb	r3, r3
 8000af4:	4413      	add	r3, r2
 8000af6:	b2d8      	uxtb	r0, r3
 8000af8:	4b16      	ldr	r3, [pc, #88]	@ (8000b54 <ssd1306_WriteChar+0x120>)
 8000afa:	885b      	ldrh	r3, [r3, #2]
 8000afc:	b2da      	uxtb	r2, r3
 8000afe:	69fb      	ldr	r3, [r7, #28]
 8000b00:	b2db      	uxtb	r3, r3
 8000b02:	4413      	add	r3, r2
 8000b04:	b2d9      	uxtb	r1, r3
 8000b06:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	bf0c      	ite	eq
 8000b0e:	2301      	moveq	r3, #1
 8000b10:	2300      	movne	r3, #0
 8000b12:	b2db      	uxtb	r3, r3
 8000b14:	461a      	mov	r2, r3
 8000b16:	f7ff ff3b 	bl	8000990 <ssd1306_DrawPixel>
        for(j = 0; j < char_width; j++) {
 8000b1a:	69bb      	ldr	r3, [r7, #24]
 8000b1c:	3301      	adds	r3, #1
 8000b1e:	61bb      	str	r3, [r7, #24]
 8000b20:	7dfb      	ldrb	r3, [r7, #23]
 8000b22:	69ba      	ldr	r2, [r7, #24]
 8000b24:	429a      	cmp	r2, r3
 8000b26:	d3c4      	bcc.n	8000ab2 <ssd1306_WriteChar+0x7e>
    for(i = 0; i < Font.height; i++) {
 8000b28:	69fb      	ldr	r3, [r7, #28]
 8000b2a:	3301      	adds	r3, #1
 8000b2c:	61fb      	str	r3, [r7, #28]
 8000b2e:	787b      	ldrb	r3, [r7, #1]
 8000b30:	461a      	mov	r2, r3
 8000b32:	69fb      	ldr	r3, [r7, #28]
 8000b34:	4293      	cmp	r3, r2
 8000b36:	d3ac      	bcc.n	8000a92 <ssd1306_WriteChar+0x5e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += char_width;
 8000b38:	4b06      	ldr	r3, [pc, #24]	@ (8000b54 <ssd1306_WriteChar+0x120>)
 8000b3a:	881a      	ldrh	r2, [r3, #0]
 8000b3c:	7dfb      	ldrb	r3, [r7, #23]
 8000b3e:	b29b      	uxth	r3, r3
 8000b40:	4413      	add	r3, r2
 8000b42:	b29a      	uxth	r2, r3
 8000b44:	4b03      	ldr	r3, [pc, #12]	@ (8000b54 <ssd1306_WriteChar+0x120>)
 8000b46:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8000b48:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	3724      	adds	r7, #36	@ 0x24
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd90      	pop	{r4, r7, pc}
 8000b52:	bf00      	nop
 8000b54:	20000514 	.word	0x20000514

08000b58 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b086      	sub	sp, #24
 8000b5c:	af02      	add	r7, sp, #8
 8000b5e:	60f8      	str	r0, [r7, #12]
 8000b60:	4638      	mov	r0, r7
 8000b62:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    while (*str) {
 8000b66:	e013      	b.n	8000b90 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8000b68:	68fb      	ldr	r3, [r7, #12]
 8000b6a:	7818      	ldrb	r0, [r3, #0]
 8000b6c:	7e3b      	ldrb	r3, [r7, #24]
 8000b6e:	9300      	str	r3, [sp, #0]
 8000b70:	463b      	mov	r3, r7
 8000b72:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000b74:	f7ff ff5e 	bl	8000a34 <ssd1306_WriteChar>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	461a      	mov	r2, r3
 8000b7c:	68fb      	ldr	r3, [r7, #12]
 8000b7e:	781b      	ldrb	r3, [r3, #0]
 8000b80:	429a      	cmp	r2, r3
 8000b82:	d002      	beq.n	8000b8a <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8000b84:	68fb      	ldr	r3, [r7, #12]
 8000b86:	781b      	ldrb	r3, [r3, #0]
 8000b88:	e008      	b.n	8000b9c <ssd1306_WriteString+0x44>
        }
        str++;
 8000b8a:	68fb      	ldr	r3, [r7, #12]
 8000b8c:	3301      	adds	r3, #1
 8000b8e:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8000b90:	68fb      	ldr	r3, [r7, #12]
 8000b92:	781b      	ldrb	r3, [r3, #0]
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d1e7      	bne.n	8000b68 <ssd1306_WriteString+0x10>
    }
    
    // Everything ok
    return *str;
 8000b98:	68fb      	ldr	r3, [r7, #12]
 8000b9a:	781b      	ldrb	r3, [r3, #0]
}
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	3710      	adds	r7, #16
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	bd80      	pop	{r7, pc}

08000ba4 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8000ba4:	b480      	push	{r7}
 8000ba6:	b083      	sub	sp, #12
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	4603      	mov	r3, r0
 8000bac:	460a      	mov	r2, r1
 8000bae:	71fb      	strb	r3, [r7, #7]
 8000bb0:	4613      	mov	r3, r2
 8000bb2:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8000bb4:	79fb      	ldrb	r3, [r7, #7]
 8000bb6:	b29a      	uxth	r2, r3
 8000bb8:	4b05      	ldr	r3, [pc, #20]	@ (8000bd0 <ssd1306_SetCursor+0x2c>)
 8000bba:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8000bbc:	79bb      	ldrb	r3, [r7, #6]
 8000bbe:	b29a      	uxth	r2, r3
 8000bc0:	4b03      	ldr	r3, [pc, #12]	@ (8000bd0 <ssd1306_SetCursor+0x2c>)
 8000bc2:	805a      	strh	r2, [r3, #2]
}
 8000bc4:	bf00      	nop
 8000bc6:	370c      	adds	r7, #12
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bc80      	pop	{r7}
 8000bcc:	4770      	bx	lr
 8000bce:	bf00      	nop
 8000bd0:	20000514 	.word	0x20000514

08000bd4 <ssd1306_DrawBitmap>:
  }
  return SSD1306_OK;
}

/* Draw a bitmap */
void ssd1306_DrawBitmap(uint8_t x, uint8_t y, const unsigned char* bitmap, uint8_t w, uint8_t h, SSD1306_COLOR color) {
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b084      	sub	sp, #16
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	603a      	str	r2, [r7, #0]
 8000bdc:	461a      	mov	r2, r3
 8000bde:	4603      	mov	r3, r0
 8000be0:	71fb      	strb	r3, [r7, #7]
 8000be2:	460b      	mov	r3, r1
 8000be4:	71bb      	strb	r3, [r7, #6]
 8000be6:	4613      	mov	r3, r2
 8000be8:	717b      	strb	r3, [r7, #5]
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 8000bea:	797b      	ldrb	r3, [r7, #5]
 8000bec:	3307      	adds	r3, #7
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	da00      	bge.n	8000bf4 <ssd1306_DrawBitmap+0x20>
 8000bf2:	3307      	adds	r3, #7
 8000bf4:	10db      	asrs	r3, r3, #3
 8000bf6:	817b      	strh	r3, [r7, #10]
    uint8_t byte = 0;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	73fb      	strb	r3, [r7, #15]

    if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8000bfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	db3e      	blt.n	8000c82 <ssd1306_DrawBitmap+0xae>
 8000c04:	79bb      	ldrb	r3, [r7, #6]
 8000c06:	2b3f      	cmp	r3, #63	@ 0x3f
 8000c08:	d83b      	bhi.n	8000c82 <ssd1306_DrawBitmap+0xae>
        return;
    }

    for (uint8_t j = 0; j < h; j++, y++) {
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	73bb      	strb	r3, [r7, #14]
 8000c0e:	e033      	b.n	8000c78 <ssd1306_DrawBitmap+0xa4>
        for (uint8_t i = 0; i < w; i++) {
 8000c10:	2300      	movs	r3, #0
 8000c12:	737b      	strb	r3, [r7, #13]
 8000c14:	e026      	b.n	8000c64 <ssd1306_DrawBitmap+0x90>
            if (i & 7) {
 8000c16:	7b7b      	ldrb	r3, [r7, #13]
 8000c18:	f003 0307 	and.w	r3, r3, #7
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d003      	beq.n	8000c28 <ssd1306_DrawBitmap+0x54>
                byte <<= 1;
 8000c20:	7bfb      	ldrb	r3, [r7, #15]
 8000c22:	005b      	lsls	r3, r3, #1
 8000c24:	73fb      	strb	r3, [r7, #15]
 8000c26:	e00d      	b.n	8000c44 <ssd1306_DrawBitmap+0x70>
            } else {
                byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 8000c28:	7bbb      	ldrb	r3, [r7, #14]
 8000c2a:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8000c2e:	fb02 f303 	mul.w	r3, r2, r3
 8000c32:	7b7a      	ldrb	r2, [r7, #13]
 8000c34:	08d2      	lsrs	r2, r2, #3
 8000c36:	b2d2      	uxtb	r2, r2
 8000c38:	4413      	add	r3, r2
 8000c3a:	461a      	mov	r2, r3
 8000c3c:	683b      	ldr	r3, [r7, #0]
 8000c3e:	4413      	add	r3, r2
 8000c40:	781b      	ldrb	r3, [r3, #0]
 8000c42:	73fb      	strb	r3, [r7, #15]
            }

            if (byte & 0x80) {
 8000c44:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	da08      	bge.n	8000c5e <ssd1306_DrawBitmap+0x8a>
                ssd1306_DrawPixel(x + i, y, color);
 8000c4c:	79fa      	ldrb	r2, [r7, #7]
 8000c4e:	7b7b      	ldrb	r3, [r7, #13]
 8000c50:	4413      	add	r3, r2
 8000c52:	b2db      	uxtb	r3, r3
 8000c54:	7f3a      	ldrb	r2, [r7, #28]
 8000c56:	79b9      	ldrb	r1, [r7, #6]
 8000c58:	4618      	mov	r0, r3
 8000c5a:	f7ff fe99 	bl	8000990 <ssd1306_DrawPixel>
        for (uint8_t i = 0; i < w; i++) {
 8000c5e:	7b7b      	ldrb	r3, [r7, #13]
 8000c60:	3301      	adds	r3, #1
 8000c62:	737b      	strb	r3, [r7, #13]
 8000c64:	7b7a      	ldrb	r2, [r7, #13]
 8000c66:	797b      	ldrb	r3, [r7, #5]
 8000c68:	429a      	cmp	r2, r3
 8000c6a:	d3d4      	bcc.n	8000c16 <ssd1306_DrawBitmap+0x42>
    for (uint8_t j = 0; j < h; j++, y++) {
 8000c6c:	7bbb      	ldrb	r3, [r7, #14]
 8000c6e:	3301      	adds	r3, #1
 8000c70:	73bb      	strb	r3, [r7, #14]
 8000c72:	79bb      	ldrb	r3, [r7, #6]
 8000c74:	3301      	adds	r3, #1
 8000c76:	71bb      	strb	r3, [r7, #6]
 8000c78:	7bba      	ldrb	r2, [r7, #14]
 8000c7a:	7e3b      	ldrb	r3, [r7, #24]
 8000c7c:	429a      	cmp	r2, r3
 8000c7e:	d3c7      	bcc.n	8000c10 <ssd1306_DrawBitmap+0x3c>
            }
        }
    }
    return;
 8000c80:	e000      	b.n	8000c84 <ssd1306_DrawBitmap+0xb0>
        return;
 8000c82:	bf00      	nop
}
 8000c84:	3710      	adds	r7, #16
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}

08000c8a <ssd1306_SetContrast>:

void ssd1306_SetContrast(const uint8_t value) {
 8000c8a:	b580      	push	{r7, lr}
 8000c8c:	b084      	sub	sp, #16
 8000c8e:	af00      	add	r7, sp, #0
 8000c90:	4603      	mov	r3, r0
 8000c92:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8000c94:	2381      	movs	r3, #129	@ 0x81
 8000c96:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8000c98:	7bfb      	ldrb	r3, [r7, #15]
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	f7ff fd9c 	bl	80007d8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8000ca0:	79fb      	ldrb	r3, [r7, #7]
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	f7ff fd98 	bl	80007d8 <ssd1306_WriteCommand>
}
 8000ca8:	bf00      	nop
 8000caa:	3710      	adds	r7, #16
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bd80      	pop	{r7, pc}

08000cb0 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b084      	sub	sp, #16
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8000cba:	79fb      	ldrb	r3, [r7, #7]
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d005      	beq.n	8000ccc <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8000cc0:	23af      	movs	r3, #175	@ 0xaf
 8000cc2:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8000cc4:	4b08      	ldr	r3, [pc, #32]	@ (8000ce8 <ssd1306_SetDisplayOn+0x38>)
 8000cc6:	2201      	movs	r2, #1
 8000cc8:	715a      	strb	r2, [r3, #5]
 8000cca:	e004      	b.n	8000cd6 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8000ccc:	23ae      	movs	r3, #174	@ 0xae
 8000cce:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8000cd0:	4b05      	ldr	r3, [pc, #20]	@ (8000ce8 <ssd1306_SetDisplayOn+0x38>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8000cd6:	7bfb      	ldrb	r3, [r7, #15]
 8000cd8:	4618      	mov	r0, r3
 8000cda:	f7ff fd7d 	bl	80007d8 <ssd1306_WriteCommand>
}
 8000cde:	bf00      	nop
 8000ce0:	3710      	adds	r7, #16
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	20000514 	.word	0x20000514

08000cec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cec:	b480      	push	{r7}
 8000cee:	b085      	sub	sp, #20
 8000cf0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000cf2:	4b15      	ldr	r3, [pc, #84]	@ (8000d48 <HAL_MspInit+0x5c>)
 8000cf4:	699b      	ldr	r3, [r3, #24]
 8000cf6:	4a14      	ldr	r2, [pc, #80]	@ (8000d48 <HAL_MspInit+0x5c>)
 8000cf8:	f043 0301 	orr.w	r3, r3, #1
 8000cfc:	6193      	str	r3, [r2, #24]
 8000cfe:	4b12      	ldr	r3, [pc, #72]	@ (8000d48 <HAL_MspInit+0x5c>)
 8000d00:	699b      	ldr	r3, [r3, #24]
 8000d02:	f003 0301 	and.w	r3, r3, #1
 8000d06:	60bb      	str	r3, [r7, #8]
 8000d08:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d0a:	4b0f      	ldr	r3, [pc, #60]	@ (8000d48 <HAL_MspInit+0x5c>)
 8000d0c:	69db      	ldr	r3, [r3, #28]
 8000d0e:	4a0e      	ldr	r2, [pc, #56]	@ (8000d48 <HAL_MspInit+0x5c>)
 8000d10:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d14:	61d3      	str	r3, [r2, #28]
 8000d16:	4b0c      	ldr	r3, [pc, #48]	@ (8000d48 <HAL_MspInit+0x5c>)
 8000d18:	69db      	ldr	r3, [r3, #28]
 8000d1a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d1e:	607b      	str	r3, [r7, #4]
 8000d20:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000d22:	4b0a      	ldr	r3, [pc, #40]	@ (8000d4c <HAL_MspInit+0x60>)
 8000d24:	685b      	ldr	r3, [r3, #4]
 8000d26:	60fb      	str	r3, [r7, #12]
 8000d28:	68fb      	ldr	r3, [r7, #12]
 8000d2a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000d2e:	60fb      	str	r3, [r7, #12]
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000d36:	60fb      	str	r3, [r7, #12]
 8000d38:	4a04      	ldr	r2, [pc, #16]	@ (8000d4c <HAL_MspInit+0x60>)
 8000d3a:	68fb      	ldr	r3, [r7, #12]
 8000d3c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d3e:	bf00      	nop
 8000d40:	3714      	adds	r7, #20
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bc80      	pop	{r7}
 8000d46:	4770      	bx	lr
 8000d48:	40021000 	.word	0x40021000
 8000d4c:	40010000 	.word	0x40010000

08000d50 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b088      	sub	sp, #32
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d58:	f107 0310 	add.w	r3, r7, #16
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	601a      	str	r2, [r3, #0]
 8000d60:	605a      	str	r2, [r3, #4]
 8000d62:	609a      	str	r2, [r3, #8]
 8000d64:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	4a15      	ldr	r2, [pc, #84]	@ (8000dc0 <HAL_I2C_MspInit+0x70>)
 8000d6c:	4293      	cmp	r3, r2
 8000d6e:	d123      	bne.n	8000db8 <HAL_I2C_MspInit+0x68>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d70:	4b14      	ldr	r3, [pc, #80]	@ (8000dc4 <HAL_I2C_MspInit+0x74>)
 8000d72:	699b      	ldr	r3, [r3, #24]
 8000d74:	4a13      	ldr	r2, [pc, #76]	@ (8000dc4 <HAL_I2C_MspInit+0x74>)
 8000d76:	f043 0308 	orr.w	r3, r3, #8
 8000d7a:	6193      	str	r3, [r2, #24]
 8000d7c:	4b11      	ldr	r3, [pc, #68]	@ (8000dc4 <HAL_I2C_MspInit+0x74>)
 8000d7e:	699b      	ldr	r3, [r3, #24]
 8000d80:	f003 0308 	and.w	r3, r3, #8
 8000d84:	60fb      	str	r3, [r7, #12]
 8000d86:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000d88:	23c0      	movs	r3, #192	@ 0xc0
 8000d8a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d8c:	2312      	movs	r3, #18
 8000d8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d90:	2303      	movs	r3, #3
 8000d92:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d94:	f107 0310 	add.w	r3, r7, #16
 8000d98:	4619      	mov	r1, r3
 8000d9a:	480b      	ldr	r0, [pc, #44]	@ (8000dc8 <HAL_I2C_MspInit+0x78>)
 8000d9c:	f000 fa2c 	bl	80011f8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000da0:	4b08      	ldr	r3, [pc, #32]	@ (8000dc4 <HAL_I2C_MspInit+0x74>)
 8000da2:	69db      	ldr	r3, [r3, #28]
 8000da4:	4a07      	ldr	r2, [pc, #28]	@ (8000dc4 <HAL_I2C_MspInit+0x74>)
 8000da6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000daa:	61d3      	str	r3, [r2, #28]
 8000dac:	4b05      	ldr	r3, [pc, #20]	@ (8000dc4 <HAL_I2C_MspInit+0x74>)
 8000dae:	69db      	ldr	r3, [r3, #28]
 8000db0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000db4:	60bb      	str	r3, [r7, #8]
 8000db6:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000db8:	bf00      	nop
 8000dba:	3720      	adds	r7, #32
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bd80      	pop	{r7, pc}
 8000dc0:	40005400 	.word	0x40005400
 8000dc4:	40021000 	.word	0x40021000
 8000dc8:	40010c00 	.word	0x40010c00

08000dcc <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	b085      	sub	sp, #20
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	4a09      	ldr	r2, [pc, #36]	@ (8000e00 <HAL_TIM_Base_MspInit+0x34>)
 8000dda:	4293      	cmp	r3, r2
 8000ddc:	d10b      	bne.n	8000df6 <HAL_TIM_Base_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000dde:	4b09      	ldr	r3, [pc, #36]	@ (8000e04 <HAL_TIM_Base_MspInit+0x38>)
 8000de0:	699b      	ldr	r3, [r3, #24]
 8000de2:	4a08      	ldr	r2, [pc, #32]	@ (8000e04 <HAL_TIM_Base_MspInit+0x38>)
 8000de4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000de8:	6193      	str	r3, [r2, #24]
 8000dea:	4b06      	ldr	r3, [pc, #24]	@ (8000e04 <HAL_TIM_Base_MspInit+0x38>)
 8000dec:	699b      	ldr	r3, [r3, #24]
 8000dee:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000df2:	60fb      	str	r3, [r7, #12]
 8000df4:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 8000df6:	bf00      	nop
 8000df8:	3714      	adds	r7, #20
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bc80      	pop	{r7}
 8000dfe:	4770      	bx	lr
 8000e00:	40012c00 	.word	0x40012c00
 8000e04:	40021000 	.word	0x40021000

08000e08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e0c:	bf00      	nop
 8000e0e:	e7fd      	b.n	8000e0c <NMI_Handler+0x4>

08000e10 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e10:	b480      	push	{r7}
 8000e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e14:	bf00      	nop
 8000e16:	e7fd      	b.n	8000e14 <HardFault_Handler+0x4>

08000e18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e1c:	bf00      	nop
 8000e1e:	e7fd      	b.n	8000e1c <MemManage_Handler+0x4>

08000e20 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e20:	b480      	push	{r7}
 8000e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e24:	bf00      	nop
 8000e26:	e7fd      	b.n	8000e24 <BusFault_Handler+0x4>

08000e28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e2c:	bf00      	nop
 8000e2e:	e7fd      	b.n	8000e2c <UsageFault_Handler+0x4>

08000e30 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e30:	b480      	push	{r7}
 8000e32:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e34:	bf00      	nop
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bc80      	pop	{r7}
 8000e3a:	4770      	bx	lr

08000e3c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e40:	bf00      	nop
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bc80      	pop	{r7}
 8000e46:	4770      	bx	lr

08000e48 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e4c:	bf00      	nop
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bc80      	pop	{r7}
 8000e52:	4770      	bx	lr

08000e54 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e58:	f000 f8aa 	bl	8000fb0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e5c:	bf00      	nop
 8000e5e:	bd80      	pop	{r7, pc}

08000e60 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b086      	sub	sp, #24
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e68:	4a14      	ldr	r2, [pc, #80]	@ (8000ebc <_sbrk+0x5c>)
 8000e6a:	4b15      	ldr	r3, [pc, #84]	@ (8000ec0 <_sbrk+0x60>)
 8000e6c:	1ad3      	subs	r3, r2, r3
 8000e6e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e70:	697b      	ldr	r3, [r7, #20]
 8000e72:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e74:	4b13      	ldr	r3, [pc, #76]	@ (8000ec4 <_sbrk+0x64>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d102      	bne.n	8000e82 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e7c:	4b11      	ldr	r3, [pc, #68]	@ (8000ec4 <_sbrk+0x64>)
 8000e7e:	4a12      	ldr	r2, [pc, #72]	@ (8000ec8 <_sbrk+0x68>)
 8000e80:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e82:	4b10      	ldr	r3, [pc, #64]	@ (8000ec4 <_sbrk+0x64>)
 8000e84:	681a      	ldr	r2, [r3, #0]
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	4413      	add	r3, r2
 8000e8a:	693a      	ldr	r2, [r7, #16]
 8000e8c:	429a      	cmp	r2, r3
 8000e8e:	d207      	bcs.n	8000ea0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e90:	f001 fefc 	bl	8002c8c <__errno>
 8000e94:	4603      	mov	r3, r0
 8000e96:	220c      	movs	r2, #12
 8000e98:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e9a:	f04f 33ff 	mov.w	r3, #4294967295
 8000e9e:	e009      	b.n	8000eb4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ea0:	4b08      	ldr	r3, [pc, #32]	@ (8000ec4 <_sbrk+0x64>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ea6:	4b07      	ldr	r3, [pc, #28]	@ (8000ec4 <_sbrk+0x64>)
 8000ea8:	681a      	ldr	r2, [r3, #0]
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	4413      	add	r3, r2
 8000eae:	4a05      	ldr	r2, [pc, #20]	@ (8000ec4 <_sbrk+0x64>)
 8000eb0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000eb2:	68fb      	ldr	r3, [r7, #12]
}
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	3718      	adds	r7, #24
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bd80      	pop	{r7, pc}
 8000ebc:	20005000 	.word	0x20005000
 8000ec0:	00000400 	.word	0x00000400
 8000ec4:	2000051c 	.word	0x2000051c
 8000ec8:	20000670 	.word	0x20000670

08000ecc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ed0:	bf00      	nop
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bc80      	pop	{r7}
 8000ed6:	4770      	bx	lr

08000ed8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000ed8:	f7ff fff8 	bl	8000ecc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000edc:	480b      	ldr	r0, [pc, #44]	@ (8000f0c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000ede:	490c      	ldr	r1, [pc, #48]	@ (8000f10 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000ee0:	4a0c      	ldr	r2, [pc, #48]	@ (8000f14 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000ee2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ee4:	e002      	b.n	8000eec <LoopCopyDataInit>

08000ee6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ee6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ee8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000eea:	3304      	adds	r3, #4

08000eec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000eec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000eee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ef0:	d3f9      	bcc.n	8000ee6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ef2:	4a09      	ldr	r2, [pc, #36]	@ (8000f18 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000ef4:	4c09      	ldr	r4, [pc, #36]	@ (8000f1c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000ef6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ef8:	e001      	b.n	8000efe <LoopFillZerobss>

08000efa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000efa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000efc:	3204      	adds	r2, #4

08000efe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000efe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f00:	d3fb      	bcc.n	8000efa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f02:	f001 fec9 	bl	8002c98 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000f06:	f7ff fa25 	bl	8000354 <main>
  bx lr
 8000f0a:	4770      	bx	lr
  ldr r0, =_sdata
 8000f0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f10:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000f14:	08004bb0 	.word	0x08004bb0
  ldr r2, =_sbss
 8000f18:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000f1c:	2000066c 	.word	0x2000066c

08000f20 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000f20:	e7fe      	b.n	8000f20 <ADC1_2_IRQHandler>
	...

08000f24 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f28:	4b08      	ldr	r3, [pc, #32]	@ (8000f4c <HAL_Init+0x28>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	4a07      	ldr	r2, [pc, #28]	@ (8000f4c <HAL_Init+0x28>)
 8000f2e:	f043 0310 	orr.w	r3, r3, #16
 8000f32:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f34:	2003      	movs	r0, #3
 8000f36:	f000 f92b 	bl	8001190 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f3a:	200f      	movs	r0, #15
 8000f3c:	f000 f808 	bl	8000f50 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f40:	f7ff fed4 	bl	8000cec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f44:	2300      	movs	r3, #0
}
 8000f46:	4618      	mov	r0, r3
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	40022000 	.word	0x40022000

08000f50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b082      	sub	sp, #8
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f58:	4b12      	ldr	r3, [pc, #72]	@ (8000fa4 <HAL_InitTick+0x54>)
 8000f5a:	681a      	ldr	r2, [r3, #0]
 8000f5c:	4b12      	ldr	r3, [pc, #72]	@ (8000fa8 <HAL_InitTick+0x58>)
 8000f5e:	781b      	ldrb	r3, [r3, #0]
 8000f60:	4619      	mov	r1, r3
 8000f62:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f66:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f6e:	4618      	mov	r0, r3
 8000f70:	f000 f935 	bl	80011de <HAL_SYSTICK_Config>
 8000f74:	4603      	mov	r3, r0
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d001      	beq.n	8000f7e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f7a:	2301      	movs	r3, #1
 8000f7c:	e00e      	b.n	8000f9c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	2b0f      	cmp	r3, #15
 8000f82:	d80a      	bhi.n	8000f9a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f84:	2200      	movs	r2, #0
 8000f86:	6879      	ldr	r1, [r7, #4]
 8000f88:	f04f 30ff 	mov.w	r0, #4294967295
 8000f8c:	f000 f90b 	bl	80011a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f90:	4a06      	ldr	r2, [pc, #24]	@ (8000fac <HAL_InitTick+0x5c>)
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f96:	2300      	movs	r3, #0
 8000f98:	e000      	b.n	8000f9c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f9a:	2301      	movs	r3, #1
}
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	3708      	adds	r7, #8
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bd80      	pop	{r7, pc}
 8000fa4:	20000000 	.word	0x20000000
 8000fa8:	20000008 	.word	0x20000008
 8000fac:	20000004 	.word	0x20000004

08000fb0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fb4:	4b05      	ldr	r3, [pc, #20]	@ (8000fcc <HAL_IncTick+0x1c>)
 8000fb6:	781b      	ldrb	r3, [r3, #0]
 8000fb8:	461a      	mov	r2, r3
 8000fba:	4b05      	ldr	r3, [pc, #20]	@ (8000fd0 <HAL_IncTick+0x20>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	4413      	add	r3, r2
 8000fc0:	4a03      	ldr	r2, [pc, #12]	@ (8000fd0 <HAL_IncTick+0x20>)
 8000fc2:	6013      	str	r3, [r2, #0]
}
 8000fc4:	bf00      	nop
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bc80      	pop	{r7}
 8000fca:	4770      	bx	lr
 8000fcc:	20000008 	.word	0x20000008
 8000fd0:	20000520 	.word	0x20000520

08000fd4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	af00      	add	r7, sp, #0
  return uwTick;
 8000fd8:	4b02      	ldr	r3, [pc, #8]	@ (8000fe4 <HAL_GetTick+0x10>)
 8000fda:	681b      	ldr	r3, [r3, #0]
}
 8000fdc:	4618      	mov	r0, r3
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bc80      	pop	{r7}
 8000fe2:	4770      	bx	lr
 8000fe4:	20000520 	.word	0x20000520

08000fe8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b084      	sub	sp, #16
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ff0:	f7ff fff0 	bl	8000fd4 <HAL_GetTick>
 8000ff4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001000:	d005      	beq.n	800100e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001002:	4b0a      	ldr	r3, [pc, #40]	@ (800102c <HAL_Delay+0x44>)
 8001004:	781b      	ldrb	r3, [r3, #0]
 8001006:	461a      	mov	r2, r3
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	4413      	add	r3, r2
 800100c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800100e:	bf00      	nop
 8001010:	f7ff ffe0 	bl	8000fd4 <HAL_GetTick>
 8001014:	4602      	mov	r2, r0
 8001016:	68bb      	ldr	r3, [r7, #8]
 8001018:	1ad3      	subs	r3, r2, r3
 800101a:	68fa      	ldr	r2, [r7, #12]
 800101c:	429a      	cmp	r2, r3
 800101e:	d8f7      	bhi.n	8001010 <HAL_Delay+0x28>
  {
  }
}
 8001020:	bf00      	nop
 8001022:	bf00      	nop
 8001024:	3710      	adds	r7, #16
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}
 800102a:	bf00      	nop
 800102c:	20000008 	.word	0x20000008

08001030 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001030:	b480      	push	{r7}
 8001032:	b085      	sub	sp, #20
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	f003 0307 	and.w	r3, r3, #7
 800103e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001040:	4b0c      	ldr	r3, [pc, #48]	@ (8001074 <__NVIC_SetPriorityGrouping+0x44>)
 8001042:	68db      	ldr	r3, [r3, #12]
 8001044:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001046:	68ba      	ldr	r2, [r7, #8]
 8001048:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800104c:	4013      	ands	r3, r2
 800104e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001054:	68bb      	ldr	r3, [r7, #8]
 8001056:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001058:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800105c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001060:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001062:	4a04      	ldr	r2, [pc, #16]	@ (8001074 <__NVIC_SetPriorityGrouping+0x44>)
 8001064:	68bb      	ldr	r3, [r7, #8]
 8001066:	60d3      	str	r3, [r2, #12]
}
 8001068:	bf00      	nop
 800106a:	3714      	adds	r7, #20
 800106c:	46bd      	mov	sp, r7
 800106e:	bc80      	pop	{r7}
 8001070:	4770      	bx	lr
 8001072:	bf00      	nop
 8001074:	e000ed00 	.word	0xe000ed00

08001078 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001078:	b480      	push	{r7}
 800107a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800107c:	4b04      	ldr	r3, [pc, #16]	@ (8001090 <__NVIC_GetPriorityGrouping+0x18>)
 800107e:	68db      	ldr	r3, [r3, #12]
 8001080:	0a1b      	lsrs	r3, r3, #8
 8001082:	f003 0307 	and.w	r3, r3, #7
}
 8001086:	4618      	mov	r0, r3
 8001088:	46bd      	mov	sp, r7
 800108a:	bc80      	pop	{r7}
 800108c:	4770      	bx	lr
 800108e:	bf00      	nop
 8001090:	e000ed00 	.word	0xe000ed00

08001094 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001094:	b480      	push	{r7}
 8001096:	b083      	sub	sp, #12
 8001098:	af00      	add	r7, sp, #0
 800109a:	4603      	mov	r3, r0
 800109c:	6039      	str	r1, [r7, #0]
 800109e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	db0a      	blt.n	80010be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	b2da      	uxtb	r2, r3
 80010ac:	490c      	ldr	r1, [pc, #48]	@ (80010e0 <__NVIC_SetPriority+0x4c>)
 80010ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010b2:	0112      	lsls	r2, r2, #4
 80010b4:	b2d2      	uxtb	r2, r2
 80010b6:	440b      	add	r3, r1
 80010b8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010bc:	e00a      	b.n	80010d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	b2da      	uxtb	r2, r3
 80010c2:	4908      	ldr	r1, [pc, #32]	@ (80010e4 <__NVIC_SetPriority+0x50>)
 80010c4:	79fb      	ldrb	r3, [r7, #7]
 80010c6:	f003 030f 	and.w	r3, r3, #15
 80010ca:	3b04      	subs	r3, #4
 80010cc:	0112      	lsls	r2, r2, #4
 80010ce:	b2d2      	uxtb	r2, r2
 80010d0:	440b      	add	r3, r1
 80010d2:	761a      	strb	r2, [r3, #24]
}
 80010d4:	bf00      	nop
 80010d6:	370c      	adds	r7, #12
 80010d8:	46bd      	mov	sp, r7
 80010da:	bc80      	pop	{r7}
 80010dc:	4770      	bx	lr
 80010de:	bf00      	nop
 80010e0:	e000e100 	.word	0xe000e100
 80010e4:	e000ed00 	.word	0xe000ed00

080010e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010e8:	b480      	push	{r7}
 80010ea:	b089      	sub	sp, #36	@ 0x24
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	60f8      	str	r0, [r7, #12]
 80010f0:	60b9      	str	r1, [r7, #8]
 80010f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	f003 0307 	and.w	r3, r3, #7
 80010fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010fc:	69fb      	ldr	r3, [r7, #28]
 80010fe:	f1c3 0307 	rsb	r3, r3, #7
 8001102:	2b04      	cmp	r3, #4
 8001104:	bf28      	it	cs
 8001106:	2304      	movcs	r3, #4
 8001108:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800110a:	69fb      	ldr	r3, [r7, #28]
 800110c:	3304      	adds	r3, #4
 800110e:	2b06      	cmp	r3, #6
 8001110:	d902      	bls.n	8001118 <NVIC_EncodePriority+0x30>
 8001112:	69fb      	ldr	r3, [r7, #28]
 8001114:	3b03      	subs	r3, #3
 8001116:	e000      	b.n	800111a <NVIC_EncodePriority+0x32>
 8001118:	2300      	movs	r3, #0
 800111a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800111c:	f04f 32ff 	mov.w	r2, #4294967295
 8001120:	69bb      	ldr	r3, [r7, #24]
 8001122:	fa02 f303 	lsl.w	r3, r2, r3
 8001126:	43da      	mvns	r2, r3
 8001128:	68bb      	ldr	r3, [r7, #8]
 800112a:	401a      	ands	r2, r3
 800112c:	697b      	ldr	r3, [r7, #20]
 800112e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001130:	f04f 31ff 	mov.w	r1, #4294967295
 8001134:	697b      	ldr	r3, [r7, #20]
 8001136:	fa01 f303 	lsl.w	r3, r1, r3
 800113a:	43d9      	mvns	r1, r3
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001140:	4313      	orrs	r3, r2
         );
}
 8001142:	4618      	mov	r0, r3
 8001144:	3724      	adds	r7, #36	@ 0x24
 8001146:	46bd      	mov	sp, r7
 8001148:	bc80      	pop	{r7}
 800114a:	4770      	bx	lr

0800114c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b082      	sub	sp, #8
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	3b01      	subs	r3, #1
 8001158:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800115c:	d301      	bcc.n	8001162 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800115e:	2301      	movs	r3, #1
 8001160:	e00f      	b.n	8001182 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001162:	4a0a      	ldr	r2, [pc, #40]	@ (800118c <SysTick_Config+0x40>)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	3b01      	subs	r3, #1
 8001168:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800116a:	210f      	movs	r1, #15
 800116c:	f04f 30ff 	mov.w	r0, #4294967295
 8001170:	f7ff ff90 	bl	8001094 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001174:	4b05      	ldr	r3, [pc, #20]	@ (800118c <SysTick_Config+0x40>)
 8001176:	2200      	movs	r2, #0
 8001178:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800117a:	4b04      	ldr	r3, [pc, #16]	@ (800118c <SysTick_Config+0x40>)
 800117c:	2207      	movs	r2, #7
 800117e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001180:	2300      	movs	r3, #0
}
 8001182:	4618      	mov	r0, r3
 8001184:	3708      	adds	r7, #8
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	e000e010 	.word	0xe000e010

08001190 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b082      	sub	sp, #8
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001198:	6878      	ldr	r0, [r7, #4]
 800119a:	f7ff ff49 	bl	8001030 <__NVIC_SetPriorityGrouping>
}
 800119e:	bf00      	nop
 80011a0:	3708      	adds	r7, #8
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}

080011a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011a6:	b580      	push	{r7, lr}
 80011a8:	b086      	sub	sp, #24
 80011aa:	af00      	add	r7, sp, #0
 80011ac:	4603      	mov	r3, r0
 80011ae:	60b9      	str	r1, [r7, #8]
 80011b0:	607a      	str	r2, [r7, #4]
 80011b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80011b4:	2300      	movs	r3, #0
 80011b6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011b8:	f7ff ff5e 	bl	8001078 <__NVIC_GetPriorityGrouping>
 80011bc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011be:	687a      	ldr	r2, [r7, #4]
 80011c0:	68b9      	ldr	r1, [r7, #8]
 80011c2:	6978      	ldr	r0, [r7, #20]
 80011c4:	f7ff ff90 	bl	80010e8 <NVIC_EncodePriority>
 80011c8:	4602      	mov	r2, r0
 80011ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011ce:	4611      	mov	r1, r2
 80011d0:	4618      	mov	r0, r3
 80011d2:	f7ff ff5f 	bl	8001094 <__NVIC_SetPriority>
}
 80011d6:	bf00      	nop
 80011d8:	3718      	adds	r7, #24
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}

080011de <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011de:	b580      	push	{r7, lr}
 80011e0:	b082      	sub	sp, #8
 80011e2:	af00      	add	r7, sp, #0
 80011e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011e6:	6878      	ldr	r0, [r7, #4]
 80011e8:	f7ff ffb0 	bl	800114c <SysTick_Config>
 80011ec:	4603      	mov	r3, r0
}
 80011ee:	4618      	mov	r0, r3
 80011f0:	3708      	adds	r7, #8
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}
	...

080011f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011f8:	b480      	push	{r7}
 80011fa:	b08b      	sub	sp, #44	@ 0x2c
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
 8001200:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001202:	2300      	movs	r3, #0
 8001204:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001206:	2300      	movs	r3, #0
 8001208:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800120a:	e169      	b.n	80014e0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800120c:	2201      	movs	r2, #1
 800120e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001210:	fa02 f303 	lsl.w	r3, r2, r3
 8001214:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	69fa      	ldr	r2, [r7, #28]
 800121c:	4013      	ands	r3, r2
 800121e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001220:	69ba      	ldr	r2, [r7, #24]
 8001222:	69fb      	ldr	r3, [r7, #28]
 8001224:	429a      	cmp	r2, r3
 8001226:	f040 8158 	bne.w	80014da <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	685b      	ldr	r3, [r3, #4]
 800122e:	4a9a      	ldr	r2, [pc, #616]	@ (8001498 <HAL_GPIO_Init+0x2a0>)
 8001230:	4293      	cmp	r3, r2
 8001232:	d05e      	beq.n	80012f2 <HAL_GPIO_Init+0xfa>
 8001234:	4a98      	ldr	r2, [pc, #608]	@ (8001498 <HAL_GPIO_Init+0x2a0>)
 8001236:	4293      	cmp	r3, r2
 8001238:	d875      	bhi.n	8001326 <HAL_GPIO_Init+0x12e>
 800123a:	4a98      	ldr	r2, [pc, #608]	@ (800149c <HAL_GPIO_Init+0x2a4>)
 800123c:	4293      	cmp	r3, r2
 800123e:	d058      	beq.n	80012f2 <HAL_GPIO_Init+0xfa>
 8001240:	4a96      	ldr	r2, [pc, #600]	@ (800149c <HAL_GPIO_Init+0x2a4>)
 8001242:	4293      	cmp	r3, r2
 8001244:	d86f      	bhi.n	8001326 <HAL_GPIO_Init+0x12e>
 8001246:	4a96      	ldr	r2, [pc, #600]	@ (80014a0 <HAL_GPIO_Init+0x2a8>)
 8001248:	4293      	cmp	r3, r2
 800124a:	d052      	beq.n	80012f2 <HAL_GPIO_Init+0xfa>
 800124c:	4a94      	ldr	r2, [pc, #592]	@ (80014a0 <HAL_GPIO_Init+0x2a8>)
 800124e:	4293      	cmp	r3, r2
 8001250:	d869      	bhi.n	8001326 <HAL_GPIO_Init+0x12e>
 8001252:	4a94      	ldr	r2, [pc, #592]	@ (80014a4 <HAL_GPIO_Init+0x2ac>)
 8001254:	4293      	cmp	r3, r2
 8001256:	d04c      	beq.n	80012f2 <HAL_GPIO_Init+0xfa>
 8001258:	4a92      	ldr	r2, [pc, #584]	@ (80014a4 <HAL_GPIO_Init+0x2ac>)
 800125a:	4293      	cmp	r3, r2
 800125c:	d863      	bhi.n	8001326 <HAL_GPIO_Init+0x12e>
 800125e:	4a92      	ldr	r2, [pc, #584]	@ (80014a8 <HAL_GPIO_Init+0x2b0>)
 8001260:	4293      	cmp	r3, r2
 8001262:	d046      	beq.n	80012f2 <HAL_GPIO_Init+0xfa>
 8001264:	4a90      	ldr	r2, [pc, #576]	@ (80014a8 <HAL_GPIO_Init+0x2b0>)
 8001266:	4293      	cmp	r3, r2
 8001268:	d85d      	bhi.n	8001326 <HAL_GPIO_Init+0x12e>
 800126a:	2b12      	cmp	r3, #18
 800126c:	d82a      	bhi.n	80012c4 <HAL_GPIO_Init+0xcc>
 800126e:	2b12      	cmp	r3, #18
 8001270:	d859      	bhi.n	8001326 <HAL_GPIO_Init+0x12e>
 8001272:	a201      	add	r2, pc, #4	@ (adr r2, 8001278 <HAL_GPIO_Init+0x80>)
 8001274:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001278:	080012f3 	.word	0x080012f3
 800127c:	080012cd 	.word	0x080012cd
 8001280:	080012df 	.word	0x080012df
 8001284:	08001321 	.word	0x08001321
 8001288:	08001327 	.word	0x08001327
 800128c:	08001327 	.word	0x08001327
 8001290:	08001327 	.word	0x08001327
 8001294:	08001327 	.word	0x08001327
 8001298:	08001327 	.word	0x08001327
 800129c:	08001327 	.word	0x08001327
 80012a0:	08001327 	.word	0x08001327
 80012a4:	08001327 	.word	0x08001327
 80012a8:	08001327 	.word	0x08001327
 80012ac:	08001327 	.word	0x08001327
 80012b0:	08001327 	.word	0x08001327
 80012b4:	08001327 	.word	0x08001327
 80012b8:	08001327 	.word	0x08001327
 80012bc:	080012d5 	.word	0x080012d5
 80012c0:	080012e9 	.word	0x080012e9
 80012c4:	4a79      	ldr	r2, [pc, #484]	@ (80014ac <HAL_GPIO_Init+0x2b4>)
 80012c6:	4293      	cmp	r3, r2
 80012c8:	d013      	beq.n	80012f2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80012ca:	e02c      	b.n	8001326 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	68db      	ldr	r3, [r3, #12]
 80012d0:	623b      	str	r3, [r7, #32]
          break;
 80012d2:	e029      	b.n	8001328 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	68db      	ldr	r3, [r3, #12]
 80012d8:	3304      	adds	r3, #4
 80012da:	623b      	str	r3, [r7, #32]
          break;
 80012dc:	e024      	b.n	8001328 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	68db      	ldr	r3, [r3, #12]
 80012e2:	3308      	adds	r3, #8
 80012e4:	623b      	str	r3, [r7, #32]
          break;
 80012e6:	e01f      	b.n	8001328 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	68db      	ldr	r3, [r3, #12]
 80012ec:	330c      	adds	r3, #12
 80012ee:	623b      	str	r3, [r7, #32]
          break;
 80012f0:	e01a      	b.n	8001328 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	689b      	ldr	r3, [r3, #8]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d102      	bne.n	8001300 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80012fa:	2304      	movs	r3, #4
 80012fc:	623b      	str	r3, [r7, #32]
          break;
 80012fe:	e013      	b.n	8001328 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	689b      	ldr	r3, [r3, #8]
 8001304:	2b01      	cmp	r3, #1
 8001306:	d105      	bne.n	8001314 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001308:	2308      	movs	r3, #8
 800130a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	69fa      	ldr	r2, [r7, #28]
 8001310:	611a      	str	r2, [r3, #16]
          break;
 8001312:	e009      	b.n	8001328 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001314:	2308      	movs	r3, #8
 8001316:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	69fa      	ldr	r2, [r7, #28]
 800131c:	615a      	str	r2, [r3, #20]
          break;
 800131e:	e003      	b.n	8001328 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001320:	2300      	movs	r3, #0
 8001322:	623b      	str	r3, [r7, #32]
          break;
 8001324:	e000      	b.n	8001328 <HAL_GPIO_Init+0x130>
          break;
 8001326:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001328:	69bb      	ldr	r3, [r7, #24]
 800132a:	2bff      	cmp	r3, #255	@ 0xff
 800132c:	d801      	bhi.n	8001332 <HAL_GPIO_Init+0x13a>
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	e001      	b.n	8001336 <HAL_GPIO_Init+0x13e>
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	3304      	adds	r3, #4
 8001336:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001338:	69bb      	ldr	r3, [r7, #24]
 800133a:	2bff      	cmp	r3, #255	@ 0xff
 800133c:	d802      	bhi.n	8001344 <HAL_GPIO_Init+0x14c>
 800133e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001340:	009b      	lsls	r3, r3, #2
 8001342:	e002      	b.n	800134a <HAL_GPIO_Init+0x152>
 8001344:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001346:	3b08      	subs	r3, #8
 8001348:	009b      	lsls	r3, r3, #2
 800134a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800134c:	697b      	ldr	r3, [r7, #20]
 800134e:	681a      	ldr	r2, [r3, #0]
 8001350:	210f      	movs	r1, #15
 8001352:	693b      	ldr	r3, [r7, #16]
 8001354:	fa01 f303 	lsl.w	r3, r1, r3
 8001358:	43db      	mvns	r3, r3
 800135a:	401a      	ands	r2, r3
 800135c:	6a39      	ldr	r1, [r7, #32]
 800135e:	693b      	ldr	r3, [r7, #16]
 8001360:	fa01 f303 	lsl.w	r3, r1, r3
 8001364:	431a      	orrs	r2, r3
 8001366:	697b      	ldr	r3, [r7, #20]
 8001368:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	685b      	ldr	r3, [r3, #4]
 800136e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001372:	2b00      	cmp	r3, #0
 8001374:	f000 80b1 	beq.w	80014da <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001378:	4b4d      	ldr	r3, [pc, #308]	@ (80014b0 <HAL_GPIO_Init+0x2b8>)
 800137a:	699b      	ldr	r3, [r3, #24]
 800137c:	4a4c      	ldr	r2, [pc, #304]	@ (80014b0 <HAL_GPIO_Init+0x2b8>)
 800137e:	f043 0301 	orr.w	r3, r3, #1
 8001382:	6193      	str	r3, [r2, #24]
 8001384:	4b4a      	ldr	r3, [pc, #296]	@ (80014b0 <HAL_GPIO_Init+0x2b8>)
 8001386:	699b      	ldr	r3, [r3, #24]
 8001388:	f003 0301 	and.w	r3, r3, #1
 800138c:	60bb      	str	r3, [r7, #8]
 800138e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001390:	4a48      	ldr	r2, [pc, #288]	@ (80014b4 <HAL_GPIO_Init+0x2bc>)
 8001392:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001394:	089b      	lsrs	r3, r3, #2
 8001396:	3302      	adds	r3, #2
 8001398:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800139c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800139e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013a0:	f003 0303 	and.w	r3, r3, #3
 80013a4:	009b      	lsls	r3, r3, #2
 80013a6:	220f      	movs	r2, #15
 80013a8:	fa02 f303 	lsl.w	r3, r2, r3
 80013ac:	43db      	mvns	r3, r3
 80013ae:	68fa      	ldr	r2, [r7, #12]
 80013b0:	4013      	ands	r3, r2
 80013b2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	4a40      	ldr	r2, [pc, #256]	@ (80014b8 <HAL_GPIO_Init+0x2c0>)
 80013b8:	4293      	cmp	r3, r2
 80013ba:	d013      	beq.n	80013e4 <HAL_GPIO_Init+0x1ec>
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	4a3f      	ldr	r2, [pc, #252]	@ (80014bc <HAL_GPIO_Init+0x2c4>)
 80013c0:	4293      	cmp	r3, r2
 80013c2:	d00d      	beq.n	80013e0 <HAL_GPIO_Init+0x1e8>
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	4a3e      	ldr	r2, [pc, #248]	@ (80014c0 <HAL_GPIO_Init+0x2c8>)
 80013c8:	4293      	cmp	r3, r2
 80013ca:	d007      	beq.n	80013dc <HAL_GPIO_Init+0x1e4>
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	4a3d      	ldr	r2, [pc, #244]	@ (80014c4 <HAL_GPIO_Init+0x2cc>)
 80013d0:	4293      	cmp	r3, r2
 80013d2:	d101      	bne.n	80013d8 <HAL_GPIO_Init+0x1e0>
 80013d4:	2303      	movs	r3, #3
 80013d6:	e006      	b.n	80013e6 <HAL_GPIO_Init+0x1ee>
 80013d8:	2304      	movs	r3, #4
 80013da:	e004      	b.n	80013e6 <HAL_GPIO_Init+0x1ee>
 80013dc:	2302      	movs	r3, #2
 80013de:	e002      	b.n	80013e6 <HAL_GPIO_Init+0x1ee>
 80013e0:	2301      	movs	r3, #1
 80013e2:	e000      	b.n	80013e6 <HAL_GPIO_Init+0x1ee>
 80013e4:	2300      	movs	r3, #0
 80013e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80013e8:	f002 0203 	and.w	r2, r2, #3
 80013ec:	0092      	lsls	r2, r2, #2
 80013ee:	4093      	lsls	r3, r2
 80013f0:	68fa      	ldr	r2, [r7, #12]
 80013f2:	4313      	orrs	r3, r2
 80013f4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80013f6:	492f      	ldr	r1, [pc, #188]	@ (80014b4 <HAL_GPIO_Init+0x2bc>)
 80013f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013fa:	089b      	lsrs	r3, r3, #2
 80013fc:	3302      	adds	r3, #2
 80013fe:	68fa      	ldr	r2, [r7, #12]
 8001400:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800140c:	2b00      	cmp	r3, #0
 800140e:	d006      	beq.n	800141e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001410:	4b2d      	ldr	r3, [pc, #180]	@ (80014c8 <HAL_GPIO_Init+0x2d0>)
 8001412:	689a      	ldr	r2, [r3, #8]
 8001414:	492c      	ldr	r1, [pc, #176]	@ (80014c8 <HAL_GPIO_Init+0x2d0>)
 8001416:	69bb      	ldr	r3, [r7, #24]
 8001418:	4313      	orrs	r3, r2
 800141a:	608b      	str	r3, [r1, #8]
 800141c:	e006      	b.n	800142c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800141e:	4b2a      	ldr	r3, [pc, #168]	@ (80014c8 <HAL_GPIO_Init+0x2d0>)
 8001420:	689a      	ldr	r2, [r3, #8]
 8001422:	69bb      	ldr	r3, [r7, #24]
 8001424:	43db      	mvns	r3, r3
 8001426:	4928      	ldr	r1, [pc, #160]	@ (80014c8 <HAL_GPIO_Init+0x2d0>)
 8001428:	4013      	ands	r3, r2
 800142a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	685b      	ldr	r3, [r3, #4]
 8001430:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001434:	2b00      	cmp	r3, #0
 8001436:	d006      	beq.n	8001446 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001438:	4b23      	ldr	r3, [pc, #140]	@ (80014c8 <HAL_GPIO_Init+0x2d0>)
 800143a:	68da      	ldr	r2, [r3, #12]
 800143c:	4922      	ldr	r1, [pc, #136]	@ (80014c8 <HAL_GPIO_Init+0x2d0>)
 800143e:	69bb      	ldr	r3, [r7, #24]
 8001440:	4313      	orrs	r3, r2
 8001442:	60cb      	str	r3, [r1, #12]
 8001444:	e006      	b.n	8001454 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001446:	4b20      	ldr	r3, [pc, #128]	@ (80014c8 <HAL_GPIO_Init+0x2d0>)
 8001448:	68da      	ldr	r2, [r3, #12]
 800144a:	69bb      	ldr	r3, [r7, #24]
 800144c:	43db      	mvns	r3, r3
 800144e:	491e      	ldr	r1, [pc, #120]	@ (80014c8 <HAL_GPIO_Init+0x2d0>)
 8001450:	4013      	ands	r3, r2
 8001452:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800145c:	2b00      	cmp	r3, #0
 800145e:	d006      	beq.n	800146e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001460:	4b19      	ldr	r3, [pc, #100]	@ (80014c8 <HAL_GPIO_Init+0x2d0>)
 8001462:	685a      	ldr	r2, [r3, #4]
 8001464:	4918      	ldr	r1, [pc, #96]	@ (80014c8 <HAL_GPIO_Init+0x2d0>)
 8001466:	69bb      	ldr	r3, [r7, #24]
 8001468:	4313      	orrs	r3, r2
 800146a:	604b      	str	r3, [r1, #4]
 800146c:	e006      	b.n	800147c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800146e:	4b16      	ldr	r3, [pc, #88]	@ (80014c8 <HAL_GPIO_Init+0x2d0>)
 8001470:	685a      	ldr	r2, [r3, #4]
 8001472:	69bb      	ldr	r3, [r7, #24]
 8001474:	43db      	mvns	r3, r3
 8001476:	4914      	ldr	r1, [pc, #80]	@ (80014c8 <HAL_GPIO_Init+0x2d0>)
 8001478:	4013      	ands	r3, r2
 800147a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	685b      	ldr	r3, [r3, #4]
 8001480:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001484:	2b00      	cmp	r3, #0
 8001486:	d021      	beq.n	80014cc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001488:	4b0f      	ldr	r3, [pc, #60]	@ (80014c8 <HAL_GPIO_Init+0x2d0>)
 800148a:	681a      	ldr	r2, [r3, #0]
 800148c:	490e      	ldr	r1, [pc, #56]	@ (80014c8 <HAL_GPIO_Init+0x2d0>)
 800148e:	69bb      	ldr	r3, [r7, #24]
 8001490:	4313      	orrs	r3, r2
 8001492:	600b      	str	r3, [r1, #0]
 8001494:	e021      	b.n	80014da <HAL_GPIO_Init+0x2e2>
 8001496:	bf00      	nop
 8001498:	10320000 	.word	0x10320000
 800149c:	10310000 	.word	0x10310000
 80014a0:	10220000 	.word	0x10220000
 80014a4:	10210000 	.word	0x10210000
 80014a8:	10120000 	.word	0x10120000
 80014ac:	10110000 	.word	0x10110000
 80014b0:	40021000 	.word	0x40021000
 80014b4:	40010000 	.word	0x40010000
 80014b8:	40010800 	.word	0x40010800
 80014bc:	40010c00 	.word	0x40010c00
 80014c0:	40011000 	.word	0x40011000
 80014c4:	40011400 	.word	0x40011400
 80014c8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80014cc:	4b0b      	ldr	r3, [pc, #44]	@ (80014fc <HAL_GPIO_Init+0x304>)
 80014ce:	681a      	ldr	r2, [r3, #0]
 80014d0:	69bb      	ldr	r3, [r7, #24]
 80014d2:	43db      	mvns	r3, r3
 80014d4:	4909      	ldr	r1, [pc, #36]	@ (80014fc <HAL_GPIO_Init+0x304>)
 80014d6:	4013      	ands	r3, r2
 80014d8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80014da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014dc:	3301      	adds	r3, #1
 80014de:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	681a      	ldr	r2, [r3, #0]
 80014e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014e6:	fa22 f303 	lsr.w	r3, r2, r3
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	f47f ae8e 	bne.w	800120c <HAL_GPIO_Init+0x14>
  }
}
 80014f0:	bf00      	nop
 80014f2:	bf00      	nop
 80014f4:	372c      	adds	r7, #44	@ 0x2c
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bc80      	pop	{r7}
 80014fa:	4770      	bx	lr
 80014fc:	40010400 	.word	0x40010400

08001500 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001500:	b480      	push	{r7}
 8001502:	b085      	sub	sp, #20
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
 8001508:	460b      	mov	r3, r1
 800150a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	689a      	ldr	r2, [r3, #8]
 8001510:	887b      	ldrh	r3, [r7, #2]
 8001512:	4013      	ands	r3, r2
 8001514:	2b00      	cmp	r3, #0
 8001516:	d002      	beq.n	800151e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001518:	2301      	movs	r3, #1
 800151a:	73fb      	strb	r3, [r7, #15]
 800151c:	e001      	b.n	8001522 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800151e:	2300      	movs	r3, #0
 8001520:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001522:	7bfb      	ldrb	r3, [r7, #15]
}
 8001524:	4618      	mov	r0, r3
 8001526:	3714      	adds	r7, #20
 8001528:	46bd      	mov	sp, r7
 800152a:	bc80      	pop	{r7}
 800152c:	4770      	bx	lr

0800152e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800152e:	b480      	push	{r7}
 8001530:	b083      	sub	sp, #12
 8001532:	af00      	add	r7, sp, #0
 8001534:	6078      	str	r0, [r7, #4]
 8001536:	460b      	mov	r3, r1
 8001538:	807b      	strh	r3, [r7, #2]
 800153a:	4613      	mov	r3, r2
 800153c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800153e:	787b      	ldrb	r3, [r7, #1]
 8001540:	2b00      	cmp	r3, #0
 8001542:	d003      	beq.n	800154c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001544:	887a      	ldrh	r2, [r7, #2]
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800154a:	e003      	b.n	8001554 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800154c:	887b      	ldrh	r3, [r7, #2]
 800154e:	041a      	lsls	r2, r3, #16
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	611a      	str	r2, [r3, #16]
}
 8001554:	bf00      	nop
 8001556:	370c      	adds	r7, #12
 8001558:	46bd      	mov	sp, r7
 800155a:	bc80      	pop	{r7}
 800155c:	4770      	bx	lr
	...

08001560 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b084      	sub	sp, #16
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	2b00      	cmp	r3, #0
 800156c:	d101      	bne.n	8001572 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800156e:	2301      	movs	r3, #1
 8001570:	e12b      	b.n	80017ca <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001578:	b2db      	uxtb	r3, r3
 800157a:	2b00      	cmp	r3, #0
 800157c:	d106      	bne.n	800158c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	2200      	movs	r2, #0
 8001582:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001586:	6878      	ldr	r0, [r7, #4]
 8001588:	f7ff fbe2 	bl	8000d50 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	2224      	movs	r2, #36	@ 0x24
 8001590:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	681a      	ldr	r2, [r3, #0]
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f022 0201 	bic.w	r2, r2, #1
 80015a2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	681a      	ldr	r2, [r3, #0]
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80015b2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	681a      	ldr	r2, [r3, #0]
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80015c2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80015c4:	f001 f842 	bl	800264c <HAL_RCC_GetPCLK1Freq>
 80015c8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	685b      	ldr	r3, [r3, #4]
 80015ce:	4a81      	ldr	r2, [pc, #516]	@ (80017d4 <HAL_I2C_Init+0x274>)
 80015d0:	4293      	cmp	r3, r2
 80015d2:	d807      	bhi.n	80015e4 <HAL_I2C_Init+0x84>
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	4a80      	ldr	r2, [pc, #512]	@ (80017d8 <HAL_I2C_Init+0x278>)
 80015d8:	4293      	cmp	r3, r2
 80015da:	bf94      	ite	ls
 80015dc:	2301      	movls	r3, #1
 80015de:	2300      	movhi	r3, #0
 80015e0:	b2db      	uxtb	r3, r3
 80015e2:	e006      	b.n	80015f2 <HAL_I2C_Init+0x92>
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	4a7d      	ldr	r2, [pc, #500]	@ (80017dc <HAL_I2C_Init+0x27c>)
 80015e8:	4293      	cmp	r3, r2
 80015ea:	bf94      	ite	ls
 80015ec:	2301      	movls	r3, #1
 80015ee:	2300      	movhi	r3, #0
 80015f0:	b2db      	uxtb	r3, r3
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d001      	beq.n	80015fa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80015f6:	2301      	movs	r3, #1
 80015f8:	e0e7      	b.n	80017ca <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	4a78      	ldr	r2, [pc, #480]	@ (80017e0 <HAL_I2C_Init+0x280>)
 80015fe:	fba2 2303 	umull	r2, r3, r2, r3
 8001602:	0c9b      	lsrs	r3, r3, #18
 8001604:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	685b      	ldr	r3, [r3, #4]
 800160c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	68ba      	ldr	r2, [r7, #8]
 8001616:	430a      	orrs	r2, r1
 8001618:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	6a1b      	ldr	r3, [r3, #32]
 8001620:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	685b      	ldr	r3, [r3, #4]
 8001628:	4a6a      	ldr	r2, [pc, #424]	@ (80017d4 <HAL_I2C_Init+0x274>)
 800162a:	4293      	cmp	r3, r2
 800162c:	d802      	bhi.n	8001634 <HAL_I2C_Init+0xd4>
 800162e:	68bb      	ldr	r3, [r7, #8]
 8001630:	3301      	adds	r3, #1
 8001632:	e009      	b.n	8001648 <HAL_I2C_Init+0xe8>
 8001634:	68bb      	ldr	r3, [r7, #8]
 8001636:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800163a:	fb02 f303 	mul.w	r3, r2, r3
 800163e:	4a69      	ldr	r2, [pc, #420]	@ (80017e4 <HAL_I2C_Init+0x284>)
 8001640:	fba2 2303 	umull	r2, r3, r2, r3
 8001644:	099b      	lsrs	r3, r3, #6
 8001646:	3301      	adds	r3, #1
 8001648:	687a      	ldr	r2, [r7, #4]
 800164a:	6812      	ldr	r2, [r2, #0]
 800164c:	430b      	orrs	r3, r1
 800164e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	69db      	ldr	r3, [r3, #28]
 8001656:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800165a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	685b      	ldr	r3, [r3, #4]
 8001662:	495c      	ldr	r1, [pc, #368]	@ (80017d4 <HAL_I2C_Init+0x274>)
 8001664:	428b      	cmp	r3, r1
 8001666:	d819      	bhi.n	800169c <HAL_I2C_Init+0x13c>
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	1e59      	subs	r1, r3, #1
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	005b      	lsls	r3, r3, #1
 8001672:	fbb1 f3f3 	udiv	r3, r1, r3
 8001676:	1c59      	adds	r1, r3, #1
 8001678:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800167c:	400b      	ands	r3, r1
 800167e:	2b00      	cmp	r3, #0
 8001680:	d00a      	beq.n	8001698 <HAL_I2C_Init+0x138>
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	1e59      	subs	r1, r3, #1
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	005b      	lsls	r3, r3, #1
 800168c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001690:	3301      	adds	r3, #1
 8001692:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001696:	e051      	b.n	800173c <HAL_I2C_Init+0x1dc>
 8001698:	2304      	movs	r3, #4
 800169a:	e04f      	b.n	800173c <HAL_I2C_Init+0x1dc>
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	689b      	ldr	r3, [r3, #8]
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d111      	bne.n	80016c8 <HAL_I2C_Init+0x168>
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	1e58      	subs	r0, r3, #1
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	6859      	ldr	r1, [r3, #4]
 80016ac:	460b      	mov	r3, r1
 80016ae:	005b      	lsls	r3, r3, #1
 80016b0:	440b      	add	r3, r1
 80016b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80016b6:	3301      	adds	r3, #1
 80016b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80016bc:	2b00      	cmp	r3, #0
 80016be:	bf0c      	ite	eq
 80016c0:	2301      	moveq	r3, #1
 80016c2:	2300      	movne	r3, #0
 80016c4:	b2db      	uxtb	r3, r3
 80016c6:	e012      	b.n	80016ee <HAL_I2C_Init+0x18e>
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	1e58      	subs	r0, r3, #1
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	6859      	ldr	r1, [r3, #4]
 80016d0:	460b      	mov	r3, r1
 80016d2:	009b      	lsls	r3, r3, #2
 80016d4:	440b      	add	r3, r1
 80016d6:	0099      	lsls	r1, r3, #2
 80016d8:	440b      	add	r3, r1
 80016da:	fbb0 f3f3 	udiv	r3, r0, r3
 80016de:	3301      	adds	r3, #1
 80016e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	bf0c      	ite	eq
 80016e8:	2301      	moveq	r3, #1
 80016ea:	2300      	movne	r3, #0
 80016ec:	b2db      	uxtb	r3, r3
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d001      	beq.n	80016f6 <HAL_I2C_Init+0x196>
 80016f2:	2301      	movs	r3, #1
 80016f4:	e022      	b.n	800173c <HAL_I2C_Init+0x1dc>
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	689b      	ldr	r3, [r3, #8]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d10e      	bne.n	800171c <HAL_I2C_Init+0x1bc>
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	1e58      	subs	r0, r3, #1
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	6859      	ldr	r1, [r3, #4]
 8001706:	460b      	mov	r3, r1
 8001708:	005b      	lsls	r3, r3, #1
 800170a:	440b      	add	r3, r1
 800170c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001710:	3301      	adds	r3, #1
 8001712:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001716:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800171a:	e00f      	b.n	800173c <HAL_I2C_Init+0x1dc>
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	1e58      	subs	r0, r3, #1
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	6859      	ldr	r1, [r3, #4]
 8001724:	460b      	mov	r3, r1
 8001726:	009b      	lsls	r3, r3, #2
 8001728:	440b      	add	r3, r1
 800172a:	0099      	lsls	r1, r3, #2
 800172c:	440b      	add	r3, r1
 800172e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001732:	3301      	adds	r3, #1
 8001734:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001738:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800173c:	6879      	ldr	r1, [r7, #4]
 800173e:	6809      	ldr	r1, [r1, #0]
 8001740:	4313      	orrs	r3, r2
 8001742:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	69da      	ldr	r2, [r3, #28]
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	6a1b      	ldr	r3, [r3, #32]
 8001756:	431a      	orrs	r2, r3
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	430a      	orrs	r2, r1
 800175e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	689b      	ldr	r3, [r3, #8]
 8001766:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800176a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800176e:	687a      	ldr	r2, [r7, #4]
 8001770:	6911      	ldr	r1, [r2, #16]
 8001772:	687a      	ldr	r2, [r7, #4]
 8001774:	68d2      	ldr	r2, [r2, #12]
 8001776:	4311      	orrs	r1, r2
 8001778:	687a      	ldr	r2, [r7, #4]
 800177a:	6812      	ldr	r2, [r2, #0]
 800177c:	430b      	orrs	r3, r1
 800177e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	68db      	ldr	r3, [r3, #12]
 8001786:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	695a      	ldr	r2, [r3, #20]
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	699b      	ldr	r3, [r3, #24]
 8001792:	431a      	orrs	r2, r3
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	430a      	orrs	r2, r1
 800179a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	681a      	ldr	r2, [r3, #0]
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f042 0201 	orr.w	r2, r2, #1
 80017aa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	2200      	movs	r2, #0
 80017b0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	2220      	movs	r2, #32
 80017b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	2200      	movs	r2, #0
 80017be:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	2200      	movs	r2, #0
 80017c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80017c8:	2300      	movs	r3, #0
}
 80017ca:	4618      	mov	r0, r3
 80017cc:	3710      	adds	r7, #16
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	bf00      	nop
 80017d4:	000186a0 	.word	0x000186a0
 80017d8:	001e847f 	.word	0x001e847f
 80017dc:	003d08ff 	.word	0x003d08ff
 80017e0:	431bde83 	.word	0x431bde83
 80017e4:	10624dd3 	.word	0x10624dd3

080017e8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b088      	sub	sp, #32
 80017ec:	af02      	add	r7, sp, #8
 80017ee:	60f8      	str	r0, [r7, #12]
 80017f0:	4608      	mov	r0, r1
 80017f2:	4611      	mov	r1, r2
 80017f4:	461a      	mov	r2, r3
 80017f6:	4603      	mov	r3, r0
 80017f8:	817b      	strh	r3, [r7, #10]
 80017fa:	460b      	mov	r3, r1
 80017fc:	813b      	strh	r3, [r7, #8]
 80017fe:	4613      	mov	r3, r2
 8001800:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001802:	f7ff fbe7 	bl	8000fd4 <HAL_GetTick>
 8001806:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800180e:	b2db      	uxtb	r3, r3
 8001810:	2b20      	cmp	r3, #32
 8001812:	f040 80d9 	bne.w	80019c8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001816:	697b      	ldr	r3, [r7, #20]
 8001818:	9300      	str	r3, [sp, #0]
 800181a:	2319      	movs	r3, #25
 800181c:	2201      	movs	r2, #1
 800181e:	496d      	ldr	r1, [pc, #436]	@ (80019d4 <HAL_I2C_Mem_Write+0x1ec>)
 8001820:	68f8      	ldr	r0, [r7, #12]
 8001822:	f000 f971 	bl	8001b08 <I2C_WaitOnFlagUntilTimeout>
 8001826:	4603      	mov	r3, r0
 8001828:	2b00      	cmp	r3, #0
 800182a:	d001      	beq.n	8001830 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800182c:	2302      	movs	r3, #2
 800182e:	e0cc      	b.n	80019ca <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001836:	2b01      	cmp	r3, #1
 8001838:	d101      	bne.n	800183e <HAL_I2C_Mem_Write+0x56>
 800183a:	2302      	movs	r3, #2
 800183c:	e0c5      	b.n	80019ca <HAL_I2C_Mem_Write+0x1e2>
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	2201      	movs	r2, #1
 8001842:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f003 0301 	and.w	r3, r3, #1
 8001850:	2b01      	cmp	r3, #1
 8001852:	d007      	beq.n	8001864 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	681a      	ldr	r2, [r3, #0]
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f042 0201 	orr.w	r2, r2, #1
 8001862:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	681a      	ldr	r2, [r3, #0]
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001872:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	2221      	movs	r2, #33	@ 0x21
 8001878:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	2240      	movs	r2, #64	@ 0x40
 8001880:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	2200      	movs	r2, #0
 8001888:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	6a3a      	ldr	r2, [r7, #32]
 800188e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001894:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800189a:	b29a      	uxth	r2, r3
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	4a4d      	ldr	r2, [pc, #308]	@ (80019d8 <HAL_I2C_Mem_Write+0x1f0>)
 80018a4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80018a6:	88f8      	ldrh	r0, [r7, #6]
 80018a8:	893a      	ldrh	r2, [r7, #8]
 80018aa:	8979      	ldrh	r1, [r7, #10]
 80018ac:	697b      	ldr	r3, [r7, #20]
 80018ae:	9301      	str	r3, [sp, #4]
 80018b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80018b2:	9300      	str	r3, [sp, #0]
 80018b4:	4603      	mov	r3, r0
 80018b6:	68f8      	ldr	r0, [r7, #12]
 80018b8:	f000 f890 	bl	80019dc <I2C_RequestMemoryWrite>
 80018bc:	4603      	mov	r3, r0
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d052      	beq.n	8001968 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80018c2:	2301      	movs	r3, #1
 80018c4:	e081      	b.n	80019ca <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80018c6:	697a      	ldr	r2, [r7, #20]
 80018c8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80018ca:	68f8      	ldr	r0, [r7, #12]
 80018cc:	f000 fa36 	bl	8001d3c <I2C_WaitOnTXEFlagUntilTimeout>
 80018d0:	4603      	mov	r3, r0
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d00d      	beq.n	80018f2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018da:	2b04      	cmp	r3, #4
 80018dc:	d107      	bne.n	80018ee <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	681a      	ldr	r2, [r3, #0]
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80018ec:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80018ee:	2301      	movs	r3, #1
 80018f0:	e06b      	b.n	80019ca <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018f6:	781a      	ldrb	r2, [r3, #0]
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001902:	1c5a      	adds	r2, r3, #1
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800190c:	3b01      	subs	r3, #1
 800190e:	b29a      	uxth	r2, r3
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001918:	b29b      	uxth	r3, r3
 800191a:	3b01      	subs	r3, #1
 800191c:	b29a      	uxth	r2, r3
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	695b      	ldr	r3, [r3, #20]
 8001928:	f003 0304 	and.w	r3, r3, #4
 800192c:	2b04      	cmp	r3, #4
 800192e:	d11b      	bne.n	8001968 <HAL_I2C_Mem_Write+0x180>
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001934:	2b00      	cmp	r3, #0
 8001936:	d017      	beq.n	8001968 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800193c:	781a      	ldrb	r2, [r3, #0]
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001948:	1c5a      	adds	r2, r3, #1
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001952:	3b01      	subs	r3, #1
 8001954:	b29a      	uxth	r2, r3
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800195e:	b29b      	uxth	r3, r3
 8001960:	3b01      	subs	r3, #1
 8001962:	b29a      	uxth	r2, r3
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800196c:	2b00      	cmp	r3, #0
 800196e:	d1aa      	bne.n	80018c6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001970:	697a      	ldr	r2, [r7, #20]
 8001972:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001974:	68f8      	ldr	r0, [r7, #12]
 8001976:	f000 fa29 	bl	8001dcc <I2C_WaitOnBTFFlagUntilTimeout>
 800197a:	4603      	mov	r3, r0
 800197c:	2b00      	cmp	r3, #0
 800197e:	d00d      	beq.n	800199c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001984:	2b04      	cmp	r3, #4
 8001986:	d107      	bne.n	8001998 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	681a      	ldr	r2, [r3, #0]
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001996:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001998:	2301      	movs	r3, #1
 800199a:	e016      	b.n	80019ca <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	681a      	ldr	r2, [r3, #0]
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80019aa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	2220      	movs	r2, #32
 80019b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	2200      	movs	r2, #0
 80019b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	2200      	movs	r2, #0
 80019c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80019c4:	2300      	movs	r3, #0
 80019c6:	e000      	b.n	80019ca <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80019c8:	2302      	movs	r3, #2
  }
}
 80019ca:	4618      	mov	r0, r3
 80019cc:	3718      	adds	r7, #24
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd80      	pop	{r7, pc}
 80019d2:	bf00      	nop
 80019d4:	00100002 	.word	0x00100002
 80019d8:	ffff0000 	.word	0xffff0000

080019dc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b088      	sub	sp, #32
 80019e0:	af02      	add	r7, sp, #8
 80019e2:	60f8      	str	r0, [r7, #12]
 80019e4:	4608      	mov	r0, r1
 80019e6:	4611      	mov	r1, r2
 80019e8:	461a      	mov	r2, r3
 80019ea:	4603      	mov	r3, r0
 80019ec:	817b      	strh	r3, [r7, #10]
 80019ee:	460b      	mov	r3, r1
 80019f0:	813b      	strh	r3, [r7, #8]
 80019f2:	4613      	mov	r3, r2
 80019f4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	681a      	ldr	r2, [r3, #0]
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001a04:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001a06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a08:	9300      	str	r3, [sp, #0]
 8001a0a:	6a3b      	ldr	r3, [r7, #32]
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001a12:	68f8      	ldr	r0, [r7, #12]
 8001a14:	f000 f878 	bl	8001b08 <I2C_WaitOnFlagUntilTimeout>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d00d      	beq.n	8001a3a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a28:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001a2c:	d103      	bne.n	8001a36 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001a34:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8001a36:	2303      	movs	r3, #3
 8001a38:	e05f      	b.n	8001afa <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001a3a:	897b      	ldrh	r3, [r7, #10]
 8001a3c:	b2db      	uxtb	r3, r3
 8001a3e:	461a      	mov	r2, r3
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8001a48:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001a4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a4c:	6a3a      	ldr	r2, [r7, #32]
 8001a4e:	492d      	ldr	r1, [pc, #180]	@ (8001b04 <I2C_RequestMemoryWrite+0x128>)
 8001a50:	68f8      	ldr	r0, [r7, #12]
 8001a52:	f000 f8d3 	bl	8001bfc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001a56:	4603      	mov	r3, r0
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d001      	beq.n	8001a60 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8001a5c:	2301      	movs	r3, #1
 8001a5e:	e04c      	b.n	8001afa <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001a60:	2300      	movs	r3, #0
 8001a62:	617b      	str	r3, [r7, #20]
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	695b      	ldr	r3, [r3, #20]
 8001a6a:	617b      	str	r3, [r7, #20]
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	699b      	ldr	r3, [r3, #24]
 8001a72:	617b      	str	r3, [r7, #20]
 8001a74:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001a76:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001a78:	6a39      	ldr	r1, [r7, #32]
 8001a7a:	68f8      	ldr	r0, [r7, #12]
 8001a7c:	f000 f95e 	bl	8001d3c <I2C_WaitOnTXEFlagUntilTimeout>
 8001a80:	4603      	mov	r3, r0
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d00d      	beq.n	8001aa2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a8a:	2b04      	cmp	r3, #4
 8001a8c:	d107      	bne.n	8001a9e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	681a      	ldr	r2, [r3, #0]
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001a9c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	e02b      	b.n	8001afa <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001aa2:	88fb      	ldrh	r3, [r7, #6]
 8001aa4:	2b01      	cmp	r3, #1
 8001aa6:	d105      	bne.n	8001ab4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001aa8:	893b      	ldrh	r3, [r7, #8]
 8001aaa:	b2da      	uxtb	r2, r3
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	611a      	str	r2, [r3, #16]
 8001ab2:	e021      	b.n	8001af8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001ab4:	893b      	ldrh	r3, [r7, #8]
 8001ab6:	0a1b      	lsrs	r3, r3, #8
 8001ab8:	b29b      	uxth	r3, r3
 8001aba:	b2da      	uxtb	r2, r3
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001ac2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001ac4:	6a39      	ldr	r1, [r7, #32]
 8001ac6:	68f8      	ldr	r0, [r7, #12]
 8001ac8:	f000 f938 	bl	8001d3c <I2C_WaitOnTXEFlagUntilTimeout>
 8001acc:	4603      	mov	r3, r0
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d00d      	beq.n	8001aee <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ad6:	2b04      	cmp	r3, #4
 8001ad8:	d107      	bne.n	8001aea <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	681a      	ldr	r2, [r3, #0]
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001ae8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001aea:	2301      	movs	r3, #1
 8001aec:	e005      	b.n	8001afa <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001aee:	893b      	ldrh	r3, [r7, #8]
 8001af0:	b2da      	uxtb	r2, r3
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8001af8:	2300      	movs	r3, #0
}
 8001afa:	4618      	mov	r0, r3
 8001afc:	3718      	adds	r7, #24
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}
 8001b02:	bf00      	nop
 8001b04:	00010002 	.word	0x00010002

08001b08 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b084      	sub	sp, #16
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	60f8      	str	r0, [r7, #12]
 8001b10:	60b9      	str	r1, [r7, #8]
 8001b12:	603b      	str	r3, [r7, #0]
 8001b14:	4613      	mov	r3, r2
 8001b16:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001b18:	e048      	b.n	8001bac <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b20:	d044      	beq.n	8001bac <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b22:	f7ff fa57 	bl	8000fd4 <HAL_GetTick>
 8001b26:	4602      	mov	r2, r0
 8001b28:	69bb      	ldr	r3, [r7, #24]
 8001b2a:	1ad3      	subs	r3, r2, r3
 8001b2c:	683a      	ldr	r2, [r7, #0]
 8001b2e:	429a      	cmp	r2, r3
 8001b30:	d302      	bcc.n	8001b38 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d139      	bne.n	8001bac <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001b38:	68bb      	ldr	r3, [r7, #8]
 8001b3a:	0c1b      	lsrs	r3, r3, #16
 8001b3c:	b2db      	uxtb	r3, r3
 8001b3e:	2b01      	cmp	r3, #1
 8001b40:	d10d      	bne.n	8001b5e <I2C_WaitOnFlagUntilTimeout+0x56>
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	695b      	ldr	r3, [r3, #20]
 8001b48:	43da      	mvns	r2, r3
 8001b4a:	68bb      	ldr	r3, [r7, #8]
 8001b4c:	4013      	ands	r3, r2
 8001b4e:	b29b      	uxth	r3, r3
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	bf0c      	ite	eq
 8001b54:	2301      	moveq	r3, #1
 8001b56:	2300      	movne	r3, #0
 8001b58:	b2db      	uxtb	r3, r3
 8001b5a:	461a      	mov	r2, r3
 8001b5c:	e00c      	b.n	8001b78 <I2C_WaitOnFlagUntilTimeout+0x70>
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	699b      	ldr	r3, [r3, #24]
 8001b64:	43da      	mvns	r2, r3
 8001b66:	68bb      	ldr	r3, [r7, #8]
 8001b68:	4013      	ands	r3, r2
 8001b6a:	b29b      	uxth	r3, r3
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	bf0c      	ite	eq
 8001b70:	2301      	moveq	r3, #1
 8001b72:	2300      	movne	r3, #0
 8001b74:	b2db      	uxtb	r3, r3
 8001b76:	461a      	mov	r2, r3
 8001b78:	79fb      	ldrb	r3, [r7, #7]
 8001b7a:	429a      	cmp	r2, r3
 8001b7c:	d116      	bne.n	8001bac <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	2200      	movs	r2, #0
 8001b82:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	2220      	movs	r2, #32
 8001b88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	2200      	movs	r2, #0
 8001b90:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b98:	f043 0220 	orr.w	r2, r3, #32
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001ba8:	2301      	movs	r3, #1
 8001baa:	e023      	b.n	8001bf4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001bac:	68bb      	ldr	r3, [r7, #8]
 8001bae:	0c1b      	lsrs	r3, r3, #16
 8001bb0:	b2db      	uxtb	r3, r3
 8001bb2:	2b01      	cmp	r3, #1
 8001bb4:	d10d      	bne.n	8001bd2 <I2C_WaitOnFlagUntilTimeout+0xca>
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	695b      	ldr	r3, [r3, #20]
 8001bbc:	43da      	mvns	r2, r3
 8001bbe:	68bb      	ldr	r3, [r7, #8]
 8001bc0:	4013      	ands	r3, r2
 8001bc2:	b29b      	uxth	r3, r3
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	bf0c      	ite	eq
 8001bc8:	2301      	moveq	r3, #1
 8001bca:	2300      	movne	r3, #0
 8001bcc:	b2db      	uxtb	r3, r3
 8001bce:	461a      	mov	r2, r3
 8001bd0:	e00c      	b.n	8001bec <I2C_WaitOnFlagUntilTimeout+0xe4>
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	699b      	ldr	r3, [r3, #24]
 8001bd8:	43da      	mvns	r2, r3
 8001bda:	68bb      	ldr	r3, [r7, #8]
 8001bdc:	4013      	ands	r3, r2
 8001bde:	b29b      	uxth	r3, r3
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	bf0c      	ite	eq
 8001be4:	2301      	moveq	r3, #1
 8001be6:	2300      	movne	r3, #0
 8001be8:	b2db      	uxtb	r3, r3
 8001bea:	461a      	mov	r2, r3
 8001bec:	79fb      	ldrb	r3, [r7, #7]
 8001bee:	429a      	cmp	r2, r3
 8001bf0:	d093      	beq.n	8001b1a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001bf2:	2300      	movs	r3, #0
}
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	3710      	adds	r7, #16
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bd80      	pop	{r7, pc}

08001bfc <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b084      	sub	sp, #16
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	60f8      	str	r0, [r7, #12]
 8001c04:	60b9      	str	r1, [r7, #8]
 8001c06:	607a      	str	r2, [r7, #4]
 8001c08:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001c0a:	e071      	b.n	8001cf0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	695b      	ldr	r3, [r3, #20]
 8001c12:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c16:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001c1a:	d123      	bne.n	8001c64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	681a      	ldr	r2, [r3, #0]
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001c2a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001c34:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	2200      	movs	r2, #0
 8001c3a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	2220      	movs	r2, #32
 8001c40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	2200      	movs	r2, #0
 8001c48:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c50:	f043 0204 	orr.w	r2, r3, #4
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8001c60:	2301      	movs	r3, #1
 8001c62:	e067      	b.n	8001d34 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c6a:	d041      	beq.n	8001cf0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c6c:	f7ff f9b2 	bl	8000fd4 <HAL_GetTick>
 8001c70:	4602      	mov	r2, r0
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	1ad3      	subs	r3, r2, r3
 8001c76:	687a      	ldr	r2, [r7, #4]
 8001c78:	429a      	cmp	r2, r3
 8001c7a:	d302      	bcc.n	8001c82 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d136      	bne.n	8001cf0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8001c82:	68bb      	ldr	r3, [r7, #8]
 8001c84:	0c1b      	lsrs	r3, r3, #16
 8001c86:	b2db      	uxtb	r3, r3
 8001c88:	2b01      	cmp	r3, #1
 8001c8a:	d10c      	bne.n	8001ca6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	695b      	ldr	r3, [r3, #20]
 8001c92:	43da      	mvns	r2, r3
 8001c94:	68bb      	ldr	r3, [r7, #8]
 8001c96:	4013      	ands	r3, r2
 8001c98:	b29b      	uxth	r3, r3
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	bf14      	ite	ne
 8001c9e:	2301      	movne	r3, #1
 8001ca0:	2300      	moveq	r3, #0
 8001ca2:	b2db      	uxtb	r3, r3
 8001ca4:	e00b      	b.n	8001cbe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	699b      	ldr	r3, [r3, #24]
 8001cac:	43da      	mvns	r2, r3
 8001cae:	68bb      	ldr	r3, [r7, #8]
 8001cb0:	4013      	ands	r3, r2
 8001cb2:	b29b      	uxth	r3, r3
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	bf14      	ite	ne
 8001cb8:	2301      	movne	r3, #1
 8001cba:	2300      	moveq	r3, #0
 8001cbc:	b2db      	uxtb	r3, r3
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d016      	beq.n	8001cf0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	2220      	movs	r2, #32
 8001ccc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cdc:	f043 0220 	orr.w	r2, r3, #32
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001cec:	2301      	movs	r3, #1
 8001cee:	e021      	b.n	8001d34 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001cf0:	68bb      	ldr	r3, [r7, #8]
 8001cf2:	0c1b      	lsrs	r3, r3, #16
 8001cf4:	b2db      	uxtb	r3, r3
 8001cf6:	2b01      	cmp	r3, #1
 8001cf8:	d10c      	bne.n	8001d14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	695b      	ldr	r3, [r3, #20]
 8001d00:	43da      	mvns	r2, r3
 8001d02:	68bb      	ldr	r3, [r7, #8]
 8001d04:	4013      	ands	r3, r2
 8001d06:	b29b      	uxth	r3, r3
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	bf14      	ite	ne
 8001d0c:	2301      	movne	r3, #1
 8001d0e:	2300      	moveq	r3, #0
 8001d10:	b2db      	uxtb	r3, r3
 8001d12:	e00b      	b.n	8001d2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	699b      	ldr	r3, [r3, #24]
 8001d1a:	43da      	mvns	r2, r3
 8001d1c:	68bb      	ldr	r3, [r7, #8]
 8001d1e:	4013      	ands	r3, r2
 8001d20:	b29b      	uxth	r3, r3
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	bf14      	ite	ne
 8001d26:	2301      	movne	r3, #1
 8001d28:	2300      	moveq	r3, #0
 8001d2a:	b2db      	uxtb	r3, r3
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	f47f af6d 	bne.w	8001c0c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8001d32:	2300      	movs	r3, #0
}
 8001d34:	4618      	mov	r0, r3
 8001d36:	3710      	adds	r7, #16
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bd80      	pop	{r7, pc}

08001d3c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b084      	sub	sp, #16
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	60f8      	str	r0, [r7, #12]
 8001d44:	60b9      	str	r1, [r7, #8]
 8001d46:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001d48:	e034      	b.n	8001db4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001d4a:	68f8      	ldr	r0, [r7, #12]
 8001d4c:	f000 f886 	bl	8001e5c <I2C_IsAcknowledgeFailed>
 8001d50:	4603      	mov	r3, r0
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d001      	beq.n	8001d5a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001d56:	2301      	movs	r3, #1
 8001d58:	e034      	b.n	8001dc4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001d5a:	68bb      	ldr	r3, [r7, #8]
 8001d5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d60:	d028      	beq.n	8001db4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d62:	f7ff f937 	bl	8000fd4 <HAL_GetTick>
 8001d66:	4602      	mov	r2, r0
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	1ad3      	subs	r3, r2, r3
 8001d6c:	68ba      	ldr	r2, [r7, #8]
 8001d6e:	429a      	cmp	r2, r3
 8001d70:	d302      	bcc.n	8001d78 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001d72:	68bb      	ldr	r3, [r7, #8]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d11d      	bne.n	8001db4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	695b      	ldr	r3, [r3, #20]
 8001d7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001d82:	2b80      	cmp	r3, #128	@ 0x80
 8001d84:	d016      	beq.n	8001db4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	2200      	movs	r2, #0
 8001d8a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	2220      	movs	r2, #32
 8001d90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	2200      	movs	r2, #0
 8001d98:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001da0:	f043 0220 	orr.w	r2, r3, #32
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	2200      	movs	r2, #0
 8001dac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001db0:	2301      	movs	r3, #1
 8001db2:	e007      	b.n	8001dc4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	695b      	ldr	r3, [r3, #20]
 8001dba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001dbe:	2b80      	cmp	r3, #128	@ 0x80
 8001dc0:	d1c3      	bne.n	8001d4a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001dc2:	2300      	movs	r3, #0
}
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	3710      	adds	r7, #16
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bd80      	pop	{r7, pc}

08001dcc <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b084      	sub	sp, #16
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	60f8      	str	r0, [r7, #12]
 8001dd4:	60b9      	str	r1, [r7, #8]
 8001dd6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001dd8:	e034      	b.n	8001e44 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001dda:	68f8      	ldr	r0, [r7, #12]
 8001ddc:	f000 f83e 	bl	8001e5c <I2C_IsAcknowledgeFailed>
 8001de0:	4603      	mov	r3, r0
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d001      	beq.n	8001dea <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001de6:	2301      	movs	r3, #1
 8001de8:	e034      	b.n	8001e54 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001dea:	68bb      	ldr	r3, [r7, #8]
 8001dec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001df0:	d028      	beq.n	8001e44 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001df2:	f7ff f8ef 	bl	8000fd4 <HAL_GetTick>
 8001df6:	4602      	mov	r2, r0
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	1ad3      	subs	r3, r2, r3
 8001dfc:	68ba      	ldr	r2, [r7, #8]
 8001dfe:	429a      	cmp	r2, r3
 8001e00:	d302      	bcc.n	8001e08 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001e02:	68bb      	ldr	r3, [r7, #8]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d11d      	bne.n	8001e44 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	695b      	ldr	r3, [r3, #20]
 8001e0e:	f003 0304 	and.w	r3, r3, #4
 8001e12:	2b04      	cmp	r3, #4
 8001e14:	d016      	beq.n	8001e44 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	2200      	movs	r2, #0
 8001e1a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	2220      	movs	r2, #32
 8001e20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	2200      	movs	r2, #0
 8001e28:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e30:	f043 0220 	orr.w	r2, r3, #32
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001e40:	2301      	movs	r3, #1
 8001e42:	e007      	b.n	8001e54 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	695b      	ldr	r3, [r3, #20]
 8001e4a:	f003 0304 	and.w	r3, r3, #4
 8001e4e:	2b04      	cmp	r3, #4
 8001e50:	d1c3      	bne.n	8001dda <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001e52:	2300      	movs	r3, #0
}
 8001e54:	4618      	mov	r0, r3
 8001e56:	3710      	adds	r7, #16
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bd80      	pop	{r7, pc}

08001e5c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	b083      	sub	sp, #12
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	695b      	ldr	r3, [r3, #20]
 8001e6a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e6e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001e72:	d11b      	bne.n	8001eac <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001e7c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	2200      	movs	r2, #0
 8001e82:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	2220      	movs	r2, #32
 8001e88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2200      	movs	r2, #0
 8001e90:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e98:	f043 0204 	orr.w	r2, r3, #4
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	e000      	b.n	8001eae <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8001eac:	2300      	movs	r3, #0
}
 8001eae:	4618      	mov	r0, r3
 8001eb0:	370c      	adds	r7, #12
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bc80      	pop	{r7}
 8001eb6:	4770      	bx	lr

08001eb8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b086      	sub	sp, #24
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d101      	bne.n	8001eca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ec6:	2301      	movs	r3, #1
 8001ec8:	e272      	b.n	80023b0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f003 0301 	and.w	r3, r3, #1
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	f000 8087 	beq.w	8001fe6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001ed8:	4b92      	ldr	r3, [pc, #584]	@ (8002124 <HAL_RCC_OscConfig+0x26c>)
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	f003 030c 	and.w	r3, r3, #12
 8001ee0:	2b04      	cmp	r3, #4
 8001ee2:	d00c      	beq.n	8001efe <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001ee4:	4b8f      	ldr	r3, [pc, #572]	@ (8002124 <HAL_RCC_OscConfig+0x26c>)
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	f003 030c 	and.w	r3, r3, #12
 8001eec:	2b08      	cmp	r3, #8
 8001eee:	d112      	bne.n	8001f16 <HAL_RCC_OscConfig+0x5e>
 8001ef0:	4b8c      	ldr	r3, [pc, #560]	@ (8002124 <HAL_RCC_OscConfig+0x26c>)
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ef8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001efc:	d10b      	bne.n	8001f16 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001efe:	4b89      	ldr	r3, [pc, #548]	@ (8002124 <HAL_RCC_OscConfig+0x26c>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d06c      	beq.n	8001fe4 <HAL_RCC_OscConfig+0x12c>
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	685b      	ldr	r3, [r3, #4]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d168      	bne.n	8001fe4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001f12:	2301      	movs	r3, #1
 8001f14:	e24c      	b.n	80023b0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001f1e:	d106      	bne.n	8001f2e <HAL_RCC_OscConfig+0x76>
 8001f20:	4b80      	ldr	r3, [pc, #512]	@ (8002124 <HAL_RCC_OscConfig+0x26c>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4a7f      	ldr	r2, [pc, #508]	@ (8002124 <HAL_RCC_OscConfig+0x26c>)
 8001f26:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f2a:	6013      	str	r3, [r2, #0]
 8001f2c:	e02e      	b.n	8001f8c <HAL_RCC_OscConfig+0xd4>
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d10c      	bne.n	8001f50 <HAL_RCC_OscConfig+0x98>
 8001f36:	4b7b      	ldr	r3, [pc, #492]	@ (8002124 <HAL_RCC_OscConfig+0x26c>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	4a7a      	ldr	r2, [pc, #488]	@ (8002124 <HAL_RCC_OscConfig+0x26c>)
 8001f3c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001f40:	6013      	str	r3, [r2, #0]
 8001f42:	4b78      	ldr	r3, [pc, #480]	@ (8002124 <HAL_RCC_OscConfig+0x26c>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	4a77      	ldr	r2, [pc, #476]	@ (8002124 <HAL_RCC_OscConfig+0x26c>)
 8001f48:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001f4c:	6013      	str	r3, [r2, #0]
 8001f4e:	e01d      	b.n	8001f8c <HAL_RCC_OscConfig+0xd4>
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001f58:	d10c      	bne.n	8001f74 <HAL_RCC_OscConfig+0xbc>
 8001f5a:	4b72      	ldr	r3, [pc, #456]	@ (8002124 <HAL_RCC_OscConfig+0x26c>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	4a71      	ldr	r2, [pc, #452]	@ (8002124 <HAL_RCC_OscConfig+0x26c>)
 8001f60:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001f64:	6013      	str	r3, [r2, #0]
 8001f66:	4b6f      	ldr	r3, [pc, #444]	@ (8002124 <HAL_RCC_OscConfig+0x26c>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	4a6e      	ldr	r2, [pc, #440]	@ (8002124 <HAL_RCC_OscConfig+0x26c>)
 8001f6c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f70:	6013      	str	r3, [r2, #0]
 8001f72:	e00b      	b.n	8001f8c <HAL_RCC_OscConfig+0xd4>
 8001f74:	4b6b      	ldr	r3, [pc, #428]	@ (8002124 <HAL_RCC_OscConfig+0x26c>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4a6a      	ldr	r2, [pc, #424]	@ (8002124 <HAL_RCC_OscConfig+0x26c>)
 8001f7a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001f7e:	6013      	str	r3, [r2, #0]
 8001f80:	4b68      	ldr	r3, [pc, #416]	@ (8002124 <HAL_RCC_OscConfig+0x26c>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4a67      	ldr	r2, [pc, #412]	@ (8002124 <HAL_RCC_OscConfig+0x26c>)
 8001f86:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001f8a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d013      	beq.n	8001fbc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f94:	f7ff f81e 	bl	8000fd4 <HAL_GetTick>
 8001f98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f9a:	e008      	b.n	8001fae <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f9c:	f7ff f81a 	bl	8000fd4 <HAL_GetTick>
 8001fa0:	4602      	mov	r2, r0
 8001fa2:	693b      	ldr	r3, [r7, #16]
 8001fa4:	1ad3      	subs	r3, r2, r3
 8001fa6:	2b64      	cmp	r3, #100	@ 0x64
 8001fa8:	d901      	bls.n	8001fae <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001faa:	2303      	movs	r3, #3
 8001fac:	e200      	b.n	80023b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fae:	4b5d      	ldr	r3, [pc, #372]	@ (8002124 <HAL_RCC_OscConfig+0x26c>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d0f0      	beq.n	8001f9c <HAL_RCC_OscConfig+0xe4>
 8001fba:	e014      	b.n	8001fe6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fbc:	f7ff f80a 	bl	8000fd4 <HAL_GetTick>
 8001fc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fc2:	e008      	b.n	8001fd6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001fc4:	f7ff f806 	bl	8000fd4 <HAL_GetTick>
 8001fc8:	4602      	mov	r2, r0
 8001fca:	693b      	ldr	r3, [r7, #16]
 8001fcc:	1ad3      	subs	r3, r2, r3
 8001fce:	2b64      	cmp	r3, #100	@ 0x64
 8001fd0:	d901      	bls.n	8001fd6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001fd2:	2303      	movs	r3, #3
 8001fd4:	e1ec      	b.n	80023b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fd6:	4b53      	ldr	r3, [pc, #332]	@ (8002124 <HAL_RCC_OscConfig+0x26c>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d1f0      	bne.n	8001fc4 <HAL_RCC_OscConfig+0x10c>
 8001fe2:	e000      	b.n	8001fe6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fe4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f003 0302 	and.w	r3, r3, #2
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d063      	beq.n	80020ba <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001ff2:	4b4c      	ldr	r3, [pc, #304]	@ (8002124 <HAL_RCC_OscConfig+0x26c>)
 8001ff4:	685b      	ldr	r3, [r3, #4]
 8001ff6:	f003 030c 	and.w	r3, r3, #12
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d00b      	beq.n	8002016 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001ffe:	4b49      	ldr	r3, [pc, #292]	@ (8002124 <HAL_RCC_OscConfig+0x26c>)
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	f003 030c 	and.w	r3, r3, #12
 8002006:	2b08      	cmp	r3, #8
 8002008:	d11c      	bne.n	8002044 <HAL_RCC_OscConfig+0x18c>
 800200a:	4b46      	ldr	r3, [pc, #280]	@ (8002124 <HAL_RCC_OscConfig+0x26c>)
 800200c:	685b      	ldr	r3, [r3, #4]
 800200e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002012:	2b00      	cmp	r3, #0
 8002014:	d116      	bne.n	8002044 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002016:	4b43      	ldr	r3, [pc, #268]	@ (8002124 <HAL_RCC_OscConfig+0x26c>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f003 0302 	and.w	r3, r3, #2
 800201e:	2b00      	cmp	r3, #0
 8002020:	d005      	beq.n	800202e <HAL_RCC_OscConfig+0x176>
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	691b      	ldr	r3, [r3, #16]
 8002026:	2b01      	cmp	r3, #1
 8002028:	d001      	beq.n	800202e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800202a:	2301      	movs	r3, #1
 800202c:	e1c0      	b.n	80023b0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800202e:	4b3d      	ldr	r3, [pc, #244]	@ (8002124 <HAL_RCC_OscConfig+0x26c>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	695b      	ldr	r3, [r3, #20]
 800203a:	00db      	lsls	r3, r3, #3
 800203c:	4939      	ldr	r1, [pc, #228]	@ (8002124 <HAL_RCC_OscConfig+0x26c>)
 800203e:	4313      	orrs	r3, r2
 8002040:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002042:	e03a      	b.n	80020ba <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	691b      	ldr	r3, [r3, #16]
 8002048:	2b00      	cmp	r3, #0
 800204a:	d020      	beq.n	800208e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800204c:	4b36      	ldr	r3, [pc, #216]	@ (8002128 <HAL_RCC_OscConfig+0x270>)
 800204e:	2201      	movs	r2, #1
 8002050:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002052:	f7fe ffbf 	bl	8000fd4 <HAL_GetTick>
 8002056:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002058:	e008      	b.n	800206c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800205a:	f7fe ffbb 	bl	8000fd4 <HAL_GetTick>
 800205e:	4602      	mov	r2, r0
 8002060:	693b      	ldr	r3, [r7, #16]
 8002062:	1ad3      	subs	r3, r2, r3
 8002064:	2b02      	cmp	r3, #2
 8002066:	d901      	bls.n	800206c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002068:	2303      	movs	r3, #3
 800206a:	e1a1      	b.n	80023b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800206c:	4b2d      	ldr	r3, [pc, #180]	@ (8002124 <HAL_RCC_OscConfig+0x26c>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f003 0302 	and.w	r3, r3, #2
 8002074:	2b00      	cmp	r3, #0
 8002076:	d0f0      	beq.n	800205a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002078:	4b2a      	ldr	r3, [pc, #168]	@ (8002124 <HAL_RCC_OscConfig+0x26c>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	695b      	ldr	r3, [r3, #20]
 8002084:	00db      	lsls	r3, r3, #3
 8002086:	4927      	ldr	r1, [pc, #156]	@ (8002124 <HAL_RCC_OscConfig+0x26c>)
 8002088:	4313      	orrs	r3, r2
 800208a:	600b      	str	r3, [r1, #0]
 800208c:	e015      	b.n	80020ba <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800208e:	4b26      	ldr	r3, [pc, #152]	@ (8002128 <HAL_RCC_OscConfig+0x270>)
 8002090:	2200      	movs	r2, #0
 8002092:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002094:	f7fe ff9e 	bl	8000fd4 <HAL_GetTick>
 8002098:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800209a:	e008      	b.n	80020ae <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800209c:	f7fe ff9a 	bl	8000fd4 <HAL_GetTick>
 80020a0:	4602      	mov	r2, r0
 80020a2:	693b      	ldr	r3, [r7, #16]
 80020a4:	1ad3      	subs	r3, r2, r3
 80020a6:	2b02      	cmp	r3, #2
 80020a8:	d901      	bls.n	80020ae <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80020aa:	2303      	movs	r3, #3
 80020ac:	e180      	b.n	80023b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020ae:	4b1d      	ldr	r3, [pc, #116]	@ (8002124 <HAL_RCC_OscConfig+0x26c>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f003 0302 	and.w	r3, r3, #2
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d1f0      	bne.n	800209c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f003 0308 	and.w	r3, r3, #8
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d03a      	beq.n	800213c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	699b      	ldr	r3, [r3, #24]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d019      	beq.n	8002102 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80020ce:	4b17      	ldr	r3, [pc, #92]	@ (800212c <HAL_RCC_OscConfig+0x274>)
 80020d0:	2201      	movs	r2, #1
 80020d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020d4:	f7fe ff7e 	bl	8000fd4 <HAL_GetTick>
 80020d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020da:	e008      	b.n	80020ee <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020dc:	f7fe ff7a 	bl	8000fd4 <HAL_GetTick>
 80020e0:	4602      	mov	r2, r0
 80020e2:	693b      	ldr	r3, [r7, #16]
 80020e4:	1ad3      	subs	r3, r2, r3
 80020e6:	2b02      	cmp	r3, #2
 80020e8:	d901      	bls.n	80020ee <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80020ea:	2303      	movs	r3, #3
 80020ec:	e160      	b.n	80023b0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020ee:	4b0d      	ldr	r3, [pc, #52]	@ (8002124 <HAL_RCC_OscConfig+0x26c>)
 80020f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020f2:	f003 0302 	and.w	r3, r3, #2
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d0f0      	beq.n	80020dc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80020fa:	2001      	movs	r0, #1
 80020fc:	f000 faba 	bl	8002674 <RCC_Delay>
 8002100:	e01c      	b.n	800213c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002102:	4b0a      	ldr	r3, [pc, #40]	@ (800212c <HAL_RCC_OscConfig+0x274>)
 8002104:	2200      	movs	r2, #0
 8002106:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002108:	f7fe ff64 	bl	8000fd4 <HAL_GetTick>
 800210c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800210e:	e00f      	b.n	8002130 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002110:	f7fe ff60 	bl	8000fd4 <HAL_GetTick>
 8002114:	4602      	mov	r2, r0
 8002116:	693b      	ldr	r3, [r7, #16]
 8002118:	1ad3      	subs	r3, r2, r3
 800211a:	2b02      	cmp	r3, #2
 800211c:	d908      	bls.n	8002130 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800211e:	2303      	movs	r3, #3
 8002120:	e146      	b.n	80023b0 <HAL_RCC_OscConfig+0x4f8>
 8002122:	bf00      	nop
 8002124:	40021000 	.word	0x40021000
 8002128:	42420000 	.word	0x42420000
 800212c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002130:	4b92      	ldr	r3, [pc, #584]	@ (800237c <HAL_RCC_OscConfig+0x4c4>)
 8002132:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002134:	f003 0302 	and.w	r3, r3, #2
 8002138:	2b00      	cmp	r3, #0
 800213a:	d1e9      	bne.n	8002110 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f003 0304 	and.w	r3, r3, #4
 8002144:	2b00      	cmp	r3, #0
 8002146:	f000 80a6 	beq.w	8002296 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800214a:	2300      	movs	r3, #0
 800214c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800214e:	4b8b      	ldr	r3, [pc, #556]	@ (800237c <HAL_RCC_OscConfig+0x4c4>)
 8002150:	69db      	ldr	r3, [r3, #28]
 8002152:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002156:	2b00      	cmp	r3, #0
 8002158:	d10d      	bne.n	8002176 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800215a:	4b88      	ldr	r3, [pc, #544]	@ (800237c <HAL_RCC_OscConfig+0x4c4>)
 800215c:	69db      	ldr	r3, [r3, #28]
 800215e:	4a87      	ldr	r2, [pc, #540]	@ (800237c <HAL_RCC_OscConfig+0x4c4>)
 8002160:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002164:	61d3      	str	r3, [r2, #28]
 8002166:	4b85      	ldr	r3, [pc, #532]	@ (800237c <HAL_RCC_OscConfig+0x4c4>)
 8002168:	69db      	ldr	r3, [r3, #28]
 800216a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800216e:	60bb      	str	r3, [r7, #8]
 8002170:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002172:	2301      	movs	r3, #1
 8002174:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002176:	4b82      	ldr	r3, [pc, #520]	@ (8002380 <HAL_RCC_OscConfig+0x4c8>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800217e:	2b00      	cmp	r3, #0
 8002180:	d118      	bne.n	80021b4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002182:	4b7f      	ldr	r3, [pc, #508]	@ (8002380 <HAL_RCC_OscConfig+0x4c8>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4a7e      	ldr	r2, [pc, #504]	@ (8002380 <HAL_RCC_OscConfig+0x4c8>)
 8002188:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800218c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800218e:	f7fe ff21 	bl	8000fd4 <HAL_GetTick>
 8002192:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002194:	e008      	b.n	80021a8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002196:	f7fe ff1d 	bl	8000fd4 <HAL_GetTick>
 800219a:	4602      	mov	r2, r0
 800219c:	693b      	ldr	r3, [r7, #16]
 800219e:	1ad3      	subs	r3, r2, r3
 80021a0:	2b64      	cmp	r3, #100	@ 0x64
 80021a2:	d901      	bls.n	80021a8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80021a4:	2303      	movs	r3, #3
 80021a6:	e103      	b.n	80023b0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021a8:	4b75      	ldr	r3, [pc, #468]	@ (8002380 <HAL_RCC_OscConfig+0x4c8>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d0f0      	beq.n	8002196 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	68db      	ldr	r3, [r3, #12]
 80021b8:	2b01      	cmp	r3, #1
 80021ba:	d106      	bne.n	80021ca <HAL_RCC_OscConfig+0x312>
 80021bc:	4b6f      	ldr	r3, [pc, #444]	@ (800237c <HAL_RCC_OscConfig+0x4c4>)
 80021be:	6a1b      	ldr	r3, [r3, #32]
 80021c0:	4a6e      	ldr	r2, [pc, #440]	@ (800237c <HAL_RCC_OscConfig+0x4c4>)
 80021c2:	f043 0301 	orr.w	r3, r3, #1
 80021c6:	6213      	str	r3, [r2, #32]
 80021c8:	e02d      	b.n	8002226 <HAL_RCC_OscConfig+0x36e>
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	68db      	ldr	r3, [r3, #12]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d10c      	bne.n	80021ec <HAL_RCC_OscConfig+0x334>
 80021d2:	4b6a      	ldr	r3, [pc, #424]	@ (800237c <HAL_RCC_OscConfig+0x4c4>)
 80021d4:	6a1b      	ldr	r3, [r3, #32]
 80021d6:	4a69      	ldr	r2, [pc, #420]	@ (800237c <HAL_RCC_OscConfig+0x4c4>)
 80021d8:	f023 0301 	bic.w	r3, r3, #1
 80021dc:	6213      	str	r3, [r2, #32]
 80021de:	4b67      	ldr	r3, [pc, #412]	@ (800237c <HAL_RCC_OscConfig+0x4c4>)
 80021e0:	6a1b      	ldr	r3, [r3, #32]
 80021e2:	4a66      	ldr	r2, [pc, #408]	@ (800237c <HAL_RCC_OscConfig+0x4c4>)
 80021e4:	f023 0304 	bic.w	r3, r3, #4
 80021e8:	6213      	str	r3, [r2, #32]
 80021ea:	e01c      	b.n	8002226 <HAL_RCC_OscConfig+0x36e>
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	68db      	ldr	r3, [r3, #12]
 80021f0:	2b05      	cmp	r3, #5
 80021f2:	d10c      	bne.n	800220e <HAL_RCC_OscConfig+0x356>
 80021f4:	4b61      	ldr	r3, [pc, #388]	@ (800237c <HAL_RCC_OscConfig+0x4c4>)
 80021f6:	6a1b      	ldr	r3, [r3, #32]
 80021f8:	4a60      	ldr	r2, [pc, #384]	@ (800237c <HAL_RCC_OscConfig+0x4c4>)
 80021fa:	f043 0304 	orr.w	r3, r3, #4
 80021fe:	6213      	str	r3, [r2, #32]
 8002200:	4b5e      	ldr	r3, [pc, #376]	@ (800237c <HAL_RCC_OscConfig+0x4c4>)
 8002202:	6a1b      	ldr	r3, [r3, #32]
 8002204:	4a5d      	ldr	r2, [pc, #372]	@ (800237c <HAL_RCC_OscConfig+0x4c4>)
 8002206:	f043 0301 	orr.w	r3, r3, #1
 800220a:	6213      	str	r3, [r2, #32]
 800220c:	e00b      	b.n	8002226 <HAL_RCC_OscConfig+0x36e>
 800220e:	4b5b      	ldr	r3, [pc, #364]	@ (800237c <HAL_RCC_OscConfig+0x4c4>)
 8002210:	6a1b      	ldr	r3, [r3, #32]
 8002212:	4a5a      	ldr	r2, [pc, #360]	@ (800237c <HAL_RCC_OscConfig+0x4c4>)
 8002214:	f023 0301 	bic.w	r3, r3, #1
 8002218:	6213      	str	r3, [r2, #32]
 800221a:	4b58      	ldr	r3, [pc, #352]	@ (800237c <HAL_RCC_OscConfig+0x4c4>)
 800221c:	6a1b      	ldr	r3, [r3, #32]
 800221e:	4a57      	ldr	r2, [pc, #348]	@ (800237c <HAL_RCC_OscConfig+0x4c4>)
 8002220:	f023 0304 	bic.w	r3, r3, #4
 8002224:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	68db      	ldr	r3, [r3, #12]
 800222a:	2b00      	cmp	r3, #0
 800222c:	d015      	beq.n	800225a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800222e:	f7fe fed1 	bl	8000fd4 <HAL_GetTick>
 8002232:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002234:	e00a      	b.n	800224c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002236:	f7fe fecd 	bl	8000fd4 <HAL_GetTick>
 800223a:	4602      	mov	r2, r0
 800223c:	693b      	ldr	r3, [r7, #16]
 800223e:	1ad3      	subs	r3, r2, r3
 8002240:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002244:	4293      	cmp	r3, r2
 8002246:	d901      	bls.n	800224c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002248:	2303      	movs	r3, #3
 800224a:	e0b1      	b.n	80023b0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800224c:	4b4b      	ldr	r3, [pc, #300]	@ (800237c <HAL_RCC_OscConfig+0x4c4>)
 800224e:	6a1b      	ldr	r3, [r3, #32]
 8002250:	f003 0302 	and.w	r3, r3, #2
 8002254:	2b00      	cmp	r3, #0
 8002256:	d0ee      	beq.n	8002236 <HAL_RCC_OscConfig+0x37e>
 8002258:	e014      	b.n	8002284 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800225a:	f7fe febb 	bl	8000fd4 <HAL_GetTick>
 800225e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002260:	e00a      	b.n	8002278 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002262:	f7fe feb7 	bl	8000fd4 <HAL_GetTick>
 8002266:	4602      	mov	r2, r0
 8002268:	693b      	ldr	r3, [r7, #16]
 800226a:	1ad3      	subs	r3, r2, r3
 800226c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002270:	4293      	cmp	r3, r2
 8002272:	d901      	bls.n	8002278 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002274:	2303      	movs	r3, #3
 8002276:	e09b      	b.n	80023b0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002278:	4b40      	ldr	r3, [pc, #256]	@ (800237c <HAL_RCC_OscConfig+0x4c4>)
 800227a:	6a1b      	ldr	r3, [r3, #32]
 800227c:	f003 0302 	and.w	r3, r3, #2
 8002280:	2b00      	cmp	r3, #0
 8002282:	d1ee      	bne.n	8002262 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002284:	7dfb      	ldrb	r3, [r7, #23]
 8002286:	2b01      	cmp	r3, #1
 8002288:	d105      	bne.n	8002296 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800228a:	4b3c      	ldr	r3, [pc, #240]	@ (800237c <HAL_RCC_OscConfig+0x4c4>)
 800228c:	69db      	ldr	r3, [r3, #28]
 800228e:	4a3b      	ldr	r2, [pc, #236]	@ (800237c <HAL_RCC_OscConfig+0x4c4>)
 8002290:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002294:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	69db      	ldr	r3, [r3, #28]
 800229a:	2b00      	cmp	r3, #0
 800229c:	f000 8087 	beq.w	80023ae <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80022a0:	4b36      	ldr	r3, [pc, #216]	@ (800237c <HAL_RCC_OscConfig+0x4c4>)
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	f003 030c 	and.w	r3, r3, #12
 80022a8:	2b08      	cmp	r3, #8
 80022aa:	d061      	beq.n	8002370 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	69db      	ldr	r3, [r3, #28]
 80022b0:	2b02      	cmp	r3, #2
 80022b2:	d146      	bne.n	8002342 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022b4:	4b33      	ldr	r3, [pc, #204]	@ (8002384 <HAL_RCC_OscConfig+0x4cc>)
 80022b6:	2200      	movs	r2, #0
 80022b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022ba:	f7fe fe8b 	bl	8000fd4 <HAL_GetTick>
 80022be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022c0:	e008      	b.n	80022d4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022c2:	f7fe fe87 	bl	8000fd4 <HAL_GetTick>
 80022c6:	4602      	mov	r2, r0
 80022c8:	693b      	ldr	r3, [r7, #16]
 80022ca:	1ad3      	subs	r3, r2, r3
 80022cc:	2b02      	cmp	r3, #2
 80022ce:	d901      	bls.n	80022d4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80022d0:	2303      	movs	r3, #3
 80022d2:	e06d      	b.n	80023b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022d4:	4b29      	ldr	r3, [pc, #164]	@ (800237c <HAL_RCC_OscConfig+0x4c4>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d1f0      	bne.n	80022c2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6a1b      	ldr	r3, [r3, #32]
 80022e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80022e8:	d108      	bne.n	80022fc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80022ea:	4b24      	ldr	r3, [pc, #144]	@ (800237c <HAL_RCC_OscConfig+0x4c4>)
 80022ec:	685b      	ldr	r3, [r3, #4]
 80022ee:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	689b      	ldr	r3, [r3, #8]
 80022f6:	4921      	ldr	r1, [pc, #132]	@ (800237c <HAL_RCC_OscConfig+0x4c4>)
 80022f8:	4313      	orrs	r3, r2
 80022fa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80022fc:	4b1f      	ldr	r3, [pc, #124]	@ (800237c <HAL_RCC_OscConfig+0x4c4>)
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6a19      	ldr	r1, [r3, #32]
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800230c:	430b      	orrs	r3, r1
 800230e:	491b      	ldr	r1, [pc, #108]	@ (800237c <HAL_RCC_OscConfig+0x4c4>)
 8002310:	4313      	orrs	r3, r2
 8002312:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002314:	4b1b      	ldr	r3, [pc, #108]	@ (8002384 <HAL_RCC_OscConfig+0x4cc>)
 8002316:	2201      	movs	r2, #1
 8002318:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800231a:	f7fe fe5b 	bl	8000fd4 <HAL_GetTick>
 800231e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002320:	e008      	b.n	8002334 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002322:	f7fe fe57 	bl	8000fd4 <HAL_GetTick>
 8002326:	4602      	mov	r2, r0
 8002328:	693b      	ldr	r3, [r7, #16]
 800232a:	1ad3      	subs	r3, r2, r3
 800232c:	2b02      	cmp	r3, #2
 800232e:	d901      	bls.n	8002334 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002330:	2303      	movs	r3, #3
 8002332:	e03d      	b.n	80023b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002334:	4b11      	ldr	r3, [pc, #68]	@ (800237c <HAL_RCC_OscConfig+0x4c4>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800233c:	2b00      	cmp	r3, #0
 800233e:	d0f0      	beq.n	8002322 <HAL_RCC_OscConfig+0x46a>
 8002340:	e035      	b.n	80023ae <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002342:	4b10      	ldr	r3, [pc, #64]	@ (8002384 <HAL_RCC_OscConfig+0x4cc>)
 8002344:	2200      	movs	r2, #0
 8002346:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002348:	f7fe fe44 	bl	8000fd4 <HAL_GetTick>
 800234c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800234e:	e008      	b.n	8002362 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002350:	f7fe fe40 	bl	8000fd4 <HAL_GetTick>
 8002354:	4602      	mov	r2, r0
 8002356:	693b      	ldr	r3, [r7, #16]
 8002358:	1ad3      	subs	r3, r2, r3
 800235a:	2b02      	cmp	r3, #2
 800235c:	d901      	bls.n	8002362 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800235e:	2303      	movs	r3, #3
 8002360:	e026      	b.n	80023b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002362:	4b06      	ldr	r3, [pc, #24]	@ (800237c <HAL_RCC_OscConfig+0x4c4>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800236a:	2b00      	cmp	r3, #0
 800236c:	d1f0      	bne.n	8002350 <HAL_RCC_OscConfig+0x498>
 800236e:	e01e      	b.n	80023ae <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	69db      	ldr	r3, [r3, #28]
 8002374:	2b01      	cmp	r3, #1
 8002376:	d107      	bne.n	8002388 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002378:	2301      	movs	r3, #1
 800237a:	e019      	b.n	80023b0 <HAL_RCC_OscConfig+0x4f8>
 800237c:	40021000 	.word	0x40021000
 8002380:	40007000 	.word	0x40007000
 8002384:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002388:	4b0b      	ldr	r3, [pc, #44]	@ (80023b8 <HAL_RCC_OscConfig+0x500>)
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6a1b      	ldr	r3, [r3, #32]
 8002398:	429a      	cmp	r2, r3
 800239a:	d106      	bne.n	80023aa <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023a6:	429a      	cmp	r2, r3
 80023a8:	d001      	beq.n	80023ae <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80023aa:	2301      	movs	r3, #1
 80023ac:	e000      	b.n	80023b0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80023ae:	2300      	movs	r3, #0
}
 80023b0:	4618      	mov	r0, r3
 80023b2:	3718      	adds	r7, #24
 80023b4:	46bd      	mov	sp, r7
 80023b6:	bd80      	pop	{r7, pc}
 80023b8:	40021000 	.word	0x40021000

080023bc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b084      	sub	sp, #16
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
 80023c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d101      	bne.n	80023d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80023cc:	2301      	movs	r3, #1
 80023ce:	e0d0      	b.n	8002572 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80023d0:	4b6a      	ldr	r3, [pc, #424]	@ (800257c <HAL_RCC_ClockConfig+0x1c0>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f003 0307 	and.w	r3, r3, #7
 80023d8:	683a      	ldr	r2, [r7, #0]
 80023da:	429a      	cmp	r2, r3
 80023dc:	d910      	bls.n	8002400 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023de:	4b67      	ldr	r3, [pc, #412]	@ (800257c <HAL_RCC_ClockConfig+0x1c0>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f023 0207 	bic.w	r2, r3, #7
 80023e6:	4965      	ldr	r1, [pc, #404]	@ (800257c <HAL_RCC_ClockConfig+0x1c0>)
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	4313      	orrs	r3, r2
 80023ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023ee:	4b63      	ldr	r3, [pc, #396]	@ (800257c <HAL_RCC_ClockConfig+0x1c0>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f003 0307 	and.w	r3, r3, #7
 80023f6:	683a      	ldr	r2, [r7, #0]
 80023f8:	429a      	cmp	r2, r3
 80023fa:	d001      	beq.n	8002400 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80023fc:	2301      	movs	r3, #1
 80023fe:	e0b8      	b.n	8002572 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f003 0302 	and.w	r3, r3, #2
 8002408:	2b00      	cmp	r3, #0
 800240a:	d020      	beq.n	800244e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f003 0304 	and.w	r3, r3, #4
 8002414:	2b00      	cmp	r3, #0
 8002416:	d005      	beq.n	8002424 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002418:	4b59      	ldr	r3, [pc, #356]	@ (8002580 <HAL_RCC_ClockConfig+0x1c4>)
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	4a58      	ldr	r2, [pc, #352]	@ (8002580 <HAL_RCC_ClockConfig+0x1c4>)
 800241e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002422:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f003 0308 	and.w	r3, r3, #8
 800242c:	2b00      	cmp	r3, #0
 800242e:	d005      	beq.n	800243c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002430:	4b53      	ldr	r3, [pc, #332]	@ (8002580 <HAL_RCC_ClockConfig+0x1c4>)
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	4a52      	ldr	r2, [pc, #328]	@ (8002580 <HAL_RCC_ClockConfig+0x1c4>)
 8002436:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800243a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800243c:	4b50      	ldr	r3, [pc, #320]	@ (8002580 <HAL_RCC_ClockConfig+0x1c4>)
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	689b      	ldr	r3, [r3, #8]
 8002448:	494d      	ldr	r1, [pc, #308]	@ (8002580 <HAL_RCC_ClockConfig+0x1c4>)
 800244a:	4313      	orrs	r3, r2
 800244c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f003 0301 	and.w	r3, r3, #1
 8002456:	2b00      	cmp	r3, #0
 8002458:	d040      	beq.n	80024dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	685b      	ldr	r3, [r3, #4]
 800245e:	2b01      	cmp	r3, #1
 8002460:	d107      	bne.n	8002472 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002462:	4b47      	ldr	r3, [pc, #284]	@ (8002580 <HAL_RCC_ClockConfig+0x1c4>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800246a:	2b00      	cmp	r3, #0
 800246c:	d115      	bne.n	800249a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800246e:	2301      	movs	r3, #1
 8002470:	e07f      	b.n	8002572 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	685b      	ldr	r3, [r3, #4]
 8002476:	2b02      	cmp	r3, #2
 8002478:	d107      	bne.n	800248a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800247a:	4b41      	ldr	r3, [pc, #260]	@ (8002580 <HAL_RCC_ClockConfig+0x1c4>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002482:	2b00      	cmp	r3, #0
 8002484:	d109      	bne.n	800249a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002486:	2301      	movs	r3, #1
 8002488:	e073      	b.n	8002572 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800248a:	4b3d      	ldr	r3, [pc, #244]	@ (8002580 <HAL_RCC_ClockConfig+0x1c4>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f003 0302 	and.w	r3, r3, #2
 8002492:	2b00      	cmp	r3, #0
 8002494:	d101      	bne.n	800249a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002496:	2301      	movs	r3, #1
 8002498:	e06b      	b.n	8002572 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800249a:	4b39      	ldr	r3, [pc, #228]	@ (8002580 <HAL_RCC_ClockConfig+0x1c4>)
 800249c:	685b      	ldr	r3, [r3, #4]
 800249e:	f023 0203 	bic.w	r2, r3, #3
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	4936      	ldr	r1, [pc, #216]	@ (8002580 <HAL_RCC_ClockConfig+0x1c4>)
 80024a8:	4313      	orrs	r3, r2
 80024aa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80024ac:	f7fe fd92 	bl	8000fd4 <HAL_GetTick>
 80024b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024b2:	e00a      	b.n	80024ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024b4:	f7fe fd8e 	bl	8000fd4 <HAL_GetTick>
 80024b8:	4602      	mov	r2, r0
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	1ad3      	subs	r3, r2, r3
 80024be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d901      	bls.n	80024ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80024c6:	2303      	movs	r3, #3
 80024c8:	e053      	b.n	8002572 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024ca:	4b2d      	ldr	r3, [pc, #180]	@ (8002580 <HAL_RCC_ClockConfig+0x1c4>)
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	f003 020c 	and.w	r2, r3, #12
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	685b      	ldr	r3, [r3, #4]
 80024d6:	009b      	lsls	r3, r3, #2
 80024d8:	429a      	cmp	r2, r3
 80024da:	d1eb      	bne.n	80024b4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80024dc:	4b27      	ldr	r3, [pc, #156]	@ (800257c <HAL_RCC_ClockConfig+0x1c0>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f003 0307 	and.w	r3, r3, #7
 80024e4:	683a      	ldr	r2, [r7, #0]
 80024e6:	429a      	cmp	r2, r3
 80024e8:	d210      	bcs.n	800250c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024ea:	4b24      	ldr	r3, [pc, #144]	@ (800257c <HAL_RCC_ClockConfig+0x1c0>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f023 0207 	bic.w	r2, r3, #7
 80024f2:	4922      	ldr	r1, [pc, #136]	@ (800257c <HAL_RCC_ClockConfig+0x1c0>)
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	4313      	orrs	r3, r2
 80024f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024fa:	4b20      	ldr	r3, [pc, #128]	@ (800257c <HAL_RCC_ClockConfig+0x1c0>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f003 0307 	and.w	r3, r3, #7
 8002502:	683a      	ldr	r2, [r7, #0]
 8002504:	429a      	cmp	r2, r3
 8002506:	d001      	beq.n	800250c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002508:	2301      	movs	r3, #1
 800250a:	e032      	b.n	8002572 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f003 0304 	and.w	r3, r3, #4
 8002514:	2b00      	cmp	r3, #0
 8002516:	d008      	beq.n	800252a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002518:	4b19      	ldr	r3, [pc, #100]	@ (8002580 <HAL_RCC_ClockConfig+0x1c4>)
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	68db      	ldr	r3, [r3, #12]
 8002524:	4916      	ldr	r1, [pc, #88]	@ (8002580 <HAL_RCC_ClockConfig+0x1c4>)
 8002526:	4313      	orrs	r3, r2
 8002528:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f003 0308 	and.w	r3, r3, #8
 8002532:	2b00      	cmp	r3, #0
 8002534:	d009      	beq.n	800254a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002536:	4b12      	ldr	r3, [pc, #72]	@ (8002580 <HAL_RCC_ClockConfig+0x1c4>)
 8002538:	685b      	ldr	r3, [r3, #4]
 800253a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	691b      	ldr	r3, [r3, #16]
 8002542:	00db      	lsls	r3, r3, #3
 8002544:	490e      	ldr	r1, [pc, #56]	@ (8002580 <HAL_RCC_ClockConfig+0x1c4>)
 8002546:	4313      	orrs	r3, r2
 8002548:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800254a:	f000 f821 	bl	8002590 <HAL_RCC_GetSysClockFreq>
 800254e:	4602      	mov	r2, r0
 8002550:	4b0b      	ldr	r3, [pc, #44]	@ (8002580 <HAL_RCC_ClockConfig+0x1c4>)
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	091b      	lsrs	r3, r3, #4
 8002556:	f003 030f 	and.w	r3, r3, #15
 800255a:	490a      	ldr	r1, [pc, #40]	@ (8002584 <HAL_RCC_ClockConfig+0x1c8>)
 800255c:	5ccb      	ldrb	r3, [r1, r3]
 800255e:	fa22 f303 	lsr.w	r3, r2, r3
 8002562:	4a09      	ldr	r2, [pc, #36]	@ (8002588 <HAL_RCC_ClockConfig+0x1cc>)
 8002564:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002566:	4b09      	ldr	r3, [pc, #36]	@ (800258c <HAL_RCC_ClockConfig+0x1d0>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4618      	mov	r0, r3
 800256c:	f7fe fcf0 	bl	8000f50 <HAL_InitTick>

  return HAL_OK;
 8002570:	2300      	movs	r3, #0
}
 8002572:	4618      	mov	r0, r3
 8002574:	3710      	adds	r7, #16
 8002576:	46bd      	mov	sp, r7
 8002578:	bd80      	pop	{r7, pc}
 800257a:	bf00      	nop
 800257c:	40022000 	.word	0x40022000
 8002580:	40021000 	.word	0x40021000
 8002584:	08004b48 	.word	0x08004b48
 8002588:	20000000 	.word	0x20000000
 800258c:	20000004 	.word	0x20000004

08002590 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002590:	b480      	push	{r7}
 8002592:	b087      	sub	sp, #28
 8002594:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002596:	2300      	movs	r3, #0
 8002598:	60fb      	str	r3, [r7, #12]
 800259a:	2300      	movs	r3, #0
 800259c:	60bb      	str	r3, [r7, #8]
 800259e:	2300      	movs	r3, #0
 80025a0:	617b      	str	r3, [r7, #20]
 80025a2:	2300      	movs	r3, #0
 80025a4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80025a6:	2300      	movs	r3, #0
 80025a8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80025aa:	4b1e      	ldr	r3, [pc, #120]	@ (8002624 <HAL_RCC_GetSysClockFreq+0x94>)
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	f003 030c 	and.w	r3, r3, #12
 80025b6:	2b04      	cmp	r3, #4
 80025b8:	d002      	beq.n	80025c0 <HAL_RCC_GetSysClockFreq+0x30>
 80025ba:	2b08      	cmp	r3, #8
 80025bc:	d003      	beq.n	80025c6 <HAL_RCC_GetSysClockFreq+0x36>
 80025be:	e027      	b.n	8002610 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80025c0:	4b19      	ldr	r3, [pc, #100]	@ (8002628 <HAL_RCC_GetSysClockFreq+0x98>)
 80025c2:	613b      	str	r3, [r7, #16]
      break;
 80025c4:	e027      	b.n	8002616 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	0c9b      	lsrs	r3, r3, #18
 80025ca:	f003 030f 	and.w	r3, r3, #15
 80025ce:	4a17      	ldr	r2, [pc, #92]	@ (800262c <HAL_RCC_GetSysClockFreq+0x9c>)
 80025d0:	5cd3      	ldrb	r3, [r2, r3]
 80025d2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d010      	beq.n	8002600 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80025de:	4b11      	ldr	r3, [pc, #68]	@ (8002624 <HAL_RCC_GetSysClockFreq+0x94>)
 80025e0:	685b      	ldr	r3, [r3, #4]
 80025e2:	0c5b      	lsrs	r3, r3, #17
 80025e4:	f003 0301 	and.w	r3, r3, #1
 80025e8:	4a11      	ldr	r2, [pc, #68]	@ (8002630 <HAL_RCC_GetSysClockFreq+0xa0>)
 80025ea:	5cd3      	ldrb	r3, [r2, r3]
 80025ec:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	4a0d      	ldr	r2, [pc, #52]	@ (8002628 <HAL_RCC_GetSysClockFreq+0x98>)
 80025f2:	fb03 f202 	mul.w	r2, r3, r2
 80025f6:	68bb      	ldr	r3, [r7, #8]
 80025f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80025fc:	617b      	str	r3, [r7, #20]
 80025fe:	e004      	b.n	800260a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	4a0c      	ldr	r2, [pc, #48]	@ (8002634 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002604:	fb02 f303 	mul.w	r3, r2, r3
 8002608:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800260a:	697b      	ldr	r3, [r7, #20]
 800260c:	613b      	str	r3, [r7, #16]
      break;
 800260e:	e002      	b.n	8002616 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002610:	4b05      	ldr	r3, [pc, #20]	@ (8002628 <HAL_RCC_GetSysClockFreq+0x98>)
 8002612:	613b      	str	r3, [r7, #16]
      break;
 8002614:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002616:	693b      	ldr	r3, [r7, #16]
}
 8002618:	4618      	mov	r0, r3
 800261a:	371c      	adds	r7, #28
 800261c:	46bd      	mov	sp, r7
 800261e:	bc80      	pop	{r7}
 8002620:	4770      	bx	lr
 8002622:	bf00      	nop
 8002624:	40021000 	.word	0x40021000
 8002628:	007a1200 	.word	0x007a1200
 800262c:	08004b60 	.word	0x08004b60
 8002630:	08004b70 	.word	0x08004b70
 8002634:	003d0900 	.word	0x003d0900

08002638 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002638:	b480      	push	{r7}
 800263a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800263c:	4b02      	ldr	r3, [pc, #8]	@ (8002648 <HAL_RCC_GetHCLKFreq+0x10>)
 800263e:	681b      	ldr	r3, [r3, #0]
}
 8002640:	4618      	mov	r0, r3
 8002642:	46bd      	mov	sp, r7
 8002644:	bc80      	pop	{r7}
 8002646:	4770      	bx	lr
 8002648:	20000000 	.word	0x20000000

0800264c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002650:	f7ff fff2 	bl	8002638 <HAL_RCC_GetHCLKFreq>
 8002654:	4602      	mov	r2, r0
 8002656:	4b05      	ldr	r3, [pc, #20]	@ (800266c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002658:	685b      	ldr	r3, [r3, #4]
 800265a:	0a1b      	lsrs	r3, r3, #8
 800265c:	f003 0307 	and.w	r3, r3, #7
 8002660:	4903      	ldr	r1, [pc, #12]	@ (8002670 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002662:	5ccb      	ldrb	r3, [r1, r3]
 8002664:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002668:	4618      	mov	r0, r3
 800266a:	bd80      	pop	{r7, pc}
 800266c:	40021000 	.word	0x40021000
 8002670:	08004b58 	.word	0x08004b58

08002674 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002674:	b480      	push	{r7}
 8002676:	b085      	sub	sp, #20
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800267c:	4b0a      	ldr	r3, [pc, #40]	@ (80026a8 <RCC_Delay+0x34>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4a0a      	ldr	r2, [pc, #40]	@ (80026ac <RCC_Delay+0x38>)
 8002682:	fba2 2303 	umull	r2, r3, r2, r3
 8002686:	0a5b      	lsrs	r3, r3, #9
 8002688:	687a      	ldr	r2, [r7, #4]
 800268a:	fb02 f303 	mul.w	r3, r2, r3
 800268e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002690:	bf00      	nop
  }
  while (Delay --);
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	1e5a      	subs	r2, r3, #1
 8002696:	60fa      	str	r2, [r7, #12]
 8002698:	2b00      	cmp	r3, #0
 800269a:	d1f9      	bne.n	8002690 <RCC_Delay+0x1c>
}
 800269c:	bf00      	nop
 800269e:	bf00      	nop
 80026a0:	3714      	adds	r7, #20
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bc80      	pop	{r7}
 80026a6:	4770      	bx	lr
 80026a8:	20000000 	.word	0x20000000
 80026ac:	10624dd3 	.word	0x10624dd3

080026b0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b082      	sub	sp, #8
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d101      	bne.n	80026c2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80026be:	2301      	movs	r3, #1
 80026c0:	e041      	b.n	8002746 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80026c8:	b2db      	uxtb	r3, r3
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d106      	bne.n	80026dc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	2200      	movs	r2, #0
 80026d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80026d6:	6878      	ldr	r0, [r7, #4]
 80026d8:	f7fe fb78 	bl	8000dcc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2202      	movs	r2, #2
 80026e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681a      	ldr	r2, [r3, #0]
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	3304      	adds	r3, #4
 80026ec:	4619      	mov	r1, r3
 80026ee:	4610      	mov	r0, r2
 80026f0:	f000 f940 	bl	8002974 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2201      	movs	r2, #1
 80026f8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2201      	movs	r2, #1
 8002700:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2201      	movs	r2, #1
 8002708:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2201      	movs	r2, #1
 8002710:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2201      	movs	r2, #1
 8002718:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2201      	movs	r2, #1
 8002720:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2201      	movs	r2, #1
 8002728:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2201      	movs	r2, #1
 8002730:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2201      	movs	r2, #1
 8002738:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2201      	movs	r2, #1
 8002740:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002744:	2300      	movs	r3, #0
}
 8002746:	4618      	mov	r0, r3
 8002748:	3708      	adds	r7, #8
 800274a:	46bd      	mov	sp, r7
 800274c:	bd80      	pop	{r7, pc}
	...

08002750 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002750:	b480      	push	{r7}
 8002752:	b085      	sub	sp, #20
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800275e:	b2db      	uxtb	r3, r3
 8002760:	2b01      	cmp	r3, #1
 8002762:	d001      	beq.n	8002768 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002764:	2301      	movs	r3, #1
 8002766:	e032      	b.n	80027ce <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2202      	movs	r2, #2
 800276c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	4a18      	ldr	r2, [pc, #96]	@ (80027d8 <HAL_TIM_Base_Start+0x88>)
 8002776:	4293      	cmp	r3, r2
 8002778:	d00e      	beq.n	8002798 <HAL_TIM_Base_Start+0x48>
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002782:	d009      	beq.n	8002798 <HAL_TIM_Base_Start+0x48>
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4a14      	ldr	r2, [pc, #80]	@ (80027dc <HAL_TIM_Base_Start+0x8c>)
 800278a:	4293      	cmp	r3, r2
 800278c:	d004      	beq.n	8002798 <HAL_TIM_Base_Start+0x48>
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	4a13      	ldr	r2, [pc, #76]	@ (80027e0 <HAL_TIM_Base_Start+0x90>)
 8002794:	4293      	cmp	r3, r2
 8002796:	d111      	bne.n	80027bc <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	689b      	ldr	r3, [r3, #8]
 800279e:	f003 0307 	and.w	r3, r3, #7
 80027a2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	2b06      	cmp	r3, #6
 80027a8:	d010      	beq.n	80027cc <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	681a      	ldr	r2, [r3, #0]
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f042 0201 	orr.w	r2, r2, #1
 80027b8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80027ba:	e007      	b.n	80027cc <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	681a      	ldr	r2, [r3, #0]
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f042 0201 	orr.w	r2, r2, #1
 80027ca:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80027cc:	2300      	movs	r3, #0
}
 80027ce:	4618      	mov	r0, r3
 80027d0:	3714      	adds	r7, #20
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bc80      	pop	{r7}
 80027d6:	4770      	bx	lr
 80027d8:	40012c00 	.word	0x40012c00
 80027dc:	40000400 	.word	0x40000400
 80027e0:	40000800 	.word	0x40000800

080027e4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b084      	sub	sp, #16
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
 80027ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80027ee:	2300      	movs	r3, #0
 80027f0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80027f8:	2b01      	cmp	r3, #1
 80027fa:	d101      	bne.n	8002800 <HAL_TIM_ConfigClockSource+0x1c>
 80027fc:	2302      	movs	r3, #2
 80027fe:	e0b4      	b.n	800296a <HAL_TIM_ConfigClockSource+0x186>
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2201      	movs	r2, #1
 8002804:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2202      	movs	r2, #2
 800280c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	689b      	ldr	r3, [r3, #8]
 8002816:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002818:	68bb      	ldr	r3, [r7, #8]
 800281a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800281e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002820:	68bb      	ldr	r3, [r7, #8]
 8002822:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002826:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	68ba      	ldr	r2, [r7, #8]
 800282e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002838:	d03e      	beq.n	80028b8 <HAL_TIM_ConfigClockSource+0xd4>
 800283a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800283e:	f200 8087 	bhi.w	8002950 <HAL_TIM_ConfigClockSource+0x16c>
 8002842:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002846:	f000 8086 	beq.w	8002956 <HAL_TIM_ConfigClockSource+0x172>
 800284a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800284e:	d87f      	bhi.n	8002950 <HAL_TIM_ConfigClockSource+0x16c>
 8002850:	2b70      	cmp	r3, #112	@ 0x70
 8002852:	d01a      	beq.n	800288a <HAL_TIM_ConfigClockSource+0xa6>
 8002854:	2b70      	cmp	r3, #112	@ 0x70
 8002856:	d87b      	bhi.n	8002950 <HAL_TIM_ConfigClockSource+0x16c>
 8002858:	2b60      	cmp	r3, #96	@ 0x60
 800285a:	d050      	beq.n	80028fe <HAL_TIM_ConfigClockSource+0x11a>
 800285c:	2b60      	cmp	r3, #96	@ 0x60
 800285e:	d877      	bhi.n	8002950 <HAL_TIM_ConfigClockSource+0x16c>
 8002860:	2b50      	cmp	r3, #80	@ 0x50
 8002862:	d03c      	beq.n	80028de <HAL_TIM_ConfigClockSource+0xfa>
 8002864:	2b50      	cmp	r3, #80	@ 0x50
 8002866:	d873      	bhi.n	8002950 <HAL_TIM_ConfigClockSource+0x16c>
 8002868:	2b40      	cmp	r3, #64	@ 0x40
 800286a:	d058      	beq.n	800291e <HAL_TIM_ConfigClockSource+0x13a>
 800286c:	2b40      	cmp	r3, #64	@ 0x40
 800286e:	d86f      	bhi.n	8002950 <HAL_TIM_ConfigClockSource+0x16c>
 8002870:	2b30      	cmp	r3, #48	@ 0x30
 8002872:	d064      	beq.n	800293e <HAL_TIM_ConfigClockSource+0x15a>
 8002874:	2b30      	cmp	r3, #48	@ 0x30
 8002876:	d86b      	bhi.n	8002950 <HAL_TIM_ConfigClockSource+0x16c>
 8002878:	2b20      	cmp	r3, #32
 800287a:	d060      	beq.n	800293e <HAL_TIM_ConfigClockSource+0x15a>
 800287c:	2b20      	cmp	r3, #32
 800287e:	d867      	bhi.n	8002950 <HAL_TIM_ConfigClockSource+0x16c>
 8002880:	2b00      	cmp	r3, #0
 8002882:	d05c      	beq.n	800293e <HAL_TIM_ConfigClockSource+0x15a>
 8002884:	2b10      	cmp	r3, #16
 8002886:	d05a      	beq.n	800293e <HAL_TIM_ConfigClockSource+0x15a>
 8002888:	e062      	b.n	8002950 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800289a:	f000 f950 	bl	8002b3e <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	689b      	ldr	r3, [r3, #8]
 80028a4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80028a6:	68bb      	ldr	r3, [r7, #8]
 80028a8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80028ac:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	68ba      	ldr	r2, [r7, #8]
 80028b4:	609a      	str	r2, [r3, #8]
      break;
 80028b6:	e04f      	b.n	8002958 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80028c8:	f000 f939 	bl	8002b3e <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	689a      	ldr	r2, [r3, #8]
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80028da:	609a      	str	r2, [r3, #8]
      break;
 80028dc:	e03c      	b.n	8002958 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80028ea:	461a      	mov	r2, r3
 80028ec:	f000 f8b0 	bl	8002a50 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	2150      	movs	r1, #80	@ 0x50
 80028f6:	4618      	mov	r0, r3
 80028f8:	f000 f907 	bl	8002b0a <TIM_ITRx_SetConfig>
      break;
 80028fc:	e02c      	b.n	8002958 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800290a:	461a      	mov	r2, r3
 800290c:	f000 f8ce 	bl	8002aac <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	2160      	movs	r1, #96	@ 0x60
 8002916:	4618      	mov	r0, r3
 8002918:	f000 f8f7 	bl	8002b0a <TIM_ITRx_SetConfig>
      break;
 800291c:	e01c      	b.n	8002958 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800292a:	461a      	mov	r2, r3
 800292c:	f000 f890 	bl	8002a50 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	2140      	movs	r1, #64	@ 0x40
 8002936:	4618      	mov	r0, r3
 8002938:	f000 f8e7 	bl	8002b0a <TIM_ITRx_SetConfig>
      break;
 800293c:	e00c      	b.n	8002958 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681a      	ldr	r2, [r3, #0]
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4619      	mov	r1, r3
 8002948:	4610      	mov	r0, r2
 800294a:	f000 f8de 	bl	8002b0a <TIM_ITRx_SetConfig>
      break;
 800294e:	e003      	b.n	8002958 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002950:	2301      	movs	r3, #1
 8002952:	73fb      	strb	r3, [r7, #15]
      break;
 8002954:	e000      	b.n	8002958 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002956:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2201      	movs	r2, #1
 800295c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2200      	movs	r2, #0
 8002964:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002968:	7bfb      	ldrb	r3, [r7, #15]
}
 800296a:	4618      	mov	r0, r3
 800296c:	3710      	adds	r7, #16
 800296e:	46bd      	mov	sp, r7
 8002970:	bd80      	pop	{r7, pc}
	...

08002974 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002974:	b480      	push	{r7}
 8002976:	b085      	sub	sp, #20
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
 800297c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	4a2f      	ldr	r2, [pc, #188]	@ (8002a44 <TIM_Base_SetConfig+0xd0>)
 8002988:	4293      	cmp	r3, r2
 800298a:	d00b      	beq.n	80029a4 <TIM_Base_SetConfig+0x30>
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002992:	d007      	beq.n	80029a4 <TIM_Base_SetConfig+0x30>
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	4a2c      	ldr	r2, [pc, #176]	@ (8002a48 <TIM_Base_SetConfig+0xd4>)
 8002998:	4293      	cmp	r3, r2
 800299a:	d003      	beq.n	80029a4 <TIM_Base_SetConfig+0x30>
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	4a2b      	ldr	r2, [pc, #172]	@ (8002a4c <TIM_Base_SetConfig+0xd8>)
 80029a0:	4293      	cmp	r3, r2
 80029a2:	d108      	bne.n	80029b6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80029aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	685b      	ldr	r3, [r3, #4]
 80029b0:	68fa      	ldr	r2, [r7, #12]
 80029b2:	4313      	orrs	r3, r2
 80029b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	4a22      	ldr	r2, [pc, #136]	@ (8002a44 <TIM_Base_SetConfig+0xd0>)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d00b      	beq.n	80029d6 <TIM_Base_SetConfig+0x62>
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80029c4:	d007      	beq.n	80029d6 <TIM_Base_SetConfig+0x62>
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	4a1f      	ldr	r2, [pc, #124]	@ (8002a48 <TIM_Base_SetConfig+0xd4>)
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d003      	beq.n	80029d6 <TIM_Base_SetConfig+0x62>
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	4a1e      	ldr	r2, [pc, #120]	@ (8002a4c <TIM_Base_SetConfig+0xd8>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d108      	bne.n	80029e8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80029dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	68db      	ldr	r3, [r3, #12]
 80029e2:	68fa      	ldr	r2, [r7, #12]
 80029e4:	4313      	orrs	r3, r2
 80029e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	695b      	ldr	r3, [r3, #20]
 80029f2:	4313      	orrs	r3, r2
 80029f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	68fa      	ldr	r2, [r7, #12]
 80029fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	689a      	ldr	r2, [r3, #8]
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	681a      	ldr	r2, [r3, #0]
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	4a0d      	ldr	r2, [pc, #52]	@ (8002a44 <TIM_Base_SetConfig+0xd0>)
 8002a10:	4293      	cmp	r3, r2
 8002a12:	d103      	bne.n	8002a1c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	691a      	ldr	r2, [r3, #16]
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2201      	movs	r2, #1
 8002a20:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	691b      	ldr	r3, [r3, #16]
 8002a26:	f003 0301 	and.w	r3, r3, #1
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d005      	beq.n	8002a3a <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	691b      	ldr	r3, [r3, #16]
 8002a32:	f023 0201 	bic.w	r2, r3, #1
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	611a      	str	r2, [r3, #16]
  }
}
 8002a3a:	bf00      	nop
 8002a3c:	3714      	adds	r7, #20
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bc80      	pop	{r7}
 8002a42:	4770      	bx	lr
 8002a44:	40012c00 	.word	0x40012c00
 8002a48:	40000400 	.word	0x40000400
 8002a4c:	40000800 	.word	0x40000800

08002a50 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002a50:	b480      	push	{r7}
 8002a52:	b087      	sub	sp, #28
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	60f8      	str	r0, [r7, #12]
 8002a58:	60b9      	str	r1, [r7, #8]
 8002a5a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	6a1b      	ldr	r3, [r3, #32]
 8002a60:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	6a1b      	ldr	r3, [r3, #32]
 8002a66:	f023 0201 	bic.w	r2, r3, #1
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	699b      	ldr	r3, [r3, #24]
 8002a72:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002a74:	693b      	ldr	r3, [r7, #16]
 8002a76:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002a7a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	011b      	lsls	r3, r3, #4
 8002a80:	693a      	ldr	r2, [r7, #16]
 8002a82:	4313      	orrs	r3, r2
 8002a84:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002a86:	697b      	ldr	r3, [r7, #20]
 8002a88:	f023 030a 	bic.w	r3, r3, #10
 8002a8c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002a8e:	697a      	ldr	r2, [r7, #20]
 8002a90:	68bb      	ldr	r3, [r7, #8]
 8002a92:	4313      	orrs	r3, r2
 8002a94:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	693a      	ldr	r2, [r7, #16]
 8002a9a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	697a      	ldr	r2, [r7, #20]
 8002aa0:	621a      	str	r2, [r3, #32]
}
 8002aa2:	bf00      	nop
 8002aa4:	371c      	adds	r7, #28
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bc80      	pop	{r7}
 8002aaa:	4770      	bx	lr

08002aac <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002aac:	b480      	push	{r7}
 8002aae:	b087      	sub	sp, #28
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	60f8      	str	r0, [r7, #12]
 8002ab4:	60b9      	str	r1, [r7, #8]
 8002ab6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	6a1b      	ldr	r3, [r3, #32]
 8002abc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	6a1b      	ldr	r3, [r3, #32]
 8002ac2:	f023 0210 	bic.w	r2, r3, #16
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	699b      	ldr	r3, [r3, #24]
 8002ace:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002ad0:	693b      	ldr	r3, [r7, #16]
 8002ad2:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002ad6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	031b      	lsls	r3, r3, #12
 8002adc:	693a      	ldr	r2, [r7, #16]
 8002ade:	4313      	orrs	r3, r2
 8002ae0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002ae2:	697b      	ldr	r3, [r7, #20]
 8002ae4:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002ae8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002aea:	68bb      	ldr	r3, [r7, #8]
 8002aec:	011b      	lsls	r3, r3, #4
 8002aee:	697a      	ldr	r2, [r7, #20]
 8002af0:	4313      	orrs	r3, r2
 8002af2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	693a      	ldr	r2, [r7, #16]
 8002af8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	697a      	ldr	r2, [r7, #20]
 8002afe:	621a      	str	r2, [r3, #32]
}
 8002b00:	bf00      	nop
 8002b02:	371c      	adds	r7, #28
 8002b04:	46bd      	mov	sp, r7
 8002b06:	bc80      	pop	{r7}
 8002b08:	4770      	bx	lr

08002b0a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002b0a:	b480      	push	{r7}
 8002b0c:	b085      	sub	sp, #20
 8002b0e:	af00      	add	r7, sp, #0
 8002b10:	6078      	str	r0, [r7, #4]
 8002b12:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	689b      	ldr	r3, [r3, #8]
 8002b18:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002b20:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002b22:	683a      	ldr	r2, [r7, #0]
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	4313      	orrs	r3, r2
 8002b28:	f043 0307 	orr.w	r3, r3, #7
 8002b2c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	68fa      	ldr	r2, [r7, #12]
 8002b32:	609a      	str	r2, [r3, #8]
}
 8002b34:	bf00      	nop
 8002b36:	3714      	adds	r7, #20
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	bc80      	pop	{r7}
 8002b3c:	4770      	bx	lr

08002b3e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002b3e:	b480      	push	{r7}
 8002b40:	b087      	sub	sp, #28
 8002b42:	af00      	add	r7, sp, #0
 8002b44:	60f8      	str	r0, [r7, #12]
 8002b46:	60b9      	str	r1, [r7, #8]
 8002b48:	607a      	str	r2, [r7, #4]
 8002b4a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	689b      	ldr	r3, [r3, #8]
 8002b50:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002b52:	697b      	ldr	r3, [r7, #20]
 8002b54:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002b58:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	021a      	lsls	r2, r3, #8
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	431a      	orrs	r2, r3
 8002b62:	68bb      	ldr	r3, [r7, #8]
 8002b64:	4313      	orrs	r3, r2
 8002b66:	697a      	ldr	r2, [r7, #20]
 8002b68:	4313      	orrs	r3, r2
 8002b6a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	697a      	ldr	r2, [r7, #20]
 8002b70:	609a      	str	r2, [r3, #8]
}
 8002b72:	bf00      	nop
 8002b74:	371c      	adds	r7, #28
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bc80      	pop	{r7}
 8002b7a:	4770      	bx	lr

08002b7c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	b085      	sub	sp, #20
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
 8002b84:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002b8c:	2b01      	cmp	r3, #1
 8002b8e:	d101      	bne.n	8002b94 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002b90:	2302      	movs	r3, #2
 8002b92:	e046      	b.n	8002c22 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2201      	movs	r2, #1
 8002b98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2202      	movs	r2, #2
 8002ba0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	689b      	ldr	r3, [r3, #8]
 8002bb2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002bba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	68fa      	ldr	r2, [r7, #12]
 8002bc2:	4313      	orrs	r3, r2
 8002bc4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	68fa      	ldr	r2, [r7, #12]
 8002bcc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4a16      	ldr	r2, [pc, #88]	@ (8002c2c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002bd4:	4293      	cmp	r3, r2
 8002bd6:	d00e      	beq.n	8002bf6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002be0:	d009      	beq.n	8002bf6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4a12      	ldr	r2, [pc, #72]	@ (8002c30 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002be8:	4293      	cmp	r3, r2
 8002bea:	d004      	beq.n	8002bf6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4a10      	ldr	r2, [pc, #64]	@ (8002c34 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d10c      	bne.n	8002c10 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002bf6:	68bb      	ldr	r3, [r7, #8]
 8002bf8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002bfc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	68ba      	ldr	r2, [r7, #8]
 8002c04:	4313      	orrs	r3, r2
 8002c06:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	68ba      	ldr	r2, [r7, #8]
 8002c0e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2201      	movs	r2, #1
 8002c14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002c20:	2300      	movs	r3, #0
}
 8002c22:	4618      	mov	r0, r3
 8002c24:	3714      	adds	r7, #20
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bc80      	pop	{r7}
 8002c2a:	4770      	bx	lr
 8002c2c:	40012c00 	.word	0x40012c00
 8002c30:	40000400 	.word	0x40000400
 8002c34:	40000800 	.word	0x40000800

08002c38 <siprintf>:
 8002c38:	b40e      	push	{r1, r2, r3}
 8002c3a:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8002c3e:	b510      	push	{r4, lr}
 8002c40:	2400      	movs	r4, #0
 8002c42:	b09d      	sub	sp, #116	@ 0x74
 8002c44:	ab1f      	add	r3, sp, #124	@ 0x7c
 8002c46:	9002      	str	r0, [sp, #8]
 8002c48:	9006      	str	r0, [sp, #24]
 8002c4a:	9107      	str	r1, [sp, #28]
 8002c4c:	9104      	str	r1, [sp, #16]
 8002c4e:	4809      	ldr	r0, [pc, #36]	@ (8002c74 <siprintf+0x3c>)
 8002c50:	4909      	ldr	r1, [pc, #36]	@ (8002c78 <siprintf+0x40>)
 8002c52:	f853 2b04 	ldr.w	r2, [r3], #4
 8002c56:	9105      	str	r1, [sp, #20]
 8002c58:	6800      	ldr	r0, [r0, #0]
 8002c5a:	a902      	add	r1, sp, #8
 8002c5c:	9301      	str	r3, [sp, #4]
 8002c5e:	941b      	str	r4, [sp, #108]	@ 0x6c
 8002c60:	f000 f9a0 	bl	8002fa4 <_svfiprintf_r>
 8002c64:	9b02      	ldr	r3, [sp, #8]
 8002c66:	701c      	strb	r4, [r3, #0]
 8002c68:	b01d      	add	sp, #116	@ 0x74
 8002c6a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002c6e:	b003      	add	sp, #12
 8002c70:	4770      	bx	lr
 8002c72:	bf00      	nop
 8002c74:	2000000c 	.word	0x2000000c
 8002c78:	ffff0208 	.word	0xffff0208

08002c7c <memset>:
 8002c7c:	4603      	mov	r3, r0
 8002c7e:	4402      	add	r2, r0
 8002c80:	4293      	cmp	r3, r2
 8002c82:	d100      	bne.n	8002c86 <memset+0xa>
 8002c84:	4770      	bx	lr
 8002c86:	f803 1b01 	strb.w	r1, [r3], #1
 8002c8a:	e7f9      	b.n	8002c80 <memset+0x4>

08002c8c <__errno>:
 8002c8c:	4b01      	ldr	r3, [pc, #4]	@ (8002c94 <__errno+0x8>)
 8002c8e:	6818      	ldr	r0, [r3, #0]
 8002c90:	4770      	bx	lr
 8002c92:	bf00      	nop
 8002c94:	2000000c 	.word	0x2000000c

08002c98 <__libc_init_array>:
 8002c98:	b570      	push	{r4, r5, r6, lr}
 8002c9a:	2600      	movs	r6, #0
 8002c9c:	4d0c      	ldr	r5, [pc, #48]	@ (8002cd0 <__libc_init_array+0x38>)
 8002c9e:	4c0d      	ldr	r4, [pc, #52]	@ (8002cd4 <__libc_init_array+0x3c>)
 8002ca0:	1b64      	subs	r4, r4, r5
 8002ca2:	10a4      	asrs	r4, r4, #2
 8002ca4:	42a6      	cmp	r6, r4
 8002ca6:	d109      	bne.n	8002cbc <__libc_init_array+0x24>
 8002ca8:	f000 fc76 	bl	8003598 <_init>
 8002cac:	2600      	movs	r6, #0
 8002cae:	4d0a      	ldr	r5, [pc, #40]	@ (8002cd8 <__libc_init_array+0x40>)
 8002cb0:	4c0a      	ldr	r4, [pc, #40]	@ (8002cdc <__libc_init_array+0x44>)
 8002cb2:	1b64      	subs	r4, r4, r5
 8002cb4:	10a4      	asrs	r4, r4, #2
 8002cb6:	42a6      	cmp	r6, r4
 8002cb8:	d105      	bne.n	8002cc6 <__libc_init_array+0x2e>
 8002cba:	bd70      	pop	{r4, r5, r6, pc}
 8002cbc:	f855 3b04 	ldr.w	r3, [r5], #4
 8002cc0:	4798      	blx	r3
 8002cc2:	3601      	adds	r6, #1
 8002cc4:	e7ee      	b.n	8002ca4 <__libc_init_array+0xc>
 8002cc6:	f855 3b04 	ldr.w	r3, [r5], #4
 8002cca:	4798      	blx	r3
 8002ccc:	3601      	adds	r6, #1
 8002cce:	e7f2      	b.n	8002cb6 <__libc_init_array+0x1e>
 8002cd0:	08004ba8 	.word	0x08004ba8
 8002cd4:	08004ba8 	.word	0x08004ba8
 8002cd8:	08004ba8 	.word	0x08004ba8
 8002cdc:	08004bac 	.word	0x08004bac

08002ce0 <__retarget_lock_acquire_recursive>:
 8002ce0:	4770      	bx	lr

08002ce2 <__retarget_lock_release_recursive>:
 8002ce2:	4770      	bx	lr

08002ce4 <memcpy>:
 8002ce4:	440a      	add	r2, r1
 8002ce6:	4291      	cmp	r1, r2
 8002ce8:	f100 33ff 	add.w	r3, r0, #4294967295
 8002cec:	d100      	bne.n	8002cf0 <memcpy+0xc>
 8002cee:	4770      	bx	lr
 8002cf0:	b510      	push	{r4, lr}
 8002cf2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002cf6:	4291      	cmp	r1, r2
 8002cf8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002cfc:	d1f9      	bne.n	8002cf2 <memcpy+0xe>
 8002cfe:	bd10      	pop	{r4, pc}

08002d00 <_free_r>:
 8002d00:	b538      	push	{r3, r4, r5, lr}
 8002d02:	4605      	mov	r5, r0
 8002d04:	2900      	cmp	r1, #0
 8002d06:	d040      	beq.n	8002d8a <_free_r+0x8a>
 8002d08:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002d0c:	1f0c      	subs	r4, r1, #4
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	bfb8      	it	lt
 8002d12:	18e4      	addlt	r4, r4, r3
 8002d14:	f000 f8de 	bl	8002ed4 <__malloc_lock>
 8002d18:	4a1c      	ldr	r2, [pc, #112]	@ (8002d8c <_free_r+0x8c>)
 8002d1a:	6813      	ldr	r3, [r2, #0]
 8002d1c:	b933      	cbnz	r3, 8002d2c <_free_r+0x2c>
 8002d1e:	6063      	str	r3, [r4, #4]
 8002d20:	6014      	str	r4, [r2, #0]
 8002d22:	4628      	mov	r0, r5
 8002d24:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002d28:	f000 b8da 	b.w	8002ee0 <__malloc_unlock>
 8002d2c:	42a3      	cmp	r3, r4
 8002d2e:	d908      	bls.n	8002d42 <_free_r+0x42>
 8002d30:	6820      	ldr	r0, [r4, #0]
 8002d32:	1821      	adds	r1, r4, r0
 8002d34:	428b      	cmp	r3, r1
 8002d36:	bf01      	itttt	eq
 8002d38:	6819      	ldreq	r1, [r3, #0]
 8002d3a:	685b      	ldreq	r3, [r3, #4]
 8002d3c:	1809      	addeq	r1, r1, r0
 8002d3e:	6021      	streq	r1, [r4, #0]
 8002d40:	e7ed      	b.n	8002d1e <_free_r+0x1e>
 8002d42:	461a      	mov	r2, r3
 8002d44:	685b      	ldr	r3, [r3, #4]
 8002d46:	b10b      	cbz	r3, 8002d4c <_free_r+0x4c>
 8002d48:	42a3      	cmp	r3, r4
 8002d4a:	d9fa      	bls.n	8002d42 <_free_r+0x42>
 8002d4c:	6811      	ldr	r1, [r2, #0]
 8002d4e:	1850      	adds	r0, r2, r1
 8002d50:	42a0      	cmp	r0, r4
 8002d52:	d10b      	bne.n	8002d6c <_free_r+0x6c>
 8002d54:	6820      	ldr	r0, [r4, #0]
 8002d56:	4401      	add	r1, r0
 8002d58:	1850      	adds	r0, r2, r1
 8002d5a:	4283      	cmp	r3, r0
 8002d5c:	6011      	str	r1, [r2, #0]
 8002d5e:	d1e0      	bne.n	8002d22 <_free_r+0x22>
 8002d60:	6818      	ldr	r0, [r3, #0]
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	4408      	add	r0, r1
 8002d66:	6010      	str	r0, [r2, #0]
 8002d68:	6053      	str	r3, [r2, #4]
 8002d6a:	e7da      	b.n	8002d22 <_free_r+0x22>
 8002d6c:	d902      	bls.n	8002d74 <_free_r+0x74>
 8002d6e:	230c      	movs	r3, #12
 8002d70:	602b      	str	r3, [r5, #0]
 8002d72:	e7d6      	b.n	8002d22 <_free_r+0x22>
 8002d74:	6820      	ldr	r0, [r4, #0]
 8002d76:	1821      	adds	r1, r4, r0
 8002d78:	428b      	cmp	r3, r1
 8002d7a:	bf01      	itttt	eq
 8002d7c:	6819      	ldreq	r1, [r3, #0]
 8002d7e:	685b      	ldreq	r3, [r3, #4]
 8002d80:	1809      	addeq	r1, r1, r0
 8002d82:	6021      	streq	r1, [r4, #0]
 8002d84:	6063      	str	r3, [r4, #4]
 8002d86:	6054      	str	r4, [r2, #4]
 8002d88:	e7cb      	b.n	8002d22 <_free_r+0x22>
 8002d8a:	bd38      	pop	{r3, r4, r5, pc}
 8002d8c:	20000668 	.word	0x20000668

08002d90 <sbrk_aligned>:
 8002d90:	b570      	push	{r4, r5, r6, lr}
 8002d92:	4e0f      	ldr	r6, [pc, #60]	@ (8002dd0 <sbrk_aligned+0x40>)
 8002d94:	460c      	mov	r4, r1
 8002d96:	6831      	ldr	r1, [r6, #0]
 8002d98:	4605      	mov	r5, r0
 8002d9a:	b911      	cbnz	r1, 8002da2 <sbrk_aligned+0x12>
 8002d9c:	f000 fba8 	bl	80034f0 <_sbrk_r>
 8002da0:	6030      	str	r0, [r6, #0]
 8002da2:	4621      	mov	r1, r4
 8002da4:	4628      	mov	r0, r5
 8002da6:	f000 fba3 	bl	80034f0 <_sbrk_r>
 8002daa:	1c43      	adds	r3, r0, #1
 8002dac:	d103      	bne.n	8002db6 <sbrk_aligned+0x26>
 8002dae:	f04f 34ff 	mov.w	r4, #4294967295
 8002db2:	4620      	mov	r0, r4
 8002db4:	bd70      	pop	{r4, r5, r6, pc}
 8002db6:	1cc4      	adds	r4, r0, #3
 8002db8:	f024 0403 	bic.w	r4, r4, #3
 8002dbc:	42a0      	cmp	r0, r4
 8002dbe:	d0f8      	beq.n	8002db2 <sbrk_aligned+0x22>
 8002dc0:	1a21      	subs	r1, r4, r0
 8002dc2:	4628      	mov	r0, r5
 8002dc4:	f000 fb94 	bl	80034f0 <_sbrk_r>
 8002dc8:	3001      	adds	r0, #1
 8002dca:	d1f2      	bne.n	8002db2 <sbrk_aligned+0x22>
 8002dcc:	e7ef      	b.n	8002dae <sbrk_aligned+0x1e>
 8002dce:	bf00      	nop
 8002dd0:	20000664 	.word	0x20000664

08002dd4 <_malloc_r>:
 8002dd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002dd8:	1ccd      	adds	r5, r1, #3
 8002dda:	f025 0503 	bic.w	r5, r5, #3
 8002dde:	3508      	adds	r5, #8
 8002de0:	2d0c      	cmp	r5, #12
 8002de2:	bf38      	it	cc
 8002de4:	250c      	movcc	r5, #12
 8002de6:	2d00      	cmp	r5, #0
 8002de8:	4606      	mov	r6, r0
 8002dea:	db01      	blt.n	8002df0 <_malloc_r+0x1c>
 8002dec:	42a9      	cmp	r1, r5
 8002dee:	d904      	bls.n	8002dfa <_malloc_r+0x26>
 8002df0:	230c      	movs	r3, #12
 8002df2:	6033      	str	r3, [r6, #0]
 8002df4:	2000      	movs	r0, #0
 8002df6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002dfa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8002ed0 <_malloc_r+0xfc>
 8002dfe:	f000 f869 	bl	8002ed4 <__malloc_lock>
 8002e02:	f8d8 3000 	ldr.w	r3, [r8]
 8002e06:	461c      	mov	r4, r3
 8002e08:	bb44      	cbnz	r4, 8002e5c <_malloc_r+0x88>
 8002e0a:	4629      	mov	r1, r5
 8002e0c:	4630      	mov	r0, r6
 8002e0e:	f7ff ffbf 	bl	8002d90 <sbrk_aligned>
 8002e12:	1c43      	adds	r3, r0, #1
 8002e14:	4604      	mov	r4, r0
 8002e16:	d158      	bne.n	8002eca <_malloc_r+0xf6>
 8002e18:	f8d8 4000 	ldr.w	r4, [r8]
 8002e1c:	4627      	mov	r7, r4
 8002e1e:	2f00      	cmp	r7, #0
 8002e20:	d143      	bne.n	8002eaa <_malloc_r+0xd6>
 8002e22:	2c00      	cmp	r4, #0
 8002e24:	d04b      	beq.n	8002ebe <_malloc_r+0xea>
 8002e26:	6823      	ldr	r3, [r4, #0]
 8002e28:	4639      	mov	r1, r7
 8002e2a:	4630      	mov	r0, r6
 8002e2c:	eb04 0903 	add.w	r9, r4, r3
 8002e30:	f000 fb5e 	bl	80034f0 <_sbrk_r>
 8002e34:	4581      	cmp	r9, r0
 8002e36:	d142      	bne.n	8002ebe <_malloc_r+0xea>
 8002e38:	6821      	ldr	r1, [r4, #0]
 8002e3a:	4630      	mov	r0, r6
 8002e3c:	1a6d      	subs	r5, r5, r1
 8002e3e:	4629      	mov	r1, r5
 8002e40:	f7ff ffa6 	bl	8002d90 <sbrk_aligned>
 8002e44:	3001      	adds	r0, #1
 8002e46:	d03a      	beq.n	8002ebe <_malloc_r+0xea>
 8002e48:	6823      	ldr	r3, [r4, #0]
 8002e4a:	442b      	add	r3, r5
 8002e4c:	6023      	str	r3, [r4, #0]
 8002e4e:	f8d8 3000 	ldr.w	r3, [r8]
 8002e52:	685a      	ldr	r2, [r3, #4]
 8002e54:	bb62      	cbnz	r2, 8002eb0 <_malloc_r+0xdc>
 8002e56:	f8c8 7000 	str.w	r7, [r8]
 8002e5a:	e00f      	b.n	8002e7c <_malloc_r+0xa8>
 8002e5c:	6822      	ldr	r2, [r4, #0]
 8002e5e:	1b52      	subs	r2, r2, r5
 8002e60:	d420      	bmi.n	8002ea4 <_malloc_r+0xd0>
 8002e62:	2a0b      	cmp	r2, #11
 8002e64:	d917      	bls.n	8002e96 <_malloc_r+0xc2>
 8002e66:	1961      	adds	r1, r4, r5
 8002e68:	42a3      	cmp	r3, r4
 8002e6a:	6025      	str	r5, [r4, #0]
 8002e6c:	bf18      	it	ne
 8002e6e:	6059      	strne	r1, [r3, #4]
 8002e70:	6863      	ldr	r3, [r4, #4]
 8002e72:	bf08      	it	eq
 8002e74:	f8c8 1000 	streq.w	r1, [r8]
 8002e78:	5162      	str	r2, [r4, r5]
 8002e7a:	604b      	str	r3, [r1, #4]
 8002e7c:	4630      	mov	r0, r6
 8002e7e:	f000 f82f 	bl	8002ee0 <__malloc_unlock>
 8002e82:	f104 000b 	add.w	r0, r4, #11
 8002e86:	1d23      	adds	r3, r4, #4
 8002e88:	f020 0007 	bic.w	r0, r0, #7
 8002e8c:	1ac2      	subs	r2, r0, r3
 8002e8e:	bf1c      	itt	ne
 8002e90:	1a1b      	subne	r3, r3, r0
 8002e92:	50a3      	strne	r3, [r4, r2]
 8002e94:	e7af      	b.n	8002df6 <_malloc_r+0x22>
 8002e96:	6862      	ldr	r2, [r4, #4]
 8002e98:	42a3      	cmp	r3, r4
 8002e9a:	bf0c      	ite	eq
 8002e9c:	f8c8 2000 	streq.w	r2, [r8]
 8002ea0:	605a      	strne	r2, [r3, #4]
 8002ea2:	e7eb      	b.n	8002e7c <_malloc_r+0xa8>
 8002ea4:	4623      	mov	r3, r4
 8002ea6:	6864      	ldr	r4, [r4, #4]
 8002ea8:	e7ae      	b.n	8002e08 <_malloc_r+0x34>
 8002eaa:	463c      	mov	r4, r7
 8002eac:	687f      	ldr	r7, [r7, #4]
 8002eae:	e7b6      	b.n	8002e1e <_malloc_r+0x4a>
 8002eb0:	461a      	mov	r2, r3
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	42a3      	cmp	r3, r4
 8002eb6:	d1fb      	bne.n	8002eb0 <_malloc_r+0xdc>
 8002eb8:	2300      	movs	r3, #0
 8002eba:	6053      	str	r3, [r2, #4]
 8002ebc:	e7de      	b.n	8002e7c <_malloc_r+0xa8>
 8002ebe:	230c      	movs	r3, #12
 8002ec0:	4630      	mov	r0, r6
 8002ec2:	6033      	str	r3, [r6, #0]
 8002ec4:	f000 f80c 	bl	8002ee0 <__malloc_unlock>
 8002ec8:	e794      	b.n	8002df4 <_malloc_r+0x20>
 8002eca:	6005      	str	r5, [r0, #0]
 8002ecc:	e7d6      	b.n	8002e7c <_malloc_r+0xa8>
 8002ece:	bf00      	nop
 8002ed0:	20000668 	.word	0x20000668

08002ed4 <__malloc_lock>:
 8002ed4:	4801      	ldr	r0, [pc, #4]	@ (8002edc <__malloc_lock+0x8>)
 8002ed6:	f7ff bf03 	b.w	8002ce0 <__retarget_lock_acquire_recursive>
 8002eda:	bf00      	nop
 8002edc:	20000660 	.word	0x20000660

08002ee0 <__malloc_unlock>:
 8002ee0:	4801      	ldr	r0, [pc, #4]	@ (8002ee8 <__malloc_unlock+0x8>)
 8002ee2:	f7ff befe 	b.w	8002ce2 <__retarget_lock_release_recursive>
 8002ee6:	bf00      	nop
 8002ee8:	20000660 	.word	0x20000660

08002eec <__ssputs_r>:
 8002eec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002ef0:	461f      	mov	r7, r3
 8002ef2:	688e      	ldr	r6, [r1, #8]
 8002ef4:	4682      	mov	sl, r0
 8002ef6:	42be      	cmp	r6, r7
 8002ef8:	460c      	mov	r4, r1
 8002efa:	4690      	mov	r8, r2
 8002efc:	680b      	ldr	r3, [r1, #0]
 8002efe:	d82d      	bhi.n	8002f5c <__ssputs_r+0x70>
 8002f00:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8002f04:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8002f08:	d026      	beq.n	8002f58 <__ssputs_r+0x6c>
 8002f0a:	6965      	ldr	r5, [r4, #20]
 8002f0c:	6909      	ldr	r1, [r1, #16]
 8002f0e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002f12:	eba3 0901 	sub.w	r9, r3, r1
 8002f16:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002f1a:	1c7b      	adds	r3, r7, #1
 8002f1c:	444b      	add	r3, r9
 8002f1e:	106d      	asrs	r5, r5, #1
 8002f20:	429d      	cmp	r5, r3
 8002f22:	bf38      	it	cc
 8002f24:	461d      	movcc	r5, r3
 8002f26:	0553      	lsls	r3, r2, #21
 8002f28:	d527      	bpl.n	8002f7a <__ssputs_r+0x8e>
 8002f2a:	4629      	mov	r1, r5
 8002f2c:	f7ff ff52 	bl	8002dd4 <_malloc_r>
 8002f30:	4606      	mov	r6, r0
 8002f32:	b360      	cbz	r0, 8002f8e <__ssputs_r+0xa2>
 8002f34:	464a      	mov	r2, r9
 8002f36:	6921      	ldr	r1, [r4, #16]
 8002f38:	f7ff fed4 	bl	8002ce4 <memcpy>
 8002f3c:	89a3      	ldrh	r3, [r4, #12]
 8002f3e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8002f42:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002f46:	81a3      	strh	r3, [r4, #12]
 8002f48:	6126      	str	r6, [r4, #16]
 8002f4a:	444e      	add	r6, r9
 8002f4c:	6026      	str	r6, [r4, #0]
 8002f4e:	463e      	mov	r6, r7
 8002f50:	6165      	str	r5, [r4, #20]
 8002f52:	eba5 0509 	sub.w	r5, r5, r9
 8002f56:	60a5      	str	r5, [r4, #8]
 8002f58:	42be      	cmp	r6, r7
 8002f5a:	d900      	bls.n	8002f5e <__ssputs_r+0x72>
 8002f5c:	463e      	mov	r6, r7
 8002f5e:	4632      	mov	r2, r6
 8002f60:	4641      	mov	r1, r8
 8002f62:	6820      	ldr	r0, [r4, #0]
 8002f64:	f000 faaa 	bl	80034bc <memmove>
 8002f68:	2000      	movs	r0, #0
 8002f6a:	68a3      	ldr	r3, [r4, #8]
 8002f6c:	1b9b      	subs	r3, r3, r6
 8002f6e:	60a3      	str	r3, [r4, #8]
 8002f70:	6823      	ldr	r3, [r4, #0]
 8002f72:	4433      	add	r3, r6
 8002f74:	6023      	str	r3, [r4, #0]
 8002f76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002f7a:	462a      	mov	r2, r5
 8002f7c:	f000 fad6 	bl	800352c <_realloc_r>
 8002f80:	4606      	mov	r6, r0
 8002f82:	2800      	cmp	r0, #0
 8002f84:	d1e0      	bne.n	8002f48 <__ssputs_r+0x5c>
 8002f86:	4650      	mov	r0, sl
 8002f88:	6921      	ldr	r1, [r4, #16]
 8002f8a:	f7ff feb9 	bl	8002d00 <_free_r>
 8002f8e:	230c      	movs	r3, #12
 8002f90:	f8ca 3000 	str.w	r3, [sl]
 8002f94:	89a3      	ldrh	r3, [r4, #12]
 8002f96:	f04f 30ff 	mov.w	r0, #4294967295
 8002f9a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002f9e:	81a3      	strh	r3, [r4, #12]
 8002fa0:	e7e9      	b.n	8002f76 <__ssputs_r+0x8a>
	...

08002fa4 <_svfiprintf_r>:
 8002fa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002fa8:	4698      	mov	r8, r3
 8002faa:	898b      	ldrh	r3, [r1, #12]
 8002fac:	4607      	mov	r7, r0
 8002fae:	061b      	lsls	r3, r3, #24
 8002fb0:	460d      	mov	r5, r1
 8002fb2:	4614      	mov	r4, r2
 8002fb4:	b09d      	sub	sp, #116	@ 0x74
 8002fb6:	d510      	bpl.n	8002fda <_svfiprintf_r+0x36>
 8002fb8:	690b      	ldr	r3, [r1, #16]
 8002fba:	b973      	cbnz	r3, 8002fda <_svfiprintf_r+0x36>
 8002fbc:	2140      	movs	r1, #64	@ 0x40
 8002fbe:	f7ff ff09 	bl	8002dd4 <_malloc_r>
 8002fc2:	6028      	str	r0, [r5, #0]
 8002fc4:	6128      	str	r0, [r5, #16]
 8002fc6:	b930      	cbnz	r0, 8002fd6 <_svfiprintf_r+0x32>
 8002fc8:	230c      	movs	r3, #12
 8002fca:	603b      	str	r3, [r7, #0]
 8002fcc:	f04f 30ff 	mov.w	r0, #4294967295
 8002fd0:	b01d      	add	sp, #116	@ 0x74
 8002fd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002fd6:	2340      	movs	r3, #64	@ 0x40
 8002fd8:	616b      	str	r3, [r5, #20]
 8002fda:	2300      	movs	r3, #0
 8002fdc:	9309      	str	r3, [sp, #36]	@ 0x24
 8002fde:	2320      	movs	r3, #32
 8002fe0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8002fe4:	2330      	movs	r3, #48	@ 0x30
 8002fe6:	f04f 0901 	mov.w	r9, #1
 8002fea:	f8cd 800c 	str.w	r8, [sp, #12]
 8002fee:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8003188 <_svfiprintf_r+0x1e4>
 8002ff2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8002ff6:	4623      	mov	r3, r4
 8002ff8:	469a      	mov	sl, r3
 8002ffa:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002ffe:	b10a      	cbz	r2, 8003004 <_svfiprintf_r+0x60>
 8003000:	2a25      	cmp	r2, #37	@ 0x25
 8003002:	d1f9      	bne.n	8002ff8 <_svfiprintf_r+0x54>
 8003004:	ebba 0b04 	subs.w	fp, sl, r4
 8003008:	d00b      	beq.n	8003022 <_svfiprintf_r+0x7e>
 800300a:	465b      	mov	r3, fp
 800300c:	4622      	mov	r2, r4
 800300e:	4629      	mov	r1, r5
 8003010:	4638      	mov	r0, r7
 8003012:	f7ff ff6b 	bl	8002eec <__ssputs_r>
 8003016:	3001      	adds	r0, #1
 8003018:	f000 80a7 	beq.w	800316a <_svfiprintf_r+0x1c6>
 800301c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800301e:	445a      	add	r2, fp
 8003020:	9209      	str	r2, [sp, #36]	@ 0x24
 8003022:	f89a 3000 	ldrb.w	r3, [sl]
 8003026:	2b00      	cmp	r3, #0
 8003028:	f000 809f 	beq.w	800316a <_svfiprintf_r+0x1c6>
 800302c:	2300      	movs	r3, #0
 800302e:	f04f 32ff 	mov.w	r2, #4294967295
 8003032:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003036:	f10a 0a01 	add.w	sl, sl, #1
 800303a:	9304      	str	r3, [sp, #16]
 800303c:	9307      	str	r3, [sp, #28]
 800303e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003042:	931a      	str	r3, [sp, #104]	@ 0x68
 8003044:	4654      	mov	r4, sl
 8003046:	2205      	movs	r2, #5
 8003048:	f814 1b01 	ldrb.w	r1, [r4], #1
 800304c:	484e      	ldr	r0, [pc, #312]	@ (8003188 <_svfiprintf_r+0x1e4>)
 800304e:	f000 fa5f 	bl	8003510 <memchr>
 8003052:	9a04      	ldr	r2, [sp, #16]
 8003054:	b9d8      	cbnz	r0, 800308e <_svfiprintf_r+0xea>
 8003056:	06d0      	lsls	r0, r2, #27
 8003058:	bf44      	itt	mi
 800305a:	2320      	movmi	r3, #32
 800305c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003060:	0711      	lsls	r1, r2, #28
 8003062:	bf44      	itt	mi
 8003064:	232b      	movmi	r3, #43	@ 0x2b
 8003066:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800306a:	f89a 3000 	ldrb.w	r3, [sl]
 800306e:	2b2a      	cmp	r3, #42	@ 0x2a
 8003070:	d015      	beq.n	800309e <_svfiprintf_r+0xfa>
 8003072:	4654      	mov	r4, sl
 8003074:	2000      	movs	r0, #0
 8003076:	f04f 0c0a 	mov.w	ip, #10
 800307a:	9a07      	ldr	r2, [sp, #28]
 800307c:	4621      	mov	r1, r4
 800307e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003082:	3b30      	subs	r3, #48	@ 0x30
 8003084:	2b09      	cmp	r3, #9
 8003086:	d94b      	bls.n	8003120 <_svfiprintf_r+0x17c>
 8003088:	b1b0      	cbz	r0, 80030b8 <_svfiprintf_r+0x114>
 800308a:	9207      	str	r2, [sp, #28]
 800308c:	e014      	b.n	80030b8 <_svfiprintf_r+0x114>
 800308e:	eba0 0308 	sub.w	r3, r0, r8
 8003092:	fa09 f303 	lsl.w	r3, r9, r3
 8003096:	4313      	orrs	r3, r2
 8003098:	46a2      	mov	sl, r4
 800309a:	9304      	str	r3, [sp, #16]
 800309c:	e7d2      	b.n	8003044 <_svfiprintf_r+0xa0>
 800309e:	9b03      	ldr	r3, [sp, #12]
 80030a0:	1d19      	adds	r1, r3, #4
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	9103      	str	r1, [sp, #12]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	bfbb      	ittet	lt
 80030aa:	425b      	neglt	r3, r3
 80030ac:	f042 0202 	orrlt.w	r2, r2, #2
 80030b0:	9307      	strge	r3, [sp, #28]
 80030b2:	9307      	strlt	r3, [sp, #28]
 80030b4:	bfb8      	it	lt
 80030b6:	9204      	strlt	r2, [sp, #16]
 80030b8:	7823      	ldrb	r3, [r4, #0]
 80030ba:	2b2e      	cmp	r3, #46	@ 0x2e
 80030bc:	d10a      	bne.n	80030d4 <_svfiprintf_r+0x130>
 80030be:	7863      	ldrb	r3, [r4, #1]
 80030c0:	2b2a      	cmp	r3, #42	@ 0x2a
 80030c2:	d132      	bne.n	800312a <_svfiprintf_r+0x186>
 80030c4:	9b03      	ldr	r3, [sp, #12]
 80030c6:	3402      	adds	r4, #2
 80030c8:	1d1a      	adds	r2, r3, #4
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	9203      	str	r2, [sp, #12]
 80030ce:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80030d2:	9305      	str	r3, [sp, #20]
 80030d4:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800318c <_svfiprintf_r+0x1e8>
 80030d8:	2203      	movs	r2, #3
 80030da:	4650      	mov	r0, sl
 80030dc:	7821      	ldrb	r1, [r4, #0]
 80030de:	f000 fa17 	bl	8003510 <memchr>
 80030e2:	b138      	cbz	r0, 80030f4 <_svfiprintf_r+0x150>
 80030e4:	2240      	movs	r2, #64	@ 0x40
 80030e6:	9b04      	ldr	r3, [sp, #16]
 80030e8:	eba0 000a 	sub.w	r0, r0, sl
 80030ec:	4082      	lsls	r2, r0
 80030ee:	4313      	orrs	r3, r2
 80030f0:	3401      	adds	r4, #1
 80030f2:	9304      	str	r3, [sp, #16]
 80030f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80030f8:	2206      	movs	r2, #6
 80030fa:	4825      	ldr	r0, [pc, #148]	@ (8003190 <_svfiprintf_r+0x1ec>)
 80030fc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003100:	f000 fa06 	bl	8003510 <memchr>
 8003104:	2800      	cmp	r0, #0
 8003106:	d036      	beq.n	8003176 <_svfiprintf_r+0x1d2>
 8003108:	4b22      	ldr	r3, [pc, #136]	@ (8003194 <_svfiprintf_r+0x1f0>)
 800310a:	bb1b      	cbnz	r3, 8003154 <_svfiprintf_r+0x1b0>
 800310c:	9b03      	ldr	r3, [sp, #12]
 800310e:	3307      	adds	r3, #7
 8003110:	f023 0307 	bic.w	r3, r3, #7
 8003114:	3308      	adds	r3, #8
 8003116:	9303      	str	r3, [sp, #12]
 8003118:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800311a:	4433      	add	r3, r6
 800311c:	9309      	str	r3, [sp, #36]	@ 0x24
 800311e:	e76a      	b.n	8002ff6 <_svfiprintf_r+0x52>
 8003120:	460c      	mov	r4, r1
 8003122:	2001      	movs	r0, #1
 8003124:	fb0c 3202 	mla	r2, ip, r2, r3
 8003128:	e7a8      	b.n	800307c <_svfiprintf_r+0xd8>
 800312a:	2300      	movs	r3, #0
 800312c:	f04f 0c0a 	mov.w	ip, #10
 8003130:	4619      	mov	r1, r3
 8003132:	3401      	adds	r4, #1
 8003134:	9305      	str	r3, [sp, #20]
 8003136:	4620      	mov	r0, r4
 8003138:	f810 2b01 	ldrb.w	r2, [r0], #1
 800313c:	3a30      	subs	r2, #48	@ 0x30
 800313e:	2a09      	cmp	r2, #9
 8003140:	d903      	bls.n	800314a <_svfiprintf_r+0x1a6>
 8003142:	2b00      	cmp	r3, #0
 8003144:	d0c6      	beq.n	80030d4 <_svfiprintf_r+0x130>
 8003146:	9105      	str	r1, [sp, #20]
 8003148:	e7c4      	b.n	80030d4 <_svfiprintf_r+0x130>
 800314a:	4604      	mov	r4, r0
 800314c:	2301      	movs	r3, #1
 800314e:	fb0c 2101 	mla	r1, ip, r1, r2
 8003152:	e7f0      	b.n	8003136 <_svfiprintf_r+0x192>
 8003154:	ab03      	add	r3, sp, #12
 8003156:	9300      	str	r3, [sp, #0]
 8003158:	462a      	mov	r2, r5
 800315a:	4638      	mov	r0, r7
 800315c:	4b0e      	ldr	r3, [pc, #56]	@ (8003198 <_svfiprintf_r+0x1f4>)
 800315e:	a904      	add	r1, sp, #16
 8003160:	f3af 8000 	nop.w
 8003164:	1c42      	adds	r2, r0, #1
 8003166:	4606      	mov	r6, r0
 8003168:	d1d6      	bne.n	8003118 <_svfiprintf_r+0x174>
 800316a:	89ab      	ldrh	r3, [r5, #12]
 800316c:	065b      	lsls	r3, r3, #25
 800316e:	f53f af2d 	bmi.w	8002fcc <_svfiprintf_r+0x28>
 8003172:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003174:	e72c      	b.n	8002fd0 <_svfiprintf_r+0x2c>
 8003176:	ab03      	add	r3, sp, #12
 8003178:	9300      	str	r3, [sp, #0]
 800317a:	462a      	mov	r2, r5
 800317c:	4638      	mov	r0, r7
 800317e:	4b06      	ldr	r3, [pc, #24]	@ (8003198 <_svfiprintf_r+0x1f4>)
 8003180:	a904      	add	r1, sp, #16
 8003182:	f000 f87d 	bl	8003280 <_printf_i>
 8003186:	e7ed      	b.n	8003164 <_svfiprintf_r+0x1c0>
 8003188:	08004b72 	.word	0x08004b72
 800318c:	08004b78 	.word	0x08004b78
 8003190:	08004b7c 	.word	0x08004b7c
 8003194:	00000000 	.word	0x00000000
 8003198:	08002eed 	.word	0x08002eed

0800319c <_printf_common>:
 800319c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80031a0:	4616      	mov	r6, r2
 80031a2:	4698      	mov	r8, r3
 80031a4:	688a      	ldr	r2, [r1, #8]
 80031a6:	690b      	ldr	r3, [r1, #16]
 80031a8:	4607      	mov	r7, r0
 80031aa:	4293      	cmp	r3, r2
 80031ac:	bfb8      	it	lt
 80031ae:	4613      	movlt	r3, r2
 80031b0:	6033      	str	r3, [r6, #0]
 80031b2:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80031b6:	460c      	mov	r4, r1
 80031b8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80031bc:	b10a      	cbz	r2, 80031c2 <_printf_common+0x26>
 80031be:	3301      	adds	r3, #1
 80031c0:	6033      	str	r3, [r6, #0]
 80031c2:	6823      	ldr	r3, [r4, #0]
 80031c4:	0699      	lsls	r1, r3, #26
 80031c6:	bf42      	ittt	mi
 80031c8:	6833      	ldrmi	r3, [r6, #0]
 80031ca:	3302      	addmi	r3, #2
 80031cc:	6033      	strmi	r3, [r6, #0]
 80031ce:	6825      	ldr	r5, [r4, #0]
 80031d0:	f015 0506 	ands.w	r5, r5, #6
 80031d4:	d106      	bne.n	80031e4 <_printf_common+0x48>
 80031d6:	f104 0a19 	add.w	sl, r4, #25
 80031da:	68e3      	ldr	r3, [r4, #12]
 80031dc:	6832      	ldr	r2, [r6, #0]
 80031de:	1a9b      	subs	r3, r3, r2
 80031e0:	42ab      	cmp	r3, r5
 80031e2:	dc2b      	bgt.n	800323c <_printf_common+0xa0>
 80031e4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80031e8:	6822      	ldr	r2, [r4, #0]
 80031ea:	3b00      	subs	r3, #0
 80031ec:	bf18      	it	ne
 80031ee:	2301      	movne	r3, #1
 80031f0:	0692      	lsls	r2, r2, #26
 80031f2:	d430      	bmi.n	8003256 <_printf_common+0xba>
 80031f4:	4641      	mov	r1, r8
 80031f6:	4638      	mov	r0, r7
 80031f8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80031fc:	47c8      	blx	r9
 80031fe:	3001      	adds	r0, #1
 8003200:	d023      	beq.n	800324a <_printf_common+0xae>
 8003202:	6823      	ldr	r3, [r4, #0]
 8003204:	6922      	ldr	r2, [r4, #16]
 8003206:	f003 0306 	and.w	r3, r3, #6
 800320a:	2b04      	cmp	r3, #4
 800320c:	bf14      	ite	ne
 800320e:	2500      	movne	r5, #0
 8003210:	6833      	ldreq	r3, [r6, #0]
 8003212:	f04f 0600 	mov.w	r6, #0
 8003216:	bf08      	it	eq
 8003218:	68e5      	ldreq	r5, [r4, #12]
 800321a:	f104 041a 	add.w	r4, r4, #26
 800321e:	bf08      	it	eq
 8003220:	1aed      	subeq	r5, r5, r3
 8003222:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8003226:	bf08      	it	eq
 8003228:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800322c:	4293      	cmp	r3, r2
 800322e:	bfc4      	itt	gt
 8003230:	1a9b      	subgt	r3, r3, r2
 8003232:	18ed      	addgt	r5, r5, r3
 8003234:	42b5      	cmp	r5, r6
 8003236:	d11a      	bne.n	800326e <_printf_common+0xd2>
 8003238:	2000      	movs	r0, #0
 800323a:	e008      	b.n	800324e <_printf_common+0xb2>
 800323c:	2301      	movs	r3, #1
 800323e:	4652      	mov	r2, sl
 8003240:	4641      	mov	r1, r8
 8003242:	4638      	mov	r0, r7
 8003244:	47c8      	blx	r9
 8003246:	3001      	adds	r0, #1
 8003248:	d103      	bne.n	8003252 <_printf_common+0xb6>
 800324a:	f04f 30ff 	mov.w	r0, #4294967295
 800324e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003252:	3501      	adds	r5, #1
 8003254:	e7c1      	b.n	80031da <_printf_common+0x3e>
 8003256:	2030      	movs	r0, #48	@ 0x30
 8003258:	18e1      	adds	r1, r4, r3
 800325a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800325e:	1c5a      	adds	r2, r3, #1
 8003260:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003264:	4422      	add	r2, r4
 8003266:	3302      	adds	r3, #2
 8003268:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800326c:	e7c2      	b.n	80031f4 <_printf_common+0x58>
 800326e:	2301      	movs	r3, #1
 8003270:	4622      	mov	r2, r4
 8003272:	4641      	mov	r1, r8
 8003274:	4638      	mov	r0, r7
 8003276:	47c8      	blx	r9
 8003278:	3001      	adds	r0, #1
 800327a:	d0e6      	beq.n	800324a <_printf_common+0xae>
 800327c:	3601      	adds	r6, #1
 800327e:	e7d9      	b.n	8003234 <_printf_common+0x98>

08003280 <_printf_i>:
 8003280:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003284:	7e0f      	ldrb	r7, [r1, #24]
 8003286:	4691      	mov	r9, r2
 8003288:	2f78      	cmp	r7, #120	@ 0x78
 800328a:	4680      	mov	r8, r0
 800328c:	460c      	mov	r4, r1
 800328e:	469a      	mov	sl, r3
 8003290:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003292:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003296:	d807      	bhi.n	80032a8 <_printf_i+0x28>
 8003298:	2f62      	cmp	r7, #98	@ 0x62
 800329a:	d80a      	bhi.n	80032b2 <_printf_i+0x32>
 800329c:	2f00      	cmp	r7, #0
 800329e:	f000 80d1 	beq.w	8003444 <_printf_i+0x1c4>
 80032a2:	2f58      	cmp	r7, #88	@ 0x58
 80032a4:	f000 80b8 	beq.w	8003418 <_printf_i+0x198>
 80032a8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80032ac:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80032b0:	e03a      	b.n	8003328 <_printf_i+0xa8>
 80032b2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80032b6:	2b15      	cmp	r3, #21
 80032b8:	d8f6      	bhi.n	80032a8 <_printf_i+0x28>
 80032ba:	a101      	add	r1, pc, #4	@ (adr r1, 80032c0 <_printf_i+0x40>)
 80032bc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80032c0:	08003319 	.word	0x08003319
 80032c4:	0800332d 	.word	0x0800332d
 80032c8:	080032a9 	.word	0x080032a9
 80032cc:	080032a9 	.word	0x080032a9
 80032d0:	080032a9 	.word	0x080032a9
 80032d4:	080032a9 	.word	0x080032a9
 80032d8:	0800332d 	.word	0x0800332d
 80032dc:	080032a9 	.word	0x080032a9
 80032e0:	080032a9 	.word	0x080032a9
 80032e4:	080032a9 	.word	0x080032a9
 80032e8:	080032a9 	.word	0x080032a9
 80032ec:	0800342b 	.word	0x0800342b
 80032f0:	08003357 	.word	0x08003357
 80032f4:	080033e5 	.word	0x080033e5
 80032f8:	080032a9 	.word	0x080032a9
 80032fc:	080032a9 	.word	0x080032a9
 8003300:	0800344d 	.word	0x0800344d
 8003304:	080032a9 	.word	0x080032a9
 8003308:	08003357 	.word	0x08003357
 800330c:	080032a9 	.word	0x080032a9
 8003310:	080032a9 	.word	0x080032a9
 8003314:	080033ed 	.word	0x080033ed
 8003318:	6833      	ldr	r3, [r6, #0]
 800331a:	1d1a      	adds	r2, r3, #4
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	6032      	str	r2, [r6, #0]
 8003320:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003324:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003328:	2301      	movs	r3, #1
 800332a:	e09c      	b.n	8003466 <_printf_i+0x1e6>
 800332c:	6833      	ldr	r3, [r6, #0]
 800332e:	6820      	ldr	r0, [r4, #0]
 8003330:	1d19      	adds	r1, r3, #4
 8003332:	6031      	str	r1, [r6, #0]
 8003334:	0606      	lsls	r6, r0, #24
 8003336:	d501      	bpl.n	800333c <_printf_i+0xbc>
 8003338:	681d      	ldr	r5, [r3, #0]
 800333a:	e003      	b.n	8003344 <_printf_i+0xc4>
 800333c:	0645      	lsls	r5, r0, #25
 800333e:	d5fb      	bpl.n	8003338 <_printf_i+0xb8>
 8003340:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003344:	2d00      	cmp	r5, #0
 8003346:	da03      	bge.n	8003350 <_printf_i+0xd0>
 8003348:	232d      	movs	r3, #45	@ 0x2d
 800334a:	426d      	negs	r5, r5
 800334c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003350:	230a      	movs	r3, #10
 8003352:	4858      	ldr	r0, [pc, #352]	@ (80034b4 <_printf_i+0x234>)
 8003354:	e011      	b.n	800337a <_printf_i+0xfa>
 8003356:	6821      	ldr	r1, [r4, #0]
 8003358:	6833      	ldr	r3, [r6, #0]
 800335a:	0608      	lsls	r0, r1, #24
 800335c:	f853 5b04 	ldr.w	r5, [r3], #4
 8003360:	d402      	bmi.n	8003368 <_printf_i+0xe8>
 8003362:	0649      	lsls	r1, r1, #25
 8003364:	bf48      	it	mi
 8003366:	b2ad      	uxthmi	r5, r5
 8003368:	2f6f      	cmp	r7, #111	@ 0x6f
 800336a:	6033      	str	r3, [r6, #0]
 800336c:	bf14      	ite	ne
 800336e:	230a      	movne	r3, #10
 8003370:	2308      	moveq	r3, #8
 8003372:	4850      	ldr	r0, [pc, #320]	@ (80034b4 <_printf_i+0x234>)
 8003374:	2100      	movs	r1, #0
 8003376:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800337a:	6866      	ldr	r6, [r4, #4]
 800337c:	2e00      	cmp	r6, #0
 800337e:	60a6      	str	r6, [r4, #8]
 8003380:	db05      	blt.n	800338e <_printf_i+0x10e>
 8003382:	6821      	ldr	r1, [r4, #0]
 8003384:	432e      	orrs	r6, r5
 8003386:	f021 0104 	bic.w	r1, r1, #4
 800338a:	6021      	str	r1, [r4, #0]
 800338c:	d04b      	beq.n	8003426 <_printf_i+0x1a6>
 800338e:	4616      	mov	r6, r2
 8003390:	fbb5 f1f3 	udiv	r1, r5, r3
 8003394:	fb03 5711 	mls	r7, r3, r1, r5
 8003398:	5dc7      	ldrb	r7, [r0, r7]
 800339a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800339e:	462f      	mov	r7, r5
 80033a0:	42bb      	cmp	r3, r7
 80033a2:	460d      	mov	r5, r1
 80033a4:	d9f4      	bls.n	8003390 <_printf_i+0x110>
 80033a6:	2b08      	cmp	r3, #8
 80033a8:	d10b      	bne.n	80033c2 <_printf_i+0x142>
 80033aa:	6823      	ldr	r3, [r4, #0]
 80033ac:	07df      	lsls	r7, r3, #31
 80033ae:	d508      	bpl.n	80033c2 <_printf_i+0x142>
 80033b0:	6923      	ldr	r3, [r4, #16]
 80033b2:	6861      	ldr	r1, [r4, #4]
 80033b4:	4299      	cmp	r1, r3
 80033b6:	bfde      	ittt	le
 80033b8:	2330      	movle	r3, #48	@ 0x30
 80033ba:	f806 3c01 	strble.w	r3, [r6, #-1]
 80033be:	f106 36ff 	addle.w	r6, r6, #4294967295
 80033c2:	1b92      	subs	r2, r2, r6
 80033c4:	6122      	str	r2, [r4, #16]
 80033c6:	464b      	mov	r3, r9
 80033c8:	4621      	mov	r1, r4
 80033ca:	4640      	mov	r0, r8
 80033cc:	f8cd a000 	str.w	sl, [sp]
 80033d0:	aa03      	add	r2, sp, #12
 80033d2:	f7ff fee3 	bl	800319c <_printf_common>
 80033d6:	3001      	adds	r0, #1
 80033d8:	d14a      	bne.n	8003470 <_printf_i+0x1f0>
 80033da:	f04f 30ff 	mov.w	r0, #4294967295
 80033de:	b004      	add	sp, #16
 80033e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80033e4:	6823      	ldr	r3, [r4, #0]
 80033e6:	f043 0320 	orr.w	r3, r3, #32
 80033ea:	6023      	str	r3, [r4, #0]
 80033ec:	2778      	movs	r7, #120	@ 0x78
 80033ee:	4832      	ldr	r0, [pc, #200]	@ (80034b8 <_printf_i+0x238>)
 80033f0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80033f4:	6823      	ldr	r3, [r4, #0]
 80033f6:	6831      	ldr	r1, [r6, #0]
 80033f8:	061f      	lsls	r7, r3, #24
 80033fa:	f851 5b04 	ldr.w	r5, [r1], #4
 80033fe:	d402      	bmi.n	8003406 <_printf_i+0x186>
 8003400:	065f      	lsls	r7, r3, #25
 8003402:	bf48      	it	mi
 8003404:	b2ad      	uxthmi	r5, r5
 8003406:	6031      	str	r1, [r6, #0]
 8003408:	07d9      	lsls	r1, r3, #31
 800340a:	bf44      	itt	mi
 800340c:	f043 0320 	orrmi.w	r3, r3, #32
 8003410:	6023      	strmi	r3, [r4, #0]
 8003412:	b11d      	cbz	r5, 800341c <_printf_i+0x19c>
 8003414:	2310      	movs	r3, #16
 8003416:	e7ad      	b.n	8003374 <_printf_i+0xf4>
 8003418:	4826      	ldr	r0, [pc, #152]	@ (80034b4 <_printf_i+0x234>)
 800341a:	e7e9      	b.n	80033f0 <_printf_i+0x170>
 800341c:	6823      	ldr	r3, [r4, #0]
 800341e:	f023 0320 	bic.w	r3, r3, #32
 8003422:	6023      	str	r3, [r4, #0]
 8003424:	e7f6      	b.n	8003414 <_printf_i+0x194>
 8003426:	4616      	mov	r6, r2
 8003428:	e7bd      	b.n	80033a6 <_printf_i+0x126>
 800342a:	6833      	ldr	r3, [r6, #0]
 800342c:	6825      	ldr	r5, [r4, #0]
 800342e:	1d18      	adds	r0, r3, #4
 8003430:	6961      	ldr	r1, [r4, #20]
 8003432:	6030      	str	r0, [r6, #0]
 8003434:	062e      	lsls	r6, r5, #24
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	d501      	bpl.n	800343e <_printf_i+0x1be>
 800343a:	6019      	str	r1, [r3, #0]
 800343c:	e002      	b.n	8003444 <_printf_i+0x1c4>
 800343e:	0668      	lsls	r0, r5, #25
 8003440:	d5fb      	bpl.n	800343a <_printf_i+0x1ba>
 8003442:	8019      	strh	r1, [r3, #0]
 8003444:	2300      	movs	r3, #0
 8003446:	4616      	mov	r6, r2
 8003448:	6123      	str	r3, [r4, #16]
 800344a:	e7bc      	b.n	80033c6 <_printf_i+0x146>
 800344c:	6833      	ldr	r3, [r6, #0]
 800344e:	2100      	movs	r1, #0
 8003450:	1d1a      	adds	r2, r3, #4
 8003452:	6032      	str	r2, [r6, #0]
 8003454:	681e      	ldr	r6, [r3, #0]
 8003456:	6862      	ldr	r2, [r4, #4]
 8003458:	4630      	mov	r0, r6
 800345a:	f000 f859 	bl	8003510 <memchr>
 800345e:	b108      	cbz	r0, 8003464 <_printf_i+0x1e4>
 8003460:	1b80      	subs	r0, r0, r6
 8003462:	6060      	str	r0, [r4, #4]
 8003464:	6863      	ldr	r3, [r4, #4]
 8003466:	6123      	str	r3, [r4, #16]
 8003468:	2300      	movs	r3, #0
 800346a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800346e:	e7aa      	b.n	80033c6 <_printf_i+0x146>
 8003470:	4632      	mov	r2, r6
 8003472:	4649      	mov	r1, r9
 8003474:	4640      	mov	r0, r8
 8003476:	6923      	ldr	r3, [r4, #16]
 8003478:	47d0      	blx	sl
 800347a:	3001      	adds	r0, #1
 800347c:	d0ad      	beq.n	80033da <_printf_i+0x15a>
 800347e:	6823      	ldr	r3, [r4, #0]
 8003480:	079b      	lsls	r3, r3, #30
 8003482:	d413      	bmi.n	80034ac <_printf_i+0x22c>
 8003484:	68e0      	ldr	r0, [r4, #12]
 8003486:	9b03      	ldr	r3, [sp, #12]
 8003488:	4298      	cmp	r0, r3
 800348a:	bfb8      	it	lt
 800348c:	4618      	movlt	r0, r3
 800348e:	e7a6      	b.n	80033de <_printf_i+0x15e>
 8003490:	2301      	movs	r3, #1
 8003492:	4632      	mov	r2, r6
 8003494:	4649      	mov	r1, r9
 8003496:	4640      	mov	r0, r8
 8003498:	47d0      	blx	sl
 800349a:	3001      	adds	r0, #1
 800349c:	d09d      	beq.n	80033da <_printf_i+0x15a>
 800349e:	3501      	adds	r5, #1
 80034a0:	68e3      	ldr	r3, [r4, #12]
 80034a2:	9903      	ldr	r1, [sp, #12]
 80034a4:	1a5b      	subs	r3, r3, r1
 80034a6:	42ab      	cmp	r3, r5
 80034a8:	dcf2      	bgt.n	8003490 <_printf_i+0x210>
 80034aa:	e7eb      	b.n	8003484 <_printf_i+0x204>
 80034ac:	2500      	movs	r5, #0
 80034ae:	f104 0619 	add.w	r6, r4, #25
 80034b2:	e7f5      	b.n	80034a0 <_printf_i+0x220>
 80034b4:	08004b83 	.word	0x08004b83
 80034b8:	08004b94 	.word	0x08004b94

080034bc <memmove>:
 80034bc:	4288      	cmp	r0, r1
 80034be:	b510      	push	{r4, lr}
 80034c0:	eb01 0402 	add.w	r4, r1, r2
 80034c4:	d902      	bls.n	80034cc <memmove+0x10>
 80034c6:	4284      	cmp	r4, r0
 80034c8:	4623      	mov	r3, r4
 80034ca:	d807      	bhi.n	80034dc <memmove+0x20>
 80034cc:	1e43      	subs	r3, r0, #1
 80034ce:	42a1      	cmp	r1, r4
 80034d0:	d008      	beq.n	80034e4 <memmove+0x28>
 80034d2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80034d6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80034da:	e7f8      	b.n	80034ce <memmove+0x12>
 80034dc:	4601      	mov	r1, r0
 80034de:	4402      	add	r2, r0
 80034e0:	428a      	cmp	r2, r1
 80034e2:	d100      	bne.n	80034e6 <memmove+0x2a>
 80034e4:	bd10      	pop	{r4, pc}
 80034e6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80034ea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80034ee:	e7f7      	b.n	80034e0 <memmove+0x24>

080034f0 <_sbrk_r>:
 80034f0:	b538      	push	{r3, r4, r5, lr}
 80034f2:	2300      	movs	r3, #0
 80034f4:	4d05      	ldr	r5, [pc, #20]	@ (800350c <_sbrk_r+0x1c>)
 80034f6:	4604      	mov	r4, r0
 80034f8:	4608      	mov	r0, r1
 80034fa:	602b      	str	r3, [r5, #0]
 80034fc:	f7fd fcb0 	bl	8000e60 <_sbrk>
 8003500:	1c43      	adds	r3, r0, #1
 8003502:	d102      	bne.n	800350a <_sbrk_r+0x1a>
 8003504:	682b      	ldr	r3, [r5, #0]
 8003506:	b103      	cbz	r3, 800350a <_sbrk_r+0x1a>
 8003508:	6023      	str	r3, [r4, #0]
 800350a:	bd38      	pop	{r3, r4, r5, pc}
 800350c:	2000065c 	.word	0x2000065c

08003510 <memchr>:
 8003510:	4603      	mov	r3, r0
 8003512:	b510      	push	{r4, lr}
 8003514:	b2c9      	uxtb	r1, r1
 8003516:	4402      	add	r2, r0
 8003518:	4293      	cmp	r3, r2
 800351a:	4618      	mov	r0, r3
 800351c:	d101      	bne.n	8003522 <memchr+0x12>
 800351e:	2000      	movs	r0, #0
 8003520:	e003      	b.n	800352a <memchr+0x1a>
 8003522:	7804      	ldrb	r4, [r0, #0]
 8003524:	3301      	adds	r3, #1
 8003526:	428c      	cmp	r4, r1
 8003528:	d1f6      	bne.n	8003518 <memchr+0x8>
 800352a:	bd10      	pop	{r4, pc}

0800352c <_realloc_r>:
 800352c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003530:	4607      	mov	r7, r0
 8003532:	4614      	mov	r4, r2
 8003534:	460d      	mov	r5, r1
 8003536:	b921      	cbnz	r1, 8003542 <_realloc_r+0x16>
 8003538:	4611      	mov	r1, r2
 800353a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800353e:	f7ff bc49 	b.w	8002dd4 <_malloc_r>
 8003542:	b92a      	cbnz	r2, 8003550 <_realloc_r+0x24>
 8003544:	f7ff fbdc 	bl	8002d00 <_free_r>
 8003548:	4625      	mov	r5, r4
 800354a:	4628      	mov	r0, r5
 800354c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003550:	f000 f81a 	bl	8003588 <_malloc_usable_size_r>
 8003554:	4284      	cmp	r4, r0
 8003556:	4606      	mov	r6, r0
 8003558:	d802      	bhi.n	8003560 <_realloc_r+0x34>
 800355a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800355e:	d8f4      	bhi.n	800354a <_realloc_r+0x1e>
 8003560:	4621      	mov	r1, r4
 8003562:	4638      	mov	r0, r7
 8003564:	f7ff fc36 	bl	8002dd4 <_malloc_r>
 8003568:	4680      	mov	r8, r0
 800356a:	b908      	cbnz	r0, 8003570 <_realloc_r+0x44>
 800356c:	4645      	mov	r5, r8
 800356e:	e7ec      	b.n	800354a <_realloc_r+0x1e>
 8003570:	42b4      	cmp	r4, r6
 8003572:	4622      	mov	r2, r4
 8003574:	4629      	mov	r1, r5
 8003576:	bf28      	it	cs
 8003578:	4632      	movcs	r2, r6
 800357a:	f7ff fbb3 	bl	8002ce4 <memcpy>
 800357e:	4629      	mov	r1, r5
 8003580:	4638      	mov	r0, r7
 8003582:	f7ff fbbd 	bl	8002d00 <_free_r>
 8003586:	e7f1      	b.n	800356c <_realloc_r+0x40>

08003588 <_malloc_usable_size_r>:
 8003588:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800358c:	1f18      	subs	r0, r3, #4
 800358e:	2b00      	cmp	r3, #0
 8003590:	bfbc      	itt	lt
 8003592:	580b      	ldrlt	r3, [r1, r0]
 8003594:	18c0      	addlt	r0, r0, r3
 8003596:	4770      	bx	lr

08003598 <_init>:
 8003598:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800359a:	bf00      	nop
 800359c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800359e:	bc08      	pop	{r3}
 80035a0:	469e      	mov	lr, r3
 80035a2:	4770      	bx	lr

080035a4 <_fini>:
 80035a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035a6:	bf00      	nop
 80035a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80035aa:	bc08      	pop	{r3}
 80035ac:	469e      	mov	lr, r3
 80035ae:	4770      	bx	lr
