
olmazbee_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003384  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000810  08003490  08003490  00004490  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003ca0  08003ca0  0000505c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08003ca0  08003ca0  0000505c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08003ca0  08003ca0  0000505c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003ca0  08003ca0  00004ca0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003ca4  08003ca4  00004ca4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08003ca8  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000610  2000005c  08003d04  0000505c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000066c  08003d04  0000566c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000505c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b911  00000000  00000000  00005085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ce7  00000000  00000000  00010996  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d28  00000000  00000000  00012680  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a41  00000000  00000000  000133a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018076  00000000  00000000  00013de9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f6e6  00000000  00000000  0002be5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b642  00000000  00000000  0003b545  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c6b87  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003cb0  00000000  00000000  000c6bcc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000051  00000000  00000000  000ca87c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000005c 	.word	0x2000005c
 8000128:	00000000 	.word	0x00000000
 800012c:	08003478 	.word	0x08003478

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000060 	.word	0x20000060
 8000148:	08003478 	.word	0x08003478

0800014c <microDelay>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// 1. 微秒延时函数
void microDelay(uint16_t delay)
{
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	4603      	mov	r3, r0
 8000154:	80fb      	strh	r3, [r7, #6]
__HAL_TIM_SET_COUNTER(&htim1, 0);
 8000156:	4b08      	ldr	r3, [pc, #32]	@ (8000178 <microDelay+0x2c>)
 8000158:	681b      	ldr	r3, [r3, #0]
 800015a:	2200      	movs	r2, #0
 800015c:	625a      	str	r2, [r3, #36]	@ 0x24
while (__HAL_TIM_GET_COUNTER(&htim1) < delay);
 800015e:	bf00      	nop
 8000160:	4b05      	ldr	r3, [pc, #20]	@ (8000178 <microDelay+0x2c>)
 8000162:	681b      	ldr	r3, [r3, #0]
 8000164:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000166:	88fb      	ldrh	r3, [r7, #6]
 8000168:	429a      	cmp	r2, r3
 800016a:	d3f9      	bcc.n	8000160 <microDelay+0x14>
}
 800016c:	bf00      	nop
 800016e:	bf00      	nop
 8000170:	370c      	adds	r7, #12
 8000172:	46bd      	mov	sp, r7
 8000174:	bc80      	pop	{r7}
 8000176:	4770      	bx	lr
 8000178:	200000cc 	.word	0x200000cc

0800017c <Set_Pin_Output>:

// 2. 设置引脚为输出模式
void Set_Pin_Output(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800017c:	b580      	push	{r7, lr}
 800017e:	b086      	sub	sp, #24
 8000180:	af00      	add	r7, sp, #0
 8000182:	6078      	str	r0, [r7, #4]
 8000184:	460b      	mov	r3, r1
 8000186:	807b      	strh	r3, [r7, #2]
GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000188:	f107 0308 	add.w	r3, r7, #8
 800018c:	2200      	movs	r2, #0
 800018e:	601a      	str	r2, [r3, #0]
 8000190:	605a      	str	r2, [r3, #4]
 8000192:	609a      	str	r2, [r3, #8]
 8000194:	60da      	str	r2, [r3, #12]
GPIO_InitStruct.Pin = GPIO_Pin;
 8000196:	887b      	ldrh	r3, [r7, #2]
 8000198:	60bb      	str	r3, [r7, #8]
GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800019a:	2301      	movs	r3, #1
 800019c:	60fb      	str	r3, [r7, #12]
GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800019e:	2302      	movs	r3, #2
 80001a0:	617b      	str	r3, [r7, #20]
HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 80001a2:	f107 0308 	add.w	r3, r7, #8
 80001a6:	4619      	mov	r1, r3
 80001a8:	6878      	ldr	r0, [r7, #4]
 80001aa:	f000 ff95 	bl	80010d8 <HAL_GPIO_Init>
}
 80001ae:	bf00      	nop
 80001b0:	3718      	adds	r7, #24
 80001b2:	46bd      	mov	sp, r7
 80001b4:	bd80      	pop	{r7, pc}

080001b6 <Set_Pin_Input>:

// 3. 设置引脚为输入模式
void Set_Pin_Input(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80001b6:	b580      	push	{r7, lr}
 80001b8:	b086      	sub	sp, #24
 80001ba:	af00      	add	r7, sp, #0
 80001bc:	6078      	str	r0, [r7, #4]
 80001be:	460b      	mov	r3, r1
 80001c0:	807b      	strh	r3, [r7, #2]
GPIO_InitTypeDef GPIO_InitStruct = {0};
 80001c2:	f107 0308 	add.w	r3, r7, #8
 80001c6:	2200      	movs	r2, #0
 80001c8:	601a      	str	r2, [r3, #0]
 80001ca:	605a      	str	r2, [r3, #4]
 80001cc:	609a      	str	r2, [r3, #8]
 80001ce:	60da      	str	r2, [r3, #12]
GPIO_InitStruct.Pin = GPIO_Pin;
 80001d0:	887b      	ldrh	r3, [r7, #2]
 80001d2:	60bb      	str	r3, [r7, #8]
GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80001d4:	2300      	movs	r3, #0
 80001d6:	60fb      	str	r3, [r7, #12]
GPIO_InitStruct.Pull = GPIO_NOPULL; // 假设外部已有上拉电阻
 80001d8:	2300      	movs	r3, #0
 80001da:	613b      	str	r3, [r7, #16]
HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 80001dc:	f107 0308 	add.w	r3, r7, #8
 80001e0:	4619      	mov	r1, r3
 80001e2:	6878      	ldr	r0, [r7, #4]
 80001e4:	f000 ff78 	bl	80010d8 <HAL_GPIO_Init>
}
 80001e8:	bf00      	nop
 80001ea:	3718      	adds	r7, #24
 80001ec:	46bd      	mov	sp, r7
 80001ee:	bd80      	pop	{r7, pc}

080001f0 <DHT11_Start>:

// 4. DHT11 开始信号
uint8_t DHT11_Start(void)
{
 80001f0:	b580      	push	{r7, lr}
 80001f2:	b082      	sub	sp, #8
 80001f4:	af00      	add	r7, sp, #0
uint8_t Response = 0;
 80001f6:	2300      	movs	r3, #0
 80001f8:	717b      	strb	r3, [r7, #5]
Set_Pin_Output(DHT11_PORT, DHT11_PIN);  // 设置为输出
 80001fa:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80001fe:	482d      	ldr	r0, [pc, #180]	@ (80002b4 <DHT11_Start+0xc4>)
 8000200:	f7ff ffbc 	bl	800017c <Set_Pin_Output>
HAL_GPIO_WritePin(DHT11_PORT, DHT11_PIN, 0); // 拉低
 8000204:	2200      	movs	r2, #0
 8000206:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800020a:	482a      	ldr	r0, [pc, #168]	@ (80002b4 <DHT11_Start+0xc4>)
 800020c:	f001 f8ff 	bl	800140e <HAL_GPIO_WritePin>
HAL_Delay(20); // 至少18ms
 8000210:	2014      	movs	r0, #20
 8000212:	f000 fe59 	bl	8000ec8 <HAL_Delay>
HAL_GPIO_WritePin(DHT11_PORT, DHT11_PIN, 1); // 拉高
 8000216:	2201      	movs	r2, #1
 8000218:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800021c:	4825      	ldr	r0, [pc, #148]	@ (80002b4 <DHT11_Start+0xc4>)
 800021e:	f001 f8f6 	bl	800140e <HAL_GPIO_WritePin>
microDelay(30); // 等待 30us
 8000222:	201e      	movs	r0, #30
 8000224:	f7ff ff92 	bl	800014c <microDelay>
Set_Pin_Input(DHT11_PORT, DHT11_PIN); // 设置为输入
 8000228:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800022c:	4821      	ldr	r0, [pc, #132]	@ (80002b4 <DHT11_Start+0xc4>)
 800022e:	f7ff ffc2 	bl	80001b6 <Set_Pin_Input>

// 等待传感器响应
uint16_t timeout = 0;
 8000232:	2300      	movs	r3, #0
 8000234:	80fb      	strh	r3, [r7, #6]
while(HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN))
 8000236:	e008      	b.n	800024a <DHT11_Start+0x5a>
{
  timeout++;
 8000238:	88fb      	ldrh	r3, [r7, #6]
 800023a:	3301      	adds	r3, #1
 800023c:	80fb      	strh	r3, [r7, #6]
  if(timeout > 1000) return 0; // 超时
 800023e:	88fb      	ldrh	r3, [r7, #6]
 8000240:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000244:	d901      	bls.n	800024a <DHT11_Start+0x5a>
 8000246:	2300      	movs	r3, #0
 8000248:	e030      	b.n	80002ac <DHT11_Start+0xbc>
while(HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN))
 800024a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800024e:	4819      	ldr	r0, [pc, #100]	@ (80002b4 <DHT11_Start+0xc4>)
 8000250:	f001 f8c6 	bl	80013e0 <HAL_GPIO_ReadPin>
 8000254:	4603      	mov	r3, r0
 8000256:	2b00      	cmp	r3, #0
 8000258:	d1ee      	bne.n	8000238 <DHT11_Start+0x48>
}
timeout = 0;
 800025a:	2300      	movs	r3, #0
 800025c:	80fb      	strh	r3, [r7, #6]
while(!HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN))
 800025e:	e008      	b.n	8000272 <DHT11_Start+0x82>
{
  timeout++;
 8000260:	88fb      	ldrh	r3, [r7, #6]
 8000262:	3301      	adds	r3, #1
 8000264:	80fb      	strh	r3, [r7, #6]
  if(timeout > 1000) return 0; // 超时
 8000266:	88fb      	ldrh	r3, [r7, #6]
 8000268:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800026c:	d901      	bls.n	8000272 <DHT11_Start+0x82>
 800026e:	2300      	movs	r3, #0
 8000270:	e01c      	b.n	80002ac <DHT11_Start+0xbc>
while(!HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN))
 8000272:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000276:	480f      	ldr	r0, [pc, #60]	@ (80002b4 <DHT11_Start+0xc4>)
 8000278:	f001 f8b2 	bl	80013e0 <HAL_GPIO_ReadPin>
 800027c:	4603      	mov	r3, r0
 800027e:	2b00      	cmp	r3, #0
 8000280:	d0ee      	beq.n	8000260 <DHT11_Start+0x70>
}
timeout = 0;
 8000282:	2300      	movs	r3, #0
 8000284:	80fb      	strh	r3, [r7, #6]
while(HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN))
 8000286:	e008      	b.n	800029a <DHT11_Start+0xaa>
{
  timeout++;
 8000288:	88fb      	ldrh	r3, [r7, #6]
 800028a:	3301      	adds	r3, #1
 800028c:	80fb      	strh	r3, [r7, #6]
  if(timeout > 1000) return 0; // 超时
 800028e:	88fb      	ldrh	r3, [r7, #6]
 8000290:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000294:	d901      	bls.n	800029a <DHT11_Start+0xaa>
 8000296:	2300      	movs	r3, #0
 8000298:	e008      	b.n	80002ac <DHT11_Start+0xbc>
while(HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN))
 800029a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800029e:	4805      	ldr	r0, [pc, #20]	@ (80002b4 <DHT11_Start+0xc4>)
 80002a0:	f001 f89e 	bl	80013e0 <HAL_GPIO_ReadPin>
 80002a4:	4603      	mov	r3, r0
 80002a6:	2b00      	cmp	r3, #0
 80002a8:	d1ee      	bne.n	8000288 <DHT11_Start+0x98>
}

return 1; // 成功
 80002aa:	2301      	movs	r3, #1
}
 80002ac:	4618      	mov	r0, r3
 80002ae:	3708      	adds	r7, #8
 80002b0:	46bd      	mov	sp, r7
 80002b2:	bd80      	pop	{r7, pc}
 80002b4:	40010c00 	.word	0x40010c00

080002b8 <DHT11_Read>:

// 5. DHT11 读取一个字节
uint8_t DHT11_Read(void)
{
 80002b8:	b580      	push	{r7, lr}
 80002ba:	b082      	sub	sp, #8
 80002bc:	af00      	add	r7, sp, #0
uint8_t i, value = 0;
 80002be:	2300      	movs	r3, #0
 80002c0:	71bb      	strb	r3, [r7, #6]
for (i = 0; i < 8; i++)
 80002c2:	2300      	movs	r3, #0
 80002c4:	71fb      	strb	r3, [r7, #7]
 80002c6:	e03a      	b.n	800033e <DHT11_Read+0x86>
{
  while (!HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN)); // 等待位开始 (高)
 80002c8:	bf00      	nop
 80002ca:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80002ce:	4820      	ldr	r0, [pc, #128]	@ (8000350 <DHT11_Read+0x98>)
 80002d0:	f001 f886 	bl	80013e0 <HAL_GPIO_ReadPin>
 80002d4:	4603      	mov	r3, r0
 80002d6:	2b00      	cmp	r3, #0
 80002d8:	d0f7      	beq.n	80002ca <DHT11_Read+0x12>
  microDelay(40); // 延时40us
 80002da:	2028      	movs	r0, #40	@ 0x28
 80002dc:	f7ff ff36 	bl	800014c <microDelay>
  if (!HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN)) // 如果40us后还是低电平, 则是 0
 80002e0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80002e4:	481a      	ldr	r0, [pc, #104]	@ (8000350 <DHT11_Read+0x98>)
 80002e6:	f001 f87b 	bl	80013e0 <HAL_GPIO_ReadPin>
 80002ea:	4603      	mov	r3, r0
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d10e      	bne.n	800030e <DHT11_Read+0x56>
  {
    value &= ~(1 << (7 - i));
 80002f0:	79fb      	ldrb	r3, [r7, #7]
 80002f2:	f1c3 0307 	rsb	r3, r3, #7
 80002f6:	2201      	movs	r2, #1
 80002f8:	fa02 f303 	lsl.w	r3, r2, r3
 80002fc:	b25b      	sxtb	r3, r3
 80002fe:	43db      	mvns	r3, r3
 8000300:	b25a      	sxtb	r2, r3
 8000302:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000306:	4013      	ands	r3, r2
 8000308:	b25b      	sxtb	r3, r3
 800030a:	71bb      	strb	r3, [r7, #6]
 800030c:	e00b      	b.n	8000326 <DHT11_Read+0x6e>
  }
  else // 否则是 1
  {
    value |= (1 << (7 - i));
 800030e:	79fb      	ldrb	r3, [r7, #7]
 8000310:	f1c3 0307 	rsb	r3, r3, #7
 8000314:	2201      	movs	r2, #1
 8000316:	fa02 f303 	lsl.w	r3, r2, r3
 800031a:	b25a      	sxtb	r2, r3
 800031c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000320:	4313      	orrs	r3, r2
 8000322:	b25b      	sxtb	r3, r3
 8000324:	71bb      	strb	r3, [r7, #6]
  }
  while (HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN)); // 等待位结束 (低)
 8000326:	bf00      	nop
 8000328:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800032c:	4808      	ldr	r0, [pc, #32]	@ (8000350 <DHT11_Read+0x98>)
 800032e:	f001 f857 	bl	80013e0 <HAL_GPIO_ReadPin>
 8000332:	4603      	mov	r3, r0
 8000334:	2b00      	cmp	r3, #0
 8000336:	d1f7      	bne.n	8000328 <DHT11_Read+0x70>
for (i = 0; i < 8; i++)
 8000338:	79fb      	ldrb	r3, [r7, #7]
 800033a:	3301      	adds	r3, #1
 800033c:	71fb      	strb	r3, [r7, #7]
 800033e:	79fb      	ldrb	r3, [r7, #7]
 8000340:	2b07      	cmp	r3, #7
 8000342:	d9c1      	bls.n	80002c8 <DHT11_Read+0x10>
}
return value;
 8000344:	79bb      	ldrb	r3, [r7, #6]
}
 8000346:	4618      	mov	r0, r3
 8000348:	3708      	adds	r7, #8
 800034a:	46bd      	mov	sp, r7
 800034c:	bd80      	pop	{r7, pc}
 800034e:	bf00      	nop
 8000350:	40010c00 	.word	0x40010c00

08000354 <main>:
/**
* @brief  The application entry point.
* @retval int
*/
int main(void)
{
 8000354:	b580      	push	{r7, lr}
 8000356:	b094      	sub	sp, #80	@ 0x50
 8000358:	af02      	add	r7, sp, #8
/* USER CODE END 1 */

/* MCU Configuration--------------------------------------------------------*/

/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
HAL_Init();
 800035a:	f000 fd53 	bl	8000e04 <HAL_Init>
/* USER CODE BEGIN Init */

/* USER CODE END Init */

/* Configure the system clock */
SystemClock_Config();
 800035e:	f000 f8dd 	bl	800051c <SystemClock_Config>
/* USER CODE BEGIN SysInit */

/* USER CODE END SysInit */

/* Initialize all configured peripherals */
MX_GPIO_Init();
 8000362:	f000 f99f 	bl	80006a4 <MX_GPIO_Init>
MX_I2C1_Init();
 8000366:	f000 f91f 	bl	80005a8 <MX_I2C1_Init>
MX_TIM1_Init();
 800036a:	f000 f94b 	bl	8000604 <MX_TIM1_Init>
/* USER CODE BEGIN 2 */
HAL_TIM_Base_Start(&htim1); // 启动微秒定时器
 800036e:	4863      	ldr	r0, [pc, #396]	@ (80004fc <main+0x1a8>)
 8000370:	f002 f95e 	bl	8002630 <HAL_TIM_Base_Start>
ssd1306_Init(); // 初始化OLED
 8000374:	f000 fa2c 	bl	80007d0 <ssd1306_Init>

ssd1306_SetCursor(0, 0);
 8000378:	2100      	movs	r1, #0
 800037a:	2000      	movs	r0, #0
 800037c:	f000 fbdc 	bl	8000b38 <ssd1306_SetCursor>
ssd1306_WriteString("Starting...", Font_7x10, White);
 8000380:	4b5f      	ldr	r3, [pc, #380]	@ (8000500 <main+0x1ac>)
 8000382:	2201      	movs	r2, #1
 8000384:	9200      	str	r2, [sp, #0]
 8000386:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000388:	485e      	ldr	r0, [pc, #376]	@ (8000504 <main+0x1b0>)
 800038a:	f000 fbaf 	bl	8000aec <ssd1306_WriteString>
ssd1306_UpdateScreen();
 800038e:	f000 faa1 	bl	80008d4 <ssd1306_UpdateScreen>
HAL_Delay(1000);
 8000392:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000396:	f000 fd97 	bl	8000ec8 <HAL_Delay>

//
// !!! --- 把变量定义在 while 循环外面 --- !!!
//
uint8_t RHI = 0, RHD = 0, TCI = 0, TCD = 0, SUM = 0;
 800039a:	2300      	movs	r3, #0
 800039c:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
 80003a0:	2300      	movs	r3, #0
 80003a2:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
 80003a6:	2300      	movs	r3, #0
 80003a8:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80003ac:	2300      	movs	r3, #0
 80003ae:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80003b2:	2300      	movs	r3, #0
 80003b4:	f887 3041 	strb.w	r3, [r7, #65]	@ 0x41
uint8_t Temperature = 0; // 初始温度为0
 80003b8:	2300      	movs	r3, #0
 80003ba:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
uint8_t Humidity = 0;    // 初始湿度为0
 80003be:	2300      	movs	r3, #0
 80003c0:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
  /* USER CODE END WHILE */

  /* USER CODE BEGIN 3 */

  // --- 1. 读取传感器 ---
  if (DHT11_Start())
 80003c4:	f7ff ff14 	bl	80001f0 <DHT11_Start>
 80003c8:	4603      	mov	r3, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d02f      	beq.n	800042e <main+0xda>
  {
    RHI = DHT11_Read(); // 湿度整数
 80003ce:	f7ff ff73 	bl	80002b8 <DHT11_Read>
 80003d2:	4603      	mov	r3, r0
 80003d4:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
    RHD = DHT11_Read(); // 湿度小数
 80003d8:	f7ff ff6e 	bl	80002b8 <DHT11_Read>
 80003dc:	4603      	mov	r3, r0
 80003de:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
    TCI = DHT11_Read(); // 温度整数
 80003e2:	f7ff ff69 	bl	80002b8 <DHT11_Read>
 80003e6:	4603      	mov	r3, r0
 80003e8:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
    TCD = DHT11_Read(); // 温度小数
 80003ec:	f7ff ff64 	bl	80002b8 <DHT11_Read>
 80003f0:	4603      	mov	r3, r0
 80003f2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
    SUM = DHT11_Read(); // 校验和
 80003f6:	f7ff ff5f 	bl	80002b8 <DHT11_Read>
 80003fa:	4603      	mov	r3, r0
 80003fc:	f887 3041 	strb.w	r3, [r7, #65]	@ 0x41

    // 只有在校验和正确时, 才更新温湿度值
    // 如果校验失败, Temperature 会保持上一次的正确数值
    if (RHI + RHD + TCI + TCD == SUM)
 8000400:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8000404:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8000408:	441a      	add	r2, r3
 800040a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800040e:	441a      	add	r2, r3
 8000410:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 8000414:	441a      	add	r2, r3
 8000416:	f897 3041 	ldrb.w	r3, [r7, #65]	@ 0x41
 800041a:	429a      	cmp	r2, r3
 800041c:	d107      	bne.n	800042e <main+0xda>
    {
      Temperature = TCI;
 800041e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8000422:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      Humidity = RHI;
 8000426:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 800042a:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46


  // --- 2. 控制逻辑 (风扇) ---
      // 硬件: 风扇在 PB4, 高电平有效 (SET = ON)
      // 逻辑: 温度 > 25 时 ON
      if (Temperature > 25)
 800042e:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8000432:	2b19      	cmp	r3, #25
 8000434:	d90a      	bls.n	800044c <main+0xf8>
      {
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET); // <-- 控制 PB4, SET
 8000436:	2201      	movs	r2, #1
 8000438:	2110      	movs	r1, #16
 800043a:	4833      	ldr	r0, [pc, #204]	@ (8000508 <main+0x1b4>)
 800043c:	f000 ffe7 	bl	800140e <HAL_GPIO_WritePin>
        sprintf(fan_str, "FAN: ON");
 8000440:	1d3b      	adds	r3, r7, #4
 8000442:	4932      	ldr	r1, [pc, #200]	@ (800050c <main+0x1b8>)
 8000444:	4618      	mov	r0, r3
 8000446:	f002 fb67 	bl	8002b18 <siprintf>
 800044a:	e009      	b.n	8000460 <main+0x10c>
      }
      else
      {
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET); // <-- 控制 PB4, RESET
 800044c:	2200      	movs	r2, #0
 800044e:	2110      	movs	r1, #16
 8000450:	482d      	ldr	r0, [pc, #180]	@ (8000508 <main+0x1b4>)
 8000452:	f000 ffdc 	bl	800140e <HAL_GPIO_WritePin>
        sprintf(fan_str, "FAN: OFF");
 8000456:	1d3b      	adds	r3, r7, #4
 8000458:	492d      	ldr	r1, [pc, #180]	@ (8000510 <main+0x1bc>)
 800045a:	4618      	mov	r0, r3
 800045c:	f002 fb5c 	bl	8002b18 <siprintf>
      }

      // --- 3. 控制逻辑 (蒸汽) ---
      // 硬件: 蒸汽在 PB10, 低电平有效 (RESET = ON)
      // 逻辑: 湿度 < 55 时 ON (你可以改回 45)
      if (Humidity < 55)
 8000460:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8000464:	2b36      	cmp	r3, #54	@ 0x36
 8000466:	d806      	bhi.n	8000476 <main+0x122>
      {
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET); // <-- 控制 PB10, RESET
 8000468:	2200      	movs	r2, #0
 800046a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800046e:	4826      	ldr	r0, [pc, #152]	@ (8000508 <main+0x1b4>)
 8000470:	f000 ffcd 	bl	800140e <HAL_GPIO_WritePin>
 8000474:	e005      	b.n	8000482 <main+0x12e>
      }
      else
      {
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET); // <-- 控制 PB10, SET
 8000476:	2201      	movs	r2, #1
 8000478:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800047c:	4822      	ldr	r0, [pc, #136]	@ (8000508 <main+0x1b4>)
 800047e:	f000 ffc6 	bl	800140e <HAL_GPIO_WritePin>
      }


  // --- 4. 显示数据到OLED ---
  sprintf(temp_str, "Temp: %d C", Temperature);
 8000482:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 8000486:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800048a:	4922      	ldr	r1, [pc, #136]	@ (8000514 <main+0x1c0>)
 800048c:	4618      	mov	r0, r3
 800048e:	f002 fb43 	bl	8002b18 <siprintf>
  sprintf(hum_str, "Hum:  %d %%", Humidity);
 8000492:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 8000496:	f107 0318 	add.w	r3, r7, #24
 800049a:	491f      	ldr	r1, [pc, #124]	@ (8000518 <main+0x1c4>)
 800049c:	4618      	mov	r0, r3
 800049e:	f002 fb3b 	bl	8002b18 <siprintf>

  ssd1306_Fill(Black); // 清屏
 80004a2:	2000      	movs	r0, #0
 80004a4:	f000 f9fe 	bl	80008a4 <ssd1306_Fill>

  ssd1306_SetCursor(0, 5);  // 第1行
 80004a8:	2105      	movs	r1, #5
 80004aa:	2000      	movs	r0, #0
 80004ac:	f000 fb44 	bl	8000b38 <ssd1306_SetCursor>
  ssd1306_WriteString(temp_str, Font_7x10, White);
 80004b0:	4b13      	ldr	r3, [pc, #76]	@ (8000500 <main+0x1ac>)
 80004b2:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 80004b6:	2201      	movs	r2, #1
 80004b8:	9200      	str	r2, [sp, #0]
 80004ba:	cb0e      	ldmia	r3, {r1, r2, r3}
 80004bc:	f000 fb16 	bl	8000aec <ssd1306_WriteString>

  ssd1306_SetCursor(0, 20); // 第2行
 80004c0:	2114      	movs	r1, #20
 80004c2:	2000      	movs	r0, #0
 80004c4:	f000 fb38 	bl	8000b38 <ssd1306_SetCursor>
  ssd1306_WriteString(hum_str, Font_7x10, White);
 80004c8:	4b0d      	ldr	r3, [pc, #52]	@ (8000500 <main+0x1ac>)
 80004ca:	f107 0018 	add.w	r0, r7, #24
 80004ce:	2201      	movs	r2, #1
 80004d0:	9200      	str	r2, [sp, #0]
 80004d2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80004d4:	f000 fb0a 	bl	8000aec <ssd1306_WriteString>

  ssd1306_SetCursor(0, 35); // 第3行 (调试行)
 80004d8:	2123      	movs	r1, #35	@ 0x23
 80004da:	2000      	movs	r0, #0
 80004dc:	f000 fb2c 	bl	8000b38 <ssd1306_SetCursor>
  ssd1306_WriteString(fan_str, Font_7x10, White);
 80004e0:	4b07      	ldr	r3, [pc, #28]	@ (8000500 <main+0x1ac>)
 80004e2:	1d38      	adds	r0, r7, #4
 80004e4:	2201      	movs	r2, #1
 80004e6:	9200      	str	r2, [sp, #0]
 80004e8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80004ea:	f000 faff 	bl	8000aec <ssd1306_WriteString>

  ssd1306_UpdateScreen(); // 推送数据到屏幕
 80004ee:	f000 f9f1 	bl	80008d4 <ssd1306_UpdateScreen>

  HAL_Delay(1000); // 每一秒钟重复一次
 80004f2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80004f6:	f000 fce7 	bl	8000ec8 <HAL_Delay>
  if (DHT11_Start())
 80004fa:	e763      	b.n	80003c4 <main+0x70>
 80004fc:	200000cc 	.word	0x200000cc
 8000500:	08003c34 	.word	0x08003c34
 8000504:	08003490 	.word	0x08003490
 8000508:	40010c00 	.word	0x40010c00
 800050c:	0800349c 	.word	0x0800349c
 8000510:	080034a4 	.word	0x080034a4
 8000514:	080034b0 	.word	0x080034b0
 8000518:	080034bc 	.word	0x080034bc

0800051c <SystemClock_Config>:
/**
* @brief System Clock Configuration
* @retval None
*/
void SystemClock_Config(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b090      	sub	sp, #64	@ 0x40
 8000520:	af00      	add	r7, sp, #0
RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000522:	f107 0318 	add.w	r3, r7, #24
 8000526:	2228      	movs	r2, #40	@ 0x28
 8000528:	2100      	movs	r1, #0
 800052a:	4618      	mov	r0, r3
 800052c:	f002 fb16 	bl	8002b5c <memset>
RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000530:	1d3b      	adds	r3, r7, #4
 8000532:	2200      	movs	r2, #0
 8000534:	601a      	str	r2, [r3, #0]
 8000536:	605a      	str	r2, [r3, #4]
 8000538:	609a      	str	r2, [r3, #8]
 800053a:	60da      	str	r2, [r3, #12]
 800053c:	611a      	str	r2, [r3, #16]

/** Initializes the RCC Oscillators according to the specified parameters
* in the RCC_OscInitTypeDef structure.
*/
RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800053e:	2301      	movs	r3, #1
 8000540:	61bb      	str	r3, [r7, #24]
RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000542:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000546:	61fb      	str	r3, [r7, #28]
RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000548:	2300      	movs	r3, #0
 800054a:	623b      	str	r3, [r7, #32]
RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800054c:	2301      	movs	r3, #1
 800054e:	62bb      	str	r3, [r7, #40]	@ 0x28
RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000550:	2302      	movs	r3, #2
 8000552:	637b      	str	r3, [r7, #52]	@ 0x34
RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000554:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000558:	63bb      	str	r3, [r7, #56]	@ 0x38
RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800055a:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 800055e:	63fb      	str	r3, [r7, #60]	@ 0x3c
if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000560:	f107 0318 	add.w	r3, r7, #24
 8000564:	4618      	mov	r0, r3
 8000566:	f001 fc17 	bl	8001d98 <HAL_RCC_OscConfig>
 800056a:	4603      	mov	r3, r0
 800056c:	2b00      	cmp	r3, #0
 800056e:	d001      	beq.n	8000574 <SystemClock_Config+0x58>
{
  Error_Handler();
 8000570:	f000 f8f0 	bl	8000754 <Error_Handler>
}

/** Initializes the CPU, AHB and APB buses clocks
*/
RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000574:	230f      	movs	r3, #15
 8000576:	607b      	str	r3, [r7, #4]
                            |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000578:	2302      	movs	r3, #2
 800057a:	60bb      	str	r3, [r7, #8]
RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800057c:	2300      	movs	r3, #0
 800057e:	60fb      	str	r3, [r7, #12]
RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000580:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000584:	613b      	str	r3, [r7, #16]
RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000586:	2300      	movs	r3, #0
 8000588:	617b      	str	r3, [r7, #20]

if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800058a:	1d3b      	adds	r3, r7, #4
 800058c:	2102      	movs	r1, #2
 800058e:	4618      	mov	r0, r3
 8000590:	f001 fe84 	bl	800229c <HAL_RCC_ClockConfig>
 8000594:	4603      	mov	r3, r0
 8000596:	2b00      	cmp	r3, #0
 8000598:	d001      	beq.n	800059e <SystemClock_Config+0x82>
{
  Error_Handler();
 800059a:	f000 f8db 	bl	8000754 <Error_Handler>
}
}
 800059e:	bf00      	nop
 80005a0:	3740      	adds	r7, #64	@ 0x40
 80005a2:	46bd      	mov	sp, r7
 80005a4:	bd80      	pop	{r7, pc}
	...

080005a8 <MX_I2C1_Init>:
* @brief I2C1 Initialization Function
* @param None
* @retval None
*/
static void MX_I2C1_Init(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	af00      	add	r7, sp, #0
/* USER CODE END I2C1_Init 0 */

/* USER CODE BEGIN I2C1_Init 1 */

/* USER CODE END I2C1_Init 1 */
hi2c1.Instance = I2C1;
 80005ac:	4b12      	ldr	r3, [pc, #72]	@ (80005f8 <MX_I2C1_Init+0x50>)
 80005ae:	4a13      	ldr	r2, [pc, #76]	@ (80005fc <MX_I2C1_Init+0x54>)
 80005b0:	601a      	str	r2, [r3, #0]
hi2c1.Init.ClockSpeed = 100000;
 80005b2:	4b11      	ldr	r3, [pc, #68]	@ (80005f8 <MX_I2C1_Init+0x50>)
 80005b4:	4a12      	ldr	r2, [pc, #72]	@ (8000600 <MX_I2C1_Init+0x58>)
 80005b6:	605a      	str	r2, [r3, #4]
hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80005b8:	4b0f      	ldr	r3, [pc, #60]	@ (80005f8 <MX_I2C1_Init+0x50>)
 80005ba:	2200      	movs	r2, #0
 80005bc:	609a      	str	r2, [r3, #8]
hi2c1.Init.OwnAddress1 = 0;
 80005be:	4b0e      	ldr	r3, [pc, #56]	@ (80005f8 <MX_I2C1_Init+0x50>)
 80005c0:	2200      	movs	r2, #0
 80005c2:	60da      	str	r2, [r3, #12]
hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80005c4:	4b0c      	ldr	r3, [pc, #48]	@ (80005f8 <MX_I2C1_Init+0x50>)
 80005c6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80005ca:	611a      	str	r2, [r3, #16]
hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80005cc:	4b0a      	ldr	r3, [pc, #40]	@ (80005f8 <MX_I2C1_Init+0x50>)
 80005ce:	2200      	movs	r2, #0
 80005d0:	615a      	str	r2, [r3, #20]
hi2c1.Init.OwnAddress2 = 0;
 80005d2:	4b09      	ldr	r3, [pc, #36]	@ (80005f8 <MX_I2C1_Init+0x50>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	619a      	str	r2, [r3, #24]
hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80005d8:	4b07      	ldr	r3, [pc, #28]	@ (80005f8 <MX_I2C1_Init+0x50>)
 80005da:	2200      	movs	r2, #0
 80005dc:	61da      	str	r2, [r3, #28]
hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80005de:	4b06      	ldr	r3, [pc, #24]	@ (80005f8 <MX_I2C1_Init+0x50>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	621a      	str	r2, [r3, #32]
if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80005e4:	4804      	ldr	r0, [pc, #16]	@ (80005f8 <MX_I2C1_Init+0x50>)
 80005e6:	f000 ff2b 	bl	8001440 <HAL_I2C_Init>
 80005ea:	4603      	mov	r3, r0
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d001      	beq.n	80005f4 <MX_I2C1_Init+0x4c>
{
  Error_Handler();
 80005f0:	f000 f8b0 	bl	8000754 <Error_Handler>
}
/* USER CODE BEGIN I2C1_Init 2 */

/* USER CODE END I2C1_Init 2 */

}
 80005f4:	bf00      	nop
 80005f6:	bd80      	pop	{r7, pc}
 80005f8:	20000078 	.word	0x20000078
 80005fc:	40005400 	.word	0x40005400
 8000600:	000186a0 	.word	0x000186a0

08000604 <MX_TIM1_Init>:
* @brief TIM1 Initialization Function
* @param None
* @retval None
*/
static void MX_TIM1_Init(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b086      	sub	sp, #24
 8000608:	af00      	add	r7, sp, #0

/* USER CODE BEGIN TIM1_Init 0 */

/* USER CODE END TIM1_Init 0 */

TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800060a:	f107 0308 	add.w	r3, r7, #8
 800060e:	2200      	movs	r2, #0
 8000610:	601a      	str	r2, [r3, #0]
 8000612:	605a      	str	r2, [r3, #4]
 8000614:	609a      	str	r2, [r3, #8]
 8000616:	60da      	str	r2, [r3, #12]
TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000618:	463b      	mov	r3, r7
 800061a:	2200      	movs	r2, #0
 800061c:	601a      	str	r2, [r3, #0]
 800061e:	605a      	str	r2, [r3, #4]

/* USER CODE BEGIN TIM1_Init 1 */

/* USER CODE END TIM1_Init 1 */
htim1.Instance = TIM1;
 8000620:	4b1e      	ldr	r3, [pc, #120]	@ (800069c <MX_TIM1_Init+0x98>)
 8000622:	4a1f      	ldr	r2, [pc, #124]	@ (80006a0 <MX_TIM1_Init+0x9c>)
 8000624:	601a      	str	r2, [r3, #0]
htim1.Init.Prescaler = 71;
 8000626:	4b1d      	ldr	r3, [pc, #116]	@ (800069c <MX_TIM1_Init+0x98>)
 8000628:	2247      	movs	r2, #71	@ 0x47
 800062a:	605a      	str	r2, [r3, #4]
htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800062c:	4b1b      	ldr	r3, [pc, #108]	@ (800069c <MX_TIM1_Init+0x98>)
 800062e:	2200      	movs	r2, #0
 8000630:	609a      	str	r2, [r3, #8]
htim1.Init.Period = 65535;
 8000632:	4b1a      	ldr	r3, [pc, #104]	@ (800069c <MX_TIM1_Init+0x98>)
 8000634:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000638:	60da      	str	r2, [r3, #12]
htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800063a:	4b18      	ldr	r3, [pc, #96]	@ (800069c <MX_TIM1_Init+0x98>)
 800063c:	2200      	movs	r2, #0
 800063e:	611a      	str	r2, [r3, #16]
htim1.Init.RepetitionCounter = 0;
 8000640:	4b16      	ldr	r3, [pc, #88]	@ (800069c <MX_TIM1_Init+0x98>)
 8000642:	2200      	movs	r2, #0
 8000644:	615a      	str	r2, [r3, #20]
htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000646:	4b15      	ldr	r3, [pc, #84]	@ (800069c <MX_TIM1_Init+0x98>)
 8000648:	2200      	movs	r2, #0
 800064a:	619a      	str	r2, [r3, #24]
if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800064c:	4813      	ldr	r0, [pc, #76]	@ (800069c <MX_TIM1_Init+0x98>)
 800064e:	f001 ff9f 	bl	8002590 <HAL_TIM_Base_Init>
 8000652:	4603      	mov	r3, r0
 8000654:	2b00      	cmp	r3, #0
 8000656:	d001      	beq.n	800065c <MX_TIM1_Init+0x58>
{
  Error_Handler();
 8000658:	f000 f87c 	bl	8000754 <Error_Handler>
}
sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800065c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000660:	60bb      	str	r3, [r7, #8]
if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000662:	f107 0308 	add.w	r3, r7, #8
 8000666:	4619      	mov	r1, r3
 8000668:	480c      	ldr	r0, [pc, #48]	@ (800069c <MX_TIM1_Init+0x98>)
 800066a:	f002 f82b 	bl	80026c4 <HAL_TIM_ConfigClockSource>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d001      	beq.n	8000678 <MX_TIM1_Init+0x74>
{
  Error_Handler();
 8000674:	f000 f86e 	bl	8000754 <Error_Handler>
}
sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000678:	2300      	movs	r3, #0
 800067a:	603b      	str	r3, [r7, #0]
sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800067c:	2300      	movs	r3, #0
 800067e:	607b      	str	r3, [r7, #4]
if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000680:	463b      	mov	r3, r7
 8000682:	4619      	mov	r1, r3
 8000684:	4805      	ldr	r0, [pc, #20]	@ (800069c <MX_TIM1_Init+0x98>)
 8000686:	f002 f9e9 	bl	8002a5c <HAL_TIMEx_MasterConfigSynchronization>
 800068a:	4603      	mov	r3, r0
 800068c:	2b00      	cmp	r3, #0
 800068e:	d001      	beq.n	8000694 <MX_TIM1_Init+0x90>
{
  Error_Handler();
 8000690:	f000 f860 	bl	8000754 <Error_Handler>
}
/* USER CODE BEGIN TIM1_Init 2 */

/* USER CODE END TIM1_Init 2 */

}
 8000694:	bf00      	nop
 8000696:	3718      	adds	r7, #24
 8000698:	46bd      	mov	sp, r7
 800069a:	bd80      	pop	{r7, pc}
 800069c:	200000cc 	.word	0x200000cc
 80006a0:	40012c00 	.word	0x40012c00

080006a4 <MX_GPIO_Init>:
* @brief GPIO Initialization Function
* @param None
* @retval None
*/
static void MX_GPIO_Init(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b088      	sub	sp, #32
 80006a8:	af00      	add	r7, sp, #0
GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006aa:	f107 0310 	add.w	r3, r7, #16
 80006ae:	2200      	movs	r2, #0
 80006b0:	601a      	str	r2, [r3, #0]
 80006b2:	605a      	str	r2, [r3, #4]
 80006b4:	609a      	str	r2, [r3, #8]
 80006b6:	60da      	str	r2, [r3, #12]

/* GPIO Ports Clock Enable */
__HAL_RCC_GPIOD_CLK_ENABLE();
 80006b8:	4b24      	ldr	r3, [pc, #144]	@ (800074c <MX_GPIO_Init+0xa8>)
 80006ba:	699b      	ldr	r3, [r3, #24]
 80006bc:	4a23      	ldr	r2, [pc, #140]	@ (800074c <MX_GPIO_Init+0xa8>)
 80006be:	f043 0320 	orr.w	r3, r3, #32
 80006c2:	6193      	str	r3, [r2, #24]
 80006c4:	4b21      	ldr	r3, [pc, #132]	@ (800074c <MX_GPIO_Init+0xa8>)
 80006c6:	699b      	ldr	r3, [r3, #24]
 80006c8:	f003 0320 	and.w	r3, r3, #32
 80006cc:	60fb      	str	r3, [r7, #12]
 80006ce:	68fb      	ldr	r3, [r7, #12]
__HAL_RCC_GPIOB_CLK_ENABLE();
 80006d0:	4b1e      	ldr	r3, [pc, #120]	@ (800074c <MX_GPIO_Init+0xa8>)
 80006d2:	699b      	ldr	r3, [r3, #24]
 80006d4:	4a1d      	ldr	r2, [pc, #116]	@ (800074c <MX_GPIO_Init+0xa8>)
 80006d6:	f043 0308 	orr.w	r3, r3, #8
 80006da:	6193      	str	r3, [r2, #24]
 80006dc:	4b1b      	ldr	r3, [pc, #108]	@ (800074c <MX_GPIO_Init+0xa8>)
 80006de:	699b      	ldr	r3, [r3, #24]
 80006e0:	f003 0308 	and.w	r3, r3, #8
 80006e4:	60bb      	str	r3, [r7, #8]
 80006e6:	68bb      	ldr	r3, [r7, #8]
__HAL_RCC_GPIOA_CLK_ENABLE();
 80006e8:	4b18      	ldr	r3, [pc, #96]	@ (800074c <MX_GPIO_Init+0xa8>)
 80006ea:	699b      	ldr	r3, [r3, #24]
 80006ec:	4a17      	ldr	r2, [pc, #92]	@ (800074c <MX_GPIO_Init+0xa8>)
 80006ee:	f043 0304 	orr.w	r3, r3, #4
 80006f2:	6193      	str	r3, [r2, #24]
 80006f4:	4b15      	ldr	r3, [pc, #84]	@ (800074c <MX_GPIO_Init+0xa8>)
 80006f6:	699b      	ldr	r3, [r3, #24]
 80006f8:	f003 0304 	and.w	r3, r3, #4
 80006fc:	607b      	str	r3, [r7, #4]
 80006fe:	687b      	ldr	r3, [r7, #4]

/*Configure GPIO pin Output Level */
HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_4, GPIO_PIN_RESET);
 8000700:	2200      	movs	r2, #0
 8000702:	f44f 6182 	mov.w	r1, #1040	@ 0x410
 8000706:	4812      	ldr	r0, [pc, #72]	@ (8000750 <MX_GPIO_Init+0xac>)
 8000708:	f000 fe81 	bl	800140e <HAL_GPIO_WritePin>

/*Configure GPIO pins : PB10 PB4 */
GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_4;
 800070c:	f44f 6382 	mov.w	r3, #1040	@ 0x410
 8000710:	613b      	str	r3, [r7, #16]
GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000712:	2301      	movs	r3, #1
 8000714:	617b      	str	r3, [r7, #20]
GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000716:	2300      	movs	r3, #0
 8000718:	61bb      	str	r3, [r7, #24]
GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800071a:	2302      	movs	r3, #2
 800071c:	61fb      	str	r3, [r7, #28]
HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800071e:	f107 0310 	add.w	r3, r7, #16
 8000722:	4619      	mov	r1, r3
 8000724:	480a      	ldr	r0, [pc, #40]	@ (8000750 <MX_GPIO_Init+0xac>)
 8000726:	f000 fcd7 	bl	80010d8 <HAL_GPIO_Init>

/*Configure GPIO pin : PB9 */
GPIO_InitStruct.Pin = GPIO_PIN_9;
 800072a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800072e:	613b      	str	r3, [r7, #16]
GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000730:	2300      	movs	r3, #0
 8000732:	617b      	str	r3, [r7, #20]
GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000734:	2300      	movs	r3, #0
 8000736:	61bb      	str	r3, [r7, #24]
HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000738:	f107 0310 	add.w	r3, r7, #16
 800073c:	4619      	mov	r1, r3
 800073e:	4804      	ldr	r0, [pc, #16]	@ (8000750 <MX_GPIO_Init+0xac>)
 8000740:	f000 fcca 	bl	80010d8 <HAL_GPIO_Init>

}
 8000744:	bf00      	nop
 8000746:	3720      	adds	r7, #32
 8000748:	46bd      	mov	sp, r7
 800074a:	bd80      	pop	{r7, pc}
 800074c:	40021000 	.word	0x40021000
 8000750:	40010c00 	.word	0x40010c00

08000754 <Error_Handler>:
/**
* @brief  This function is executed in case of error occurrence.
* @retval None
*/
void Error_Handler(void)
{
 8000754:	b480      	push	{r7}
 8000756:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000758:	b672      	cpsid	i
}
 800075a:	bf00      	nop
/* USER CODE BEGIN Error_Handler_Debug */
/* User can add his own implementation to report the HAL error return state */
__disable_irq();
while (1)
 800075c:	bf00      	nop
 800075e:	e7fd      	b.n	800075c <Error_Handler+0x8>

08000760 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8000760:	b480      	push	{r7}
 8000762:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8000764:	bf00      	nop
 8000766:	46bd      	mov	sp, r7
 8000768:	bc80      	pop	{r7}
 800076a:	4770      	bx	lr

0800076c <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 800076c:	b580      	push	{r7, lr}
 800076e:	b086      	sub	sp, #24
 8000770:	af04      	add	r7, sp, #16
 8000772:	4603      	mov	r3, r0
 8000774:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8000776:	f04f 33ff 	mov.w	r3, #4294967295
 800077a:	9302      	str	r3, [sp, #8]
 800077c:	2301      	movs	r3, #1
 800077e:	9301      	str	r3, [sp, #4]
 8000780:	1dfb      	adds	r3, r7, #7
 8000782:	9300      	str	r3, [sp, #0]
 8000784:	2301      	movs	r3, #1
 8000786:	2200      	movs	r2, #0
 8000788:	2178      	movs	r1, #120	@ 0x78
 800078a:	4803      	ldr	r0, [pc, #12]	@ (8000798 <ssd1306_WriteCommand+0x2c>)
 800078c:	f000 ff9c 	bl	80016c8 <HAL_I2C_Mem_Write>
}
 8000790:	bf00      	nop
 8000792:	3708      	adds	r7, #8
 8000794:	46bd      	mov	sp, r7
 8000796:	bd80      	pop	{r7, pc}
 8000798:	20000078 	.word	0x20000078

0800079c <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 800079c:	b580      	push	{r7, lr}
 800079e:	b086      	sub	sp, #24
 80007a0:	af04      	add	r7, sp, #16
 80007a2:	6078      	str	r0, [r7, #4]
 80007a4:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 80007a6:	683b      	ldr	r3, [r7, #0]
 80007a8:	b29b      	uxth	r3, r3
 80007aa:	f04f 32ff 	mov.w	r2, #4294967295
 80007ae:	9202      	str	r2, [sp, #8]
 80007b0:	9301      	str	r3, [sp, #4]
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	9300      	str	r3, [sp, #0]
 80007b6:	2301      	movs	r3, #1
 80007b8:	2240      	movs	r2, #64	@ 0x40
 80007ba:	2178      	movs	r1, #120	@ 0x78
 80007bc:	4803      	ldr	r0, [pc, #12]	@ (80007cc <ssd1306_WriteData+0x30>)
 80007be:	f000 ff83 	bl	80016c8 <HAL_I2C_Mem_Write>
}
 80007c2:	bf00      	nop
 80007c4:	3708      	adds	r7, #8
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	bf00      	nop
 80007cc:	20000078 	.word	0x20000078

080007d0 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 80007d0:	b580      	push	{r7, lr}
 80007d2:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 80007d4:	f7ff ffc4 	bl	8000760 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 80007d8:	2064      	movs	r0, #100	@ 0x64
 80007da:	f000 fb75 	bl	8000ec8 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 80007de:	2000      	movs	r0, #0
 80007e0:	f000 f9d6 	bl	8000b90 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 80007e4:	2020      	movs	r0, #32
 80007e6:	f7ff ffc1 	bl	800076c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 80007ea:	2000      	movs	r0, #0
 80007ec:	f7ff ffbe 	bl	800076c <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80007f0:	20b0      	movs	r0, #176	@ 0xb0
 80007f2:	f7ff ffbb 	bl	800076c <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 80007f6:	20c8      	movs	r0, #200	@ 0xc8
 80007f8:	f7ff ffb8 	bl	800076c <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 80007fc:	2000      	movs	r0, #0
 80007fe:	f7ff ffb5 	bl	800076c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8000802:	2010      	movs	r0, #16
 8000804:	f7ff ffb2 	bl	800076c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8000808:	2040      	movs	r0, #64	@ 0x40
 800080a:	f7ff ffaf 	bl	800076c <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 800080e:	20ff      	movs	r0, #255	@ 0xff
 8000810:	f000 f9aa 	bl	8000b68 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8000814:	20a1      	movs	r0, #161	@ 0xa1
 8000816:	f7ff ffa9 	bl	800076c <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 800081a:	20a6      	movs	r0, #166	@ 0xa6
 800081c:	f7ff ffa6 	bl	800076c <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8000820:	20a8      	movs	r0, #168	@ 0xa8
 8000822:	f7ff ffa3 	bl	800076c <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8000826:	203f      	movs	r0, #63	@ 0x3f
 8000828:	f7ff ffa0 	bl	800076c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 800082c:	20a4      	movs	r0, #164	@ 0xa4
 800082e:	f7ff ff9d 	bl	800076c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8000832:	20d3      	movs	r0, #211	@ 0xd3
 8000834:	f7ff ff9a 	bl	800076c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8000838:	2000      	movs	r0, #0
 800083a:	f7ff ff97 	bl	800076c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 800083e:	20d5      	movs	r0, #213	@ 0xd5
 8000840:	f7ff ff94 	bl	800076c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8000844:	20f0      	movs	r0, #240	@ 0xf0
 8000846:	f7ff ff91 	bl	800076c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 800084a:	20d9      	movs	r0, #217	@ 0xd9
 800084c:	f7ff ff8e 	bl	800076c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8000850:	2022      	movs	r0, #34	@ 0x22
 8000852:	f7ff ff8b 	bl	800076c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8000856:	20da      	movs	r0, #218	@ 0xda
 8000858:	f7ff ff88 	bl	800076c <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 800085c:	2012      	movs	r0, #18
 800085e:	f7ff ff85 	bl	800076c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8000862:	20db      	movs	r0, #219	@ 0xdb
 8000864:	f7ff ff82 	bl	800076c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8000868:	2020      	movs	r0, #32
 800086a:	f7ff ff7f 	bl	800076c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 800086e:	208d      	movs	r0, #141	@ 0x8d
 8000870:	f7ff ff7c 	bl	800076c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8000874:	2014      	movs	r0, #20
 8000876:	f7ff ff79 	bl	800076c <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 800087a:	2001      	movs	r0, #1
 800087c:	f000 f988 	bl	8000b90 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8000880:	2000      	movs	r0, #0
 8000882:	f000 f80f 	bl	80008a4 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8000886:	f000 f825 	bl	80008d4 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 800088a:	4b05      	ldr	r3, [pc, #20]	@ (80008a0 <ssd1306_Init+0xd0>)
 800088c:	2200      	movs	r2, #0
 800088e:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8000890:	4b03      	ldr	r3, [pc, #12]	@ (80008a0 <ssd1306_Init+0xd0>)
 8000892:	2200      	movs	r2, #0
 8000894:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8000896:	4b02      	ldr	r3, [pc, #8]	@ (80008a0 <ssd1306_Init+0xd0>)
 8000898:	2201      	movs	r2, #1
 800089a:	711a      	strb	r2, [r3, #4]
}
 800089c:	bf00      	nop
 800089e:	bd80      	pop	{r7, pc}
 80008a0:	20000514 	.word	0x20000514

080008a4 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b082      	sub	sp, #8
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	4603      	mov	r3, r0
 80008ac:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 80008ae:	79fb      	ldrb	r3, [r7, #7]
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d101      	bne.n	80008b8 <ssd1306_Fill+0x14>
 80008b4:	2300      	movs	r3, #0
 80008b6:	e000      	b.n	80008ba <ssd1306_Fill+0x16>
 80008b8:	23ff      	movs	r3, #255	@ 0xff
 80008ba:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80008be:	4619      	mov	r1, r3
 80008c0:	4803      	ldr	r0, [pc, #12]	@ (80008d0 <ssd1306_Fill+0x2c>)
 80008c2:	f002 f94b 	bl	8002b5c <memset>
}
 80008c6:	bf00      	nop
 80008c8:	3708      	adds	r7, #8
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	20000114 	.word	0x20000114

080008d4 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b082      	sub	sp, #8
 80008d8:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80008da:	2300      	movs	r3, #0
 80008dc:	71fb      	strb	r3, [r7, #7]
 80008de:	e016      	b.n	800090e <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 80008e0:	79fb      	ldrb	r3, [r7, #7]
 80008e2:	3b50      	subs	r3, #80	@ 0x50
 80008e4:	b2db      	uxtb	r3, r3
 80008e6:	4618      	mov	r0, r3
 80008e8:	f7ff ff40 	bl	800076c <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 80008ec:	2000      	movs	r0, #0
 80008ee:	f7ff ff3d 	bl	800076c <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 80008f2:	2010      	movs	r0, #16
 80008f4:	f7ff ff3a 	bl	800076c <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 80008f8:	79fb      	ldrb	r3, [r7, #7]
 80008fa:	01db      	lsls	r3, r3, #7
 80008fc:	4a08      	ldr	r2, [pc, #32]	@ (8000920 <ssd1306_UpdateScreen+0x4c>)
 80008fe:	4413      	add	r3, r2
 8000900:	2180      	movs	r1, #128	@ 0x80
 8000902:	4618      	mov	r0, r3
 8000904:	f7ff ff4a 	bl	800079c <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8000908:	79fb      	ldrb	r3, [r7, #7]
 800090a:	3301      	adds	r3, #1
 800090c:	71fb      	strb	r3, [r7, #7]
 800090e:	79fb      	ldrb	r3, [r7, #7]
 8000910:	2b07      	cmp	r3, #7
 8000912:	d9e5      	bls.n	80008e0 <ssd1306_UpdateScreen+0xc>
    }
}
 8000914:	bf00      	nop
 8000916:	bf00      	nop
 8000918:	3708      	adds	r7, #8
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	20000114 	.word	0x20000114

08000924 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8000924:	b480      	push	{r7}
 8000926:	b083      	sub	sp, #12
 8000928:	af00      	add	r7, sp, #0
 800092a:	4603      	mov	r3, r0
 800092c:	71fb      	strb	r3, [r7, #7]
 800092e:	460b      	mov	r3, r1
 8000930:	71bb      	strb	r3, [r7, #6]
 8000932:	4613      	mov	r3, r2
 8000934:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8000936:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800093a:	2b00      	cmp	r3, #0
 800093c:	db3d      	blt.n	80009ba <ssd1306_DrawPixel+0x96>
 800093e:	79bb      	ldrb	r3, [r7, #6]
 8000940:	2b3f      	cmp	r3, #63	@ 0x3f
 8000942:	d83a      	bhi.n	80009ba <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8000944:	797b      	ldrb	r3, [r7, #5]
 8000946:	2b01      	cmp	r3, #1
 8000948:	d11a      	bne.n	8000980 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800094a:	79fa      	ldrb	r2, [r7, #7]
 800094c:	79bb      	ldrb	r3, [r7, #6]
 800094e:	08db      	lsrs	r3, r3, #3
 8000950:	b2d8      	uxtb	r0, r3
 8000952:	4603      	mov	r3, r0
 8000954:	01db      	lsls	r3, r3, #7
 8000956:	4413      	add	r3, r2
 8000958:	4a1a      	ldr	r2, [pc, #104]	@ (80009c4 <ssd1306_DrawPixel+0xa0>)
 800095a:	5cd3      	ldrb	r3, [r2, r3]
 800095c:	b25a      	sxtb	r2, r3
 800095e:	79bb      	ldrb	r3, [r7, #6]
 8000960:	f003 0307 	and.w	r3, r3, #7
 8000964:	2101      	movs	r1, #1
 8000966:	fa01 f303 	lsl.w	r3, r1, r3
 800096a:	b25b      	sxtb	r3, r3
 800096c:	4313      	orrs	r3, r2
 800096e:	b259      	sxtb	r1, r3
 8000970:	79fa      	ldrb	r2, [r7, #7]
 8000972:	4603      	mov	r3, r0
 8000974:	01db      	lsls	r3, r3, #7
 8000976:	4413      	add	r3, r2
 8000978:	b2c9      	uxtb	r1, r1
 800097a:	4a12      	ldr	r2, [pc, #72]	@ (80009c4 <ssd1306_DrawPixel+0xa0>)
 800097c:	54d1      	strb	r1, [r2, r3]
 800097e:	e01d      	b.n	80009bc <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8000980:	79fa      	ldrb	r2, [r7, #7]
 8000982:	79bb      	ldrb	r3, [r7, #6]
 8000984:	08db      	lsrs	r3, r3, #3
 8000986:	b2d8      	uxtb	r0, r3
 8000988:	4603      	mov	r3, r0
 800098a:	01db      	lsls	r3, r3, #7
 800098c:	4413      	add	r3, r2
 800098e:	4a0d      	ldr	r2, [pc, #52]	@ (80009c4 <ssd1306_DrawPixel+0xa0>)
 8000990:	5cd3      	ldrb	r3, [r2, r3]
 8000992:	b25a      	sxtb	r2, r3
 8000994:	79bb      	ldrb	r3, [r7, #6]
 8000996:	f003 0307 	and.w	r3, r3, #7
 800099a:	2101      	movs	r1, #1
 800099c:	fa01 f303 	lsl.w	r3, r1, r3
 80009a0:	b25b      	sxtb	r3, r3
 80009a2:	43db      	mvns	r3, r3
 80009a4:	b25b      	sxtb	r3, r3
 80009a6:	4013      	ands	r3, r2
 80009a8:	b259      	sxtb	r1, r3
 80009aa:	79fa      	ldrb	r2, [r7, #7]
 80009ac:	4603      	mov	r3, r0
 80009ae:	01db      	lsls	r3, r3, #7
 80009b0:	4413      	add	r3, r2
 80009b2:	b2c9      	uxtb	r1, r1
 80009b4:	4a03      	ldr	r2, [pc, #12]	@ (80009c4 <ssd1306_DrawPixel+0xa0>)
 80009b6:	54d1      	strb	r1, [r2, r3]
 80009b8:	e000      	b.n	80009bc <ssd1306_DrawPixel+0x98>
        return;
 80009ba:	bf00      	nop
    }
}
 80009bc:	370c      	adds	r7, #12
 80009be:	46bd      	mov	sp, r7
 80009c0:	bc80      	pop	{r7}
 80009c2:	4770      	bx	lr
 80009c4:	20000114 	.word	0x20000114

080009c8 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, SSD1306_Font_t Font, SSD1306_COLOR color) {
 80009c8:	b590      	push	{r4, r7, lr}
 80009ca:	b089      	sub	sp, #36	@ 0x24
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	4604      	mov	r4, r0
 80009d0:	4638      	mov	r0, r7
 80009d2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 80009d6:	4623      	mov	r3, r4
 80009d8:	73fb      	strb	r3, [r7, #15]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 80009da:	7bfb      	ldrb	r3, [r7, #15]
 80009dc:	2b1f      	cmp	r3, #31
 80009de:	d902      	bls.n	80009e6 <ssd1306_WriteChar+0x1e>
 80009e0:	7bfb      	ldrb	r3, [r7, #15]
 80009e2:	2b7e      	cmp	r3, #126	@ 0x7e
 80009e4:	d901      	bls.n	80009ea <ssd1306_WriteChar+0x22>
        return 0;
 80009e6:	2300      	movs	r3, #0
 80009e8:	e079      	b.n	8000ade <ssd1306_WriteChar+0x116>
    
    // Char width is not equal to font width for proportional font
    const uint8_t char_width = Font.char_width ? Font.char_width[ch-32] : Font.width;
 80009ea:	68bb      	ldr	r3, [r7, #8]
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d005      	beq.n	80009fc <ssd1306_WriteChar+0x34>
 80009f0:	68ba      	ldr	r2, [r7, #8]
 80009f2:	7bfb      	ldrb	r3, [r7, #15]
 80009f4:	3b20      	subs	r3, #32
 80009f6:	4413      	add	r3, r2
 80009f8:	781b      	ldrb	r3, [r3, #0]
 80009fa:	e000      	b.n	80009fe <ssd1306_WriteChar+0x36>
 80009fc:	783b      	ldrb	r3, [r7, #0]
 80009fe:	75fb      	strb	r3, [r7, #23]
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + char_width) ||
 8000a00:	4b39      	ldr	r3, [pc, #228]	@ (8000ae8 <ssd1306_WriteChar+0x120>)
 8000a02:	881b      	ldrh	r3, [r3, #0]
 8000a04:	461a      	mov	r2, r3
 8000a06:	7dfb      	ldrb	r3, [r7, #23]
 8000a08:	4413      	add	r3, r2
 8000a0a:	2b80      	cmp	r3, #128	@ 0x80
 8000a0c:	dc06      	bgt.n	8000a1c <ssd1306_WriteChar+0x54>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.height))
 8000a0e:	4b36      	ldr	r3, [pc, #216]	@ (8000ae8 <ssd1306_WriteChar+0x120>)
 8000a10:	885b      	ldrh	r3, [r3, #2]
 8000a12:	461a      	mov	r2, r3
 8000a14:	787b      	ldrb	r3, [r7, #1]
 8000a16:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + char_width) ||
 8000a18:	2b40      	cmp	r3, #64	@ 0x40
 8000a1a:	dd01      	ble.n	8000a20 <ssd1306_WriteChar+0x58>
    {
        // Not enough space on current line
        return 0;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	e05e      	b.n	8000ade <ssd1306_WriteChar+0x116>
    }
    
    // Use the font to write
    for(i = 0; i < Font.height; i++) {
 8000a20:	2300      	movs	r3, #0
 8000a22:	61fb      	str	r3, [r7, #28]
 8000a24:	e04d      	b.n	8000ac2 <ssd1306_WriteChar+0xfa>
        b = Font.data[(ch - 32) * Font.height + i];
 8000a26:	687a      	ldr	r2, [r7, #4]
 8000a28:	7bfb      	ldrb	r3, [r7, #15]
 8000a2a:	3b20      	subs	r3, #32
 8000a2c:	7879      	ldrb	r1, [r7, #1]
 8000a2e:	fb01 f303 	mul.w	r3, r1, r3
 8000a32:	4619      	mov	r1, r3
 8000a34:	69fb      	ldr	r3, [r7, #28]
 8000a36:	440b      	add	r3, r1
 8000a38:	005b      	lsls	r3, r3, #1
 8000a3a:	4413      	add	r3, r2
 8000a3c:	881b      	ldrh	r3, [r3, #0]
 8000a3e:	613b      	str	r3, [r7, #16]
        for(j = 0; j < char_width; j++) {
 8000a40:	2300      	movs	r3, #0
 8000a42:	61bb      	str	r3, [r7, #24]
 8000a44:	e036      	b.n	8000ab4 <ssd1306_WriteChar+0xec>
            if((b << j) & 0x8000)  {
 8000a46:	693a      	ldr	r2, [r7, #16]
 8000a48:	69bb      	ldr	r3, [r7, #24]
 8000a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a4e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d013      	beq.n	8000a7e <ssd1306_WriteChar+0xb6>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8000a56:	4b24      	ldr	r3, [pc, #144]	@ (8000ae8 <ssd1306_WriteChar+0x120>)
 8000a58:	881b      	ldrh	r3, [r3, #0]
 8000a5a:	b2da      	uxtb	r2, r3
 8000a5c:	69bb      	ldr	r3, [r7, #24]
 8000a5e:	b2db      	uxtb	r3, r3
 8000a60:	4413      	add	r3, r2
 8000a62:	b2d8      	uxtb	r0, r3
 8000a64:	4b20      	ldr	r3, [pc, #128]	@ (8000ae8 <ssd1306_WriteChar+0x120>)
 8000a66:	885b      	ldrh	r3, [r3, #2]
 8000a68:	b2da      	uxtb	r2, r3
 8000a6a:	69fb      	ldr	r3, [r7, #28]
 8000a6c:	b2db      	uxtb	r3, r3
 8000a6e:	4413      	add	r3, r2
 8000a70:	b2db      	uxtb	r3, r3
 8000a72:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8000a76:	4619      	mov	r1, r3
 8000a78:	f7ff ff54 	bl	8000924 <ssd1306_DrawPixel>
 8000a7c:	e017      	b.n	8000aae <ssd1306_WriteChar+0xe6>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8000a7e:	4b1a      	ldr	r3, [pc, #104]	@ (8000ae8 <ssd1306_WriteChar+0x120>)
 8000a80:	881b      	ldrh	r3, [r3, #0]
 8000a82:	b2da      	uxtb	r2, r3
 8000a84:	69bb      	ldr	r3, [r7, #24]
 8000a86:	b2db      	uxtb	r3, r3
 8000a88:	4413      	add	r3, r2
 8000a8a:	b2d8      	uxtb	r0, r3
 8000a8c:	4b16      	ldr	r3, [pc, #88]	@ (8000ae8 <ssd1306_WriteChar+0x120>)
 8000a8e:	885b      	ldrh	r3, [r3, #2]
 8000a90:	b2da      	uxtb	r2, r3
 8000a92:	69fb      	ldr	r3, [r7, #28]
 8000a94:	b2db      	uxtb	r3, r3
 8000a96:	4413      	add	r3, r2
 8000a98:	b2d9      	uxtb	r1, r3
 8000a9a:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	bf0c      	ite	eq
 8000aa2:	2301      	moveq	r3, #1
 8000aa4:	2300      	movne	r3, #0
 8000aa6:	b2db      	uxtb	r3, r3
 8000aa8:	461a      	mov	r2, r3
 8000aaa:	f7ff ff3b 	bl	8000924 <ssd1306_DrawPixel>
        for(j = 0; j < char_width; j++) {
 8000aae:	69bb      	ldr	r3, [r7, #24]
 8000ab0:	3301      	adds	r3, #1
 8000ab2:	61bb      	str	r3, [r7, #24]
 8000ab4:	7dfb      	ldrb	r3, [r7, #23]
 8000ab6:	69ba      	ldr	r2, [r7, #24]
 8000ab8:	429a      	cmp	r2, r3
 8000aba:	d3c4      	bcc.n	8000a46 <ssd1306_WriteChar+0x7e>
    for(i = 0; i < Font.height; i++) {
 8000abc:	69fb      	ldr	r3, [r7, #28]
 8000abe:	3301      	adds	r3, #1
 8000ac0:	61fb      	str	r3, [r7, #28]
 8000ac2:	787b      	ldrb	r3, [r7, #1]
 8000ac4:	461a      	mov	r2, r3
 8000ac6:	69fb      	ldr	r3, [r7, #28]
 8000ac8:	4293      	cmp	r3, r2
 8000aca:	d3ac      	bcc.n	8000a26 <ssd1306_WriteChar+0x5e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += char_width;
 8000acc:	4b06      	ldr	r3, [pc, #24]	@ (8000ae8 <ssd1306_WriteChar+0x120>)
 8000ace:	881a      	ldrh	r2, [r3, #0]
 8000ad0:	7dfb      	ldrb	r3, [r7, #23]
 8000ad2:	b29b      	uxth	r3, r3
 8000ad4:	4413      	add	r3, r2
 8000ad6:	b29a      	uxth	r2, r3
 8000ad8:	4b03      	ldr	r3, [pc, #12]	@ (8000ae8 <ssd1306_WriteChar+0x120>)
 8000ada:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8000adc:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ade:	4618      	mov	r0, r3
 8000ae0:	3724      	adds	r7, #36	@ 0x24
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd90      	pop	{r4, r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	20000514 	.word	0x20000514

08000aec <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b086      	sub	sp, #24
 8000af0:	af02      	add	r7, sp, #8
 8000af2:	60f8      	str	r0, [r7, #12]
 8000af4:	4638      	mov	r0, r7
 8000af6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    while (*str) {
 8000afa:	e013      	b.n	8000b24 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8000afc:	68fb      	ldr	r3, [r7, #12]
 8000afe:	7818      	ldrb	r0, [r3, #0]
 8000b00:	7e3b      	ldrb	r3, [r7, #24]
 8000b02:	9300      	str	r3, [sp, #0]
 8000b04:	463b      	mov	r3, r7
 8000b06:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000b08:	f7ff ff5e 	bl	80009c8 <ssd1306_WriteChar>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	461a      	mov	r2, r3
 8000b10:	68fb      	ldr	r3, [r7, #12]
 8000b12:	781b      	ldrb	r3, [r3, #0]
 8000b14:	429a      	cmp	r2, r3
 8000b16:	d002      	beq.n	8000b1e <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8000b18:	68fb      	ldr	r3, [r7, #12]
 8000b1a:	781b      	ldrb	r3, [r3, #0]
 8000b1c:	e008      	b.n	8000b30 <ssd1306_WriteString+0x44>
        }
        str++;
 8000b1e:	68fb      	ldr	r3, [r7, #12]
 8000b20:	3301      	adds	r3, #1
 8000b22:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8000b24:	68fb      	ldr	r3, [r7, #12]
 8000b26:	781b      	ldrb	r3, [r3, #0]
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d1e7      	bne.n	8000afc <ssd1306_WriteString+0x10>
    }
    
    // Everything ok
    return *str;
 8000b2c:	68fb      	ldr	r3, [r7, #12]
 8000b2e:	781b      	ldrb	r3, [r3, #0]
}
 8000b30:	4618      	mov	r0, r3
 8000b32:	3710      	adds	r7, #16
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bd80      	pop	{r7, pc}

08000b38 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8000b38:	b480      	push	{r7}
 8000b3a:	b083      	sub	sp, #12
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	4603      	mov	r3, r0
 8000b40:	460a      	mov	r2, r1
 8000b42:	71fb      	strb	r3, [r7, #7]
 8000b44:	4613      	mov	r3, r2
 8000b46:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8000b48:	79fb      	ldrb	r3, [r7, #7]
 8000b4a:	b29a      	uxth	r2, r3
 8000b4c:	4b05      	ldr	r3, [pc, #20]	@ (8000b64 <ssd1306_SetCursor+0x2c>)
 8000b4e:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8000b50:	79bb      	ldrb	r3, [r7, #6]
 8000b52:	b29a      	uxth	r2, r3
 8000b54:	4b03      	ldr	r3, [pc, #12]	@ (8000b64 <ssd1306_SetCursor+0x2c>)
 8000b56:	805a      	strh	r2, [r3, #2]
}
 8000b58:	bf00      	nop
 8000b5a:	370c      	adds	r7, #12
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bc80      	pop	{r7}
 8000b60:	4770      	bx	lr
 8000b62:	bf00      	nop
 8000b64:	20000514 	.word	0x20000514

08000b68 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b084      	sub	sp, #16
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	4603      	mov	r3, r0
 8000b70:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8000b72:	2381      	movs	r3, #129	@ 0x81
 8000b74:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8000b76:	7bfb      	ldrb	r3, [r7, #15]
 8000b78:	4618      	mov	r0, r3
 8000b7a:	f7ff fdf7 	bl	800076c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8000b7e:	79fb      	ldrb	r3, [r7, #7]
 8000b80:	4618      	mov	r0, r3
 8000b82:	f7ff fdf3 	bl	800076c <ssd1306_WriteCommand>
}
 8000b86:	bf00      	nop
 8000b88:	3710      	adds	r7, #16
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}
	...

08000b90 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b084      	sub	sp, #16
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	4603      	mov	r3, r0
 8000b98:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8000b9a:	79fb      	ldrb	r3, [r7, #7]
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d005      	beq.n	8000bac <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8000ba0:	23af      	movs	r3, #175	@ 0xaf
 8000ba2:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8000ba4:	4b08      	ldr	r3, [pc, #32]	@ (8000bc8 <ssd1306_SetDisplayOn+0x38>)
 8000ba6:	2201      	movs	r2, #1
 8000ba8:	715a      	strb	r2, [r3, #5]
 8000baa:	e004      	b.n	8000bb6 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8000bac:	23ae      	movs	r3, #174	@ 0xae
 8000bae:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8000bb0:	4b05      	ldr	r3, [pc, #20]	@ (8000bc8 <ssd1306_SetDisplayOn+0x38>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8000bb6:	7bfb      	ldrb	r3, [r7, #15]
 8000bb8:	4618      	mov	r0, r3
 8000bba:	f7ff fdd7 	bl	800076c <ssd1306_WriteCommand>
}
 8000bbe:	bf00      	nop
 8000bc0:	3710      	adds	r7, #16
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	20000514 	.word	0x20000514

08000bcc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	b085      	sub	sp, #20
 8000bd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000bd2:	4b15      	ldr	r3, [pc, #84]	@ (8000c28 <HAL_MspInit+0x5c>)
 8000bd4:	699b      	ldr	r3, [r3, #24]
 8000bd6:	4a14      	ldr	r2, [pc, #80]	@ (8000c28 <HAL_MspInit+0x5c>)
 8000bd8:	f043 0301 	orr.w	r3, r3, #1
 8000bdc:	6193      	str	r3, [r2, #24]
 8000bde:	4b12      	ldr	r3, [pc, #72]	@ (8000c28 <HAL_MspInit+0x5c>)
 8000be0:	699b      	ldr	r3, [r3, #24]
 8000be2:	f003 0301 	and.w	r3, r3, #1
 8000be6:	60bb      	str	r3, [r7, #8]
 8000be8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bea:	4b0f      	ldr	r3, [pc, #60]	@ (8000c28 <HAL_MspInit+0x5c>)
 8000bec:	69db      	ldr	r3, [r3, #28]
 8000bee:	4a0e      	ldr	r2, [pc, #56]	@ (8000c28 <HAL_MspInit+0x5c>)
 8000bf0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000bf4:	61d3      	str	r3, [r2, #28]
 8000bf6:	4b0c      	ldr	r3, [pc, #48]	@ (8000c28 <HAL_MspInit+0x5c>)
 8000bf8:	69db      	ldr	r3, [r3, #28]
 8000bfa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000bfe:	607b      	str	r3, [r7, #4]
 8000c00:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000c02:	4b0a      	ldr	r3, [pc, #40]	@ (8000c2c <HAL_MspInit+0x60>)
 8000c04:	685b      	ldr	r3, [r3, #4]
 8000c06:	60fb      	str	r3, [r7, #12]
 8000c08:	68fb      	ldr	r3, [r7, #12]
 8000c0a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000c0e:	60fb      	str	r3, [r7, #12]
 8000c10:	68fb      	ldr	r3, [r7, #12]
 8000c12:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000c16:	60fb      	str	r3, [r7, #12]
 8000c18:	4a04      	ldr	r2, [pc, #16]	@ (8000c2c <HAL_MspInit+0x60>)
 8000c1a:	68fb      	ldr	r3, [r7, #12]
 8000c1c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c1e:	bf00      	nop
 8000c20:	3714      	adds	r7, #20
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bc80      	pop	{r7}
 8000c26:	4770      	bx	lr
 8000c28:	40021000 	.word	0x40021000
 8000c2c:	40010000 	.word	0x40010000

08000c30 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b088      	sub	sp, #32
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c38:	f107 0310 	add.w	r3, r7, #16
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	601a      	str	r2, [r3, #0]
 8000c40:	605a      	str	r2, [r3, #4]
 8000c42:	609a      	str	r2, [r3, #8]
 8000c44:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	4a15      	ldr	r2, [pc, #84]	@ (8000ca0 <HAL_I2C_MspInit+0x70>)
 8000c4c:	4293      	cmp	r3, r2
 8000c4e:	d123      	bne.n	8000c98 <HAL_I2C_MspInit+0x68>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c50:	4b14      	ldr	r3, [pc, #80]	@ (8000ca4 <HAL_I2C_MspInit+0x74>)
 8000c52:	699b      	ldr	r3, [r3, #24]
 8000c54:	4a13      	ldr	r2, [pc, #76]	@ (8000ca4 <HAL_I2C_MspInit+0x74>)
 8000c56:	f043 0308 	orr.w	r3, r3, #8
 8000c5a:	6193      	str	r3, [r2, #24]
 8000c5c:	4b11      	ldr	r3, [pc, #68]	@ (8000ca4 <HAL_I2C_MspInit+0x74>)
 8000c5e:	699b      	ldr	r3, [r3, #24]
 8000c60:	f003 0308 	and.w	r3, r3, #8
 8000c64:	60fb      	str	r3, [r7, #12]
 8000c66:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000c68:	23c0      	movs	r3, #192	@ 0xc0
 8000c6a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c6c:	2312      	movs	r3, #18
 8000c6e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c70:	2303      	movs	r3, #3
 8000c72:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c74:	f107 0310 	add.w	r3, r7, #16
 8000c78:	4619      	mov	r1, r3
 8000c7a:	480b      	ldr	r0, [pc, #44]	@ (8000ca8 <HAL_I2C_MspInit+0x78>)
 8000c7c:	f000 fa2c 	bl	80010d8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c80:	4b08      	ldr	r3, [pc, #32]	@ (8000ca4 <HAL_I2C_MspInit+0x74>)
 8000c82:	69db      	ldr	r3, [r3, #28]
 8000c84:	4a07      	ldr	r2, [pc, #28]	@ (8000ca4 <HAL_I2C_MspInit+0x74>)
 8000c86:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000c8a:	61d3      	str	r3, [r2, #28]
 8000c8c:	4b05      	ldr	r3, [pc, #20]	@ (8000ca4 <HAL_I2C_MspInit+0x74>)
 8000c8e:	69db      	ldr	r3, [r3, #28]
 8000c90:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000c94:	60bb      	str	r3, [r7, #8]
 8000c96:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000c98:	bf00      	nop
 8000c9a:	3720      	adds	r7, #32
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bd80      	pop	{r7, pc}
 8000ca0:	40005400 	.word	0x40005400
 8000ca4:	40021000 	.word	0x40021000
 8000ca8:	40010c00 	.word	0x40010c00

08000cac <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000cac:	b480      	push	{r7}
 8000cae:	b085      	sub	sp, #20
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	4a09      	ldr	r2, [pc, #36]	@ (8000ce0 <HAL_TIM_Base_MspInit+0x34>)
 8000cba:	4293      	cmp	r3, r2
 8000cbc:	d10b      	bne.n	8000cd6 <HAL_TIM_Base_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000cbe:	4b09      	ldr	r3, [pc, #36]	@ (8000ce4 <HAL_TIM_Base_MspInit+0x38>)
 8000cc0:	699b      	ldr	r3, [r3, #24]
 8000cc2:	4a08      	ldr	r2, [pc, #32]	@ (8000ce4 <HAL_TIM_Base_MspInit+0x38>)
 8000cc4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000cc8:	6193      	str	r3, [r2, #24]
 8000cca:	4b06      	ldr	r3, [pc, #24]	@ (8000ce4 <HAL_TIM_Base_MspInit+0x38>)
 8000ccc:	699b      	ldr	r3, [r3, #24]
 8000cce:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000cd2:	60fb      	str	r3, [r7, #12]
 8000cd4:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 8000cd6:	bf00      	nop
 8000cd8:	3714      	adds	r7, #20
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bc80      	pop	{r7}
 8000cde:	4770      	bx	lr
 8000ce0:	40012c00 	.word	0x40012c00
 8000ce4:	40021000 	.word	0x40021000

08000ce8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000cec:	bf00      	nop
 8000cee:	e7fd      	b.n	8000cec <NMI_Handler+0x4>

08000cf0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cf4:	bf00      	nop
 8000cf6:	e7fd      	b.n	8000cf4 <HardFault_Handler+0x4>

08000cf8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cfc:	bf00      	nop
 8000cfe:	e7fd      	b.n	8000cfc <MemManage_Handler+0x4>

08000d00 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d04:	bf00      	nop
 8000d06:	e7fd      	b.n	8000d04 <BusFault_Handler+0x4>

08000d08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d0c:	bf00      	nop
 8000d0e:	e7fd      	b.n	8000d0c <UsageFault_Handler+0x4>

08000d10 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d10:	b480      	push	{r7}
 8000d12:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d14:	bf00      	nop
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bc80      	pop	{r7}
 8000d1a:	4770      	bx	lr

08000d1c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d20:	bf00      	nop
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bc80      	pop	{r7}
 8000d26:	4770      	bx	lr

08000d28 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d2c:	bf00      	nop
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bc80      	pop	{r7}
 8000d32:	4770      	bx	lr

08000d34 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d38:	f000 f8aa 	bl	8000e90 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d3c:	bf00      	nop
 8000d3e:	bd80      	pop	{r7, pc}

08000d40 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b086      	sub	sp, #24
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d48:	4a14      	ldr	r2, [pc, #80]	@ (8000d9c <_sbrk+0x5c>)
 8000d4a:	4b15      	ldr	r3, [pc, #84]	@ (8000da0 <_sbrk+0x60>)
 8000d4c:	1ad3      	subs	r3, r2, r3
 8000d4e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d50:	697b      	ldr	r3, [r7, #20]
 8000d52:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d54:	4b13      	ldr	r3, [pc, #76]	@ (8000da4 <_sbrk+0x64>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d102      	bne.n	8000d62 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d5c:	4b11      	ldr	r3, [pc, #68]	@ (8000da4 <_sbrk+0x64>)
 8000d5e:	4a12      	ldr	r2, [pc, #72]	@ (8000da8 <_sbrk+0x68>)
 8000d60:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d62:	4b10      	ldr	r3, [pc, #64]	@ (8000da4 <_sbrk+0x64>)
 8000d64:	681a      	ldr	r2, [r3, #0]
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	4413      	add	r3, r2
 8000d6a:	693a      	ldr	r2, [r7, #16]
 8000d6c:	429a      	cmp	r2, r3
 8000d6e:	d207      	bcs.n	8000d80 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d70:	f001 fefc 	bl	8002b6c <__errno>
 8000d74:	4603      	mov	r3, r0
 8000d76:	220c      	movs	r2, #12
 8000d78:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d7a:	f04f 33ff 	mov.w	r3, #4294967295
 8000d7e:	e009      	b.n	8000d94 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d80:	4b08      	ldr	r3, [pc, #32]	@ (8000da4 <_sbrk+0x64>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d86:	4b07      	ldr	r3, [pc, #28]	@ (8000da4 <_sbrk+0x64>)
 8000d88:	681a      	ldr	r2, [r3, #0]
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	4413      	add	r3, r2
 8000d8e:	4a05      	ldr	r2, [pc, #20]	@ (8000da4 <_sbrk+0x64>)
 8000d90:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d92:	68fb      	ldr	r3, [r7, #12]
}
 8000d94:	4618      	mov	r0, r3
 8000d96:	3718      	adds	r7, #24
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bd80      	pop	{r7, pc}
 8000d9c:	20005000 	.word	0x20005000
 8000da0:	00000400 	.word	0x00000400
 8000da4:	2000051c 	.word	0x2000051c
 8000da8:	20000670 	.word	0x20000670

08000dac <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000dac:	b480      	push	{r7}
 8000dae:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000db0:	bf00      	nop
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bc80      	pop	{r7}
 8000db6:	4770      	bx	lr

08000db8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000db8:	f7ff fff8 	bl	8000dac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000dbc:	480b      	ldr	r0, [pc, #44]	@ (8000dec <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000dbe:	490c      	ldr	r1, [pc, #48]	@ (8000df0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000dc0:	4a0c      	ldr	r2, [pc, #48]	@ (8000df4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000dc2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000dc4:	e002      	b.n	8000dcc <LoopCopyDataInit>

08000dc6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dc6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000dc8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dca:	3304      	adds	r3, #4

08000dcc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dcc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dd0:	d3f9      	bcc.n	8000dc6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dd2:	4a09      	ldr	r2, [pc, #36]	@ (8000df8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000dd4:	4c09      	ldr	r4, [pc, #36]	@ (8000dfc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000dd6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000dd8:	e001      	b.n	8000dde <LoopFillZerobss>

08000dda <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dda:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ddc:	3204      	adds	r2, #4

08000dde <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dde:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000de0:	d3fb      	bcc.n	8000dda <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000de2:	f001 fec9 	bl	8002b78 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000de6:	f7ff fab5 	bl	8000354 <main>
  bx lr
 8000dea:	4770      	bx	lr
  ldr r0, =_sdata
 8000dec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000df0:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000df4:	08003ca8 	.word	0x08003ca8
  ldr r2, =_sbss
 8000df8:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000dfc:	2000066c 	.word	0x2000066c

08000e00 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e00:	e7fe      	b.n	8000e00 <ADC1_2_IRQHandler>
	...

08000e04 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e08:	4b08      	ldr	r3, [pc, #32]	@ (8000e2c <HAL_Init+0x28>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	4a07      	ldr	r2, [pc, #28]	@ (8000e2c <HAL_Init+0x28>)
 8000e0e:	f043 0310 	orr.w	r3, r3, #16
 8000e12:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e14:	2003      	movs	r0, #3
 8000e16:	f000 f92b 	bl	8001070 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e1a:	200f      	movs	r0, #15
 8000e1c:	f000 f808 	bl	8000e30 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e20:	f7ff fed4 	bl	8000bcc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e24:	2300      	movs	r3, #0
}
 8000e26:	4618      	mov	r0, r3
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	bf00      	nop
 8000e2c:	40022000 	.word	0x40022000

08000e30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b082      	sub	sp, #8
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e38:	4b12      	ldr	r3, [pc, #72]	@ (8000e84 <HAL_InitTick+0x54>)
 8000e3a:	681a      	ldr	r2, [r3, #0]
 8000e3c:	4b12      	ldr	r3, [pc, #72]	@ (8000e88 <HAL_InitTick+0x58>)
 8000e3e:	781b      	ldrb	r3, [r3, #0]
 8000e40:	4619      	mov	r1, r3
 8000e42:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e46:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e4e:	4618      	mov	r0, r3
 8000e50:	f000 f935 	bl	80010be <HAL_SYSTICK_Config>
 8000e54:	4603      	mov	r3, r0
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d001      	beq.n	8000e5e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e5a:	2301      	movs	r3, #1
 8000e5c:	e00e      	b.n	8000e7c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	2b0f      	cmp	r3, #15
 8000e62:	d80a      	bhi.n	8000e7a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e64:	2200      	movs	r2, #0
 8000e66:	6879      	ldr	r1, [r7, #4]
 8000e68:	f04f 30ff 	mov.w	r0, #4294967295
 8000e6c:	f000 f90b 	bl	8001086 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e70:	4a06      	ldr	r2, [pc, #24]	@ (8000e8c <HAL_InitTick+0x5c>)
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e76:	2300      	movs	r3, #0
 8000e78:	e000      	b.n	8000e7c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e7a:	2301      	movs	r3, #1
}
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	3708      	adds	r7, #8
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}
 8000e84:	20000000 	.word	0x20000000
 8000e88:	20000008 	.word	0x20000008
 8000e8c:	20000004 	.word	0x20000004

08000e90 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e90:	b480      	push	{r7}
 8000e92:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e94:	4b05      	ldr	r3, [pc, #20]	@ (8000eac <HAL_IncTick+0x1c>)
 8000e96:	781b      	ldrb	r3, [r3, #0]
 8000e98:	461a      	mov	r2, r3
 8000e9a:	4b05      	ldr	r3, [pc, #20]	@ (8000eb0 <HAL_IncTick+0x20>)
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	4413      	add	r3, r2
 8000ea0:	4a03      	ldr	r2, [pc, #12]	@ (8000eb0 <HAL_IncTick+0x20>)
 8000ea2:	6013      	str	r3, [r2, #0]
}
 8000ea4:	bf00      	nop
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bc80      	pop	{r7}
 8000eaa:	4770      	bx	lr
 8000eac:	20000008 	.word	0x20000008
 8000eb0:	20000520 	.word	0x20000520

08000eb4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	af00      	add	r7, sp, #0
  return uwTick;
 8000eb8:	4b02      	ldr	r3, [pc, #8]	@ (8000ec4 <HAL_GetTick+0x10>)
 8000eba:	681b      	ldr	r3, [r3, #0]
}
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bc80      	pop	{r7}
 8000ec2:	4770      	bx	lr
 8000ec4:	20000520 	.word	0x20000520

08000ec8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b084      	sub	sp, #16
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ed0:	f7ff fff0 	bl	8000eb4 <HAL_GetTick>
 8000ed4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000eda:	68fb      	ldr	r3, [r7, #12]
 8000edc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ee0:	d005      	beq.n	8000eee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ee2:	4b0a      	ldr	r3, [pc, #40]	@ (8000f0c <HAL_Delay+0x44>)
 8000ee4:	781b      	ldrb	r3, [r3, #0]
 8000ee6:	461a      	mov	r2, r3
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	4413      	add	r3, r2
 8000eec:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000eee:	bf00      	nop
 8000ef0:	f7ff ffe0 	bl	8000eb4 <HAL_GetTick>
 8000ef4:	4602      	mov	r2, r0
 8000ef6:	68bb      	ldr	r3, [r7, #8]
 8000ef8:	1ad3      	subs	r3, r2, r3
 8000efa:	68fa      	ldr	r2, [r7, #12]
 8000efc:	429a      	cmp	r2, r3
 8000efe:	d8f7      	bhi.n	8000ef0 <HAL_Delay+0x28>
  {
  }
}
 8000f00:	bf00      	nop
 8000f02:	bf00      	nop
 8000f04:	3710      	adds	r7, #16
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	20000008 	.word	0x20000008

08000f10 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f10:	b480      	push	{r7}
 8000f12:	b085      	sub	sp, #20
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	f003 0307 	and.w	r3, r3, #7
 8000f1e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f20:	4b0c      	ldr	r3, [pc, #48]	@ (8000f54 <__NVIC_SetPriorityGrouping+0x44>)
 8000f22:	68db      	ldr	r3, [r3, #12]
 8000f24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f26:	68ba      	ldr	r2, [r7, #8]
 8000f28:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000f2c:	4013      	ands	r3, r2
 8000f2e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f34:	68bb      	ldr	r3, [r7, #8]
 8000f36:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f38:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000f3c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f42:	4a04      	ldr	r2, [pc, #16]	@ (8000f54 <__NVIC_SetPriorityGrouping+0x44>)
 8000f44:	68bb      	ldr	r3, [r7, #8]
 8000f46:	60d3      	str	r3, [r2, #12]
}
 8000f48:	bf00      	nop
 8000f4a:	3714      	adds	r7, #20
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bc80      	pop	{r7}
 8000f50:	4770      	bx	lr
 8000f52:	bf00      	nop
 8000f54:	e000ed00 	.word	0xe000ed00

08000f58 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f5c:	4b04      	ldr	r3, [pc, #16]	@ (8000f70 <__NVIC_GetPriorityGrouping+0x18>)
 8000f5e:	68db      	ldr	r3, [r3, #12]
 8000f60:	0a1b      	lsrs	r3, r3, #8
 8000f62:	f003 0307 	and.w	r3, r3, #7
}
 8000f66:	4618      	mov	r0, r3
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bc80      	pop	{r7}
 8000f6c:	4770      	bx	lr
 8000f6e:	bf00      	nop
 8000f70:	e000ed00 	.word	0xe000ed00

08000f74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f74:	b480      	push	{r7}
 8000f76:	b083      	sub	sp, #12
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	6039      	str	r1, [r7, #0]
 8000f7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	db0a      	blt.n	8000f9e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	b2da      	uxtb	r2, r3
 8000f8c:	490c      	ldr	r1, [pc, #48]	@ (8000fc0 <__NVIC_SetPriority+0x4c>)
 8000f8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f92:	0112      	lsls	r2, r2, #4
 8000f94:	b2d2      	uxtb	r2, r2
 8000f96:	440b      	add	r3, r1
 8000f98:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f9c:	e00a      	b.n	8000fb4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f9e:	683b      	ldr	r3, [r7, #0]
 8000fa0:	b2da      	uxtb	r2, r3
 8000fa2:	4908      	ldr	r1, [pc, #32]	@ (8000fc4 <__NVIC_SetPriority+0x50>)
 8000fa4:	79fb      	ldrb	r3, [r7, #7]
 8000fa6:	f003 030f 	and.w	r3, r3, #15
 8000faa:	3b04      	subs	r3, #4
 8000fac:	0112      	lsls	r2, r2, #4
 8000fae:	b2d2      	uxtb	r2, r2
 8000fb0:	440b      	add	r3, r1
 8000fb2:	761a      	strb	r2, [r3, #24]
}
 8000fb4:	bf00      	nop
 8000fb6:	370c      	adds	r7, #12
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bc80      	pop	{r7}
 8000fbc:	4770      	bx	lr
 8000fbe:	bf00      	nop
 8000fc0:	e000e100 	.word	0xe000e100
 8000fc4:	e000ed00 	.word	0xe000ed00

08000fc8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	b089      	sub	sp, #36	@ 0x24
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	60f8      	str	r0, [r7, #12]
 8000fd0:	60b9      	str	r1, [r7, #8]
 8000fd2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	f003 0307 	and.w	r3, r3, #7
 8000fda:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fdc:	69fb      	ldr	r3, [r7, #28]
 8000fde:	f1c3 0307 	rsb	r3, r3, #7
 8000fe2:	2b04      	cmp	r3, #4
 8000fe4:	bf28      	it	cs
 8000fe6:	2304      	movcs	r3, #4
 8000fe8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fea:	69fb      	ldr	r3, [r7, #28]
 8000fec:	3304      	adds	r3, #4
 8000fee:	2b06      	cmp	r3, #6
 8000ff0:	d902      	bls.n	8000ff8 <NVIC_EncodePriority+0x30>
 8000ff2:	69fb      	ldr	r3, [r7, #28]
 8000ff4:	3b03      	subs	r3, #3
 8000ff6:	e000      	b.n	8000ffa <NVIC_EncodePriority+0x32>
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ffc:	f04f 32ff 	mov.w	r2, #4294967295
 8001000:	69bb      	ldr	r3, [r7, #24]
 8001002:	fa02 f303 	lsl.w	r3, r2, r3
 8001006:	43da      	mvns	r2, r3
 8001008:	68bb      	ldr	r3, [r7, #8]
 800100a:	401a      	ands	r2, r3
 800100c:	697b      	ldr	r3, [r7, #20]
 800100e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001010:	f04f 31ff 	mov.w	r1, #4294967295
 8001014:	697b      	ldr	r3, [r7, #20]
 8001016:	fa01 f303 	lsl.w	r3, r1, r3
 800101a:	43d9      	mvns	r1, r3
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001020:	4313      	orrs	r3, r2
         );
}
 8001022:	4618      	mov	r0, r3
 8001024:	3724      	adds	r7, #36	@ 0x24
 8001026:	46bd      	mov	sp, r7
 8001028:	bc80      	pop	{r7}
 800102a:	4770      	bx	lr

0800102c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b082      	sub	sp, #8
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	3b01      	subs	r3, #1
 8001038:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800103c:	d301      	bcc.n	8001042 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800103e:	2301      	movs	r3, #1
 8001040:	e00f      	b.n	8001062 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001042:	4a0a      	ldr	r2, [pc, #40]	@ (800106c <SysTick_Config+0x40>)
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	3b01      	subs	r3, #1
 8001048:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800104a:	210f      	movs	r1, #15
 800104c:	f04f 30ff 	mov.w	r0, #4294967295
 8001050:	f7ff ff90 	bl	8000f74 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001054:	4b05      	ldr	r3, [pc, #20]	@ (800106c <SysTick_Config+0x40>)
 8001056:	2200      	movs	r2, #0
 8001058:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800105a:	4b04      	ldr	r3, [pc, #16]	@ (800106c <SysTick_Config+0x40>)
 800105c:	2207      	movs	r2, #7
 800105e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001060:	2300      	movs	r3, #0
}
 8001062:	4618      	mov	r0, r3
 8001064:	3708      	adds	r7, #8
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	e000e010 	.word	0xe000e010

08001070 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b082      	sub	sp, #8
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001078:	6878      	ldr	r0, [r7, #4]
 800107a:	f7ff ff49 	bl	8000f10 <__NVIC_SetPriorityGrouping>
}
 800107e:	bf00      	nop
 8001080:	3708      	adds	r7, #8
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}

08001086 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001086:	b580      	push	{r7, lr}
 8001088:	b086      	sub	sp, #24
 800108a:	af00      	add	r7, sp, #0
 800108c:	4603      	mov	r3, r0
 800108e:	60b9      	str	r1, [r7, #8]
 8001090:	607a      	str	r2, [r7, #4]
 8001092:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001094:	2300      	movs	r3, #0
 8001096:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001098:	f7ff ff5e 	bl	8000f58 <__NVIC_GetPriorityGrouping>
 800109c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800109e:	687a      	ldr	r2, [r7, #4]
 80010a0:	68b9      	ldr	r1, [r7, #8]
 80010a2:	6978      	ldr	r0, [r7, #20]
 80010a4:	f7ff ff90 	bl	8000fc8 <NVIC_EncodePriority>
 80010a8:	4602      	mov	r2, r0
 80010aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010ae:	4611      	mov	r1, r2
 80010b0:	4618      	mov	r0, r3
 80010b2:	f7ff ff5f 	bl	8000f74 <__NVIC_SetPriority>
}
 80010b6:	bf00      	nop
 80010b8:	3718      	adds	r7, #24
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}

080010be <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010be:	b580      	push	{r7, lr}
 80010c0:	b082      	sub	sp, #8
 80010c2:	af00      	add	r7, sp, #0
 80010c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010c6:	6878      	ldr	r0, [r7, #4]
 80010c8:	f7ff ffb0 	bl	800102c <SysTick_Config>
 80010cc:	4603      	mov	r3, r0
}
 80010ce:	4618      	mov	r0, r3
 80010d0:	3708      	adds	r7, #8
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}
	...

080010d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010d8:	b480      	push	{r7}
 80010da:	b08b      	sub	sp, #44	@ 0x2c
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
 80010e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80010e2:	2300      	movs	r3, #0
 80010e4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80010e6:	2300      	movs	r3, #0
 80010e8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010ea:	e169      	b.n	80013c0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80010ec:	2201      	movs	r2, #1
 80010ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010f0:	fa02 f303 	lsl.w	r3, r2, r3
 80010f4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	69fa      	ldr	r2, [r7, #28]
 80010fc:	4013      	ands	r3, r2
 80010fe:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001100:	69ba      	ldr	r2, [r7, #24]
 8001102:	69fb      	ldr	r3, [r7, #28]
 8001104:	429a      	cmp	r2, r3
 8001106:	f040 8158 	bne.w	80013ba <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	685b      	ldr	r3, [r3, #4]
 800110e:	4a9a      	ldr	r2, [pc, #616]	@ (8001378 <HAL_GPIO_Init+0x2a0>)
 8001110:	4293      	cmp	r3, r2
 8001112:	d05e      	beq.n	80011d2 <HAL_GPIO_Init+0xfa>
 8001114:	4a98      	ldr	r2, [pc, #608]	@ (8001378 <HAL_GPIO_Init+0x2a0>)
 8001116:	4293      	cmp	r3, r2
 8001118:	d875      	bhi.n	8001206 <HAL_GPIO_Init+0x12e>
 800111a:	4a98      	ldr	r2, [pc, #608]	@ (800137c <HAL_GPIO_Init+0x2a4>)
 800111c:	4293      	cmp	r3, r2
 800111e:	d058      	beq.n	80011d2 <HAL_GPIO_Init+0xfa>
 8001120:	4a96      	ldr	r2, [pc, #600]	@ (800137c <HAL_GPIO_Init+0x2a4>)
 8001122:	4293      	cmp	r3, r2
 8001124:	d86f      	bhi.n	8001206 <HAL_GPIO_Init+0x12e>
 8001126:	4a96      	ldr	r2, [pc, #600]	@ (8001380 <HAL_GPIO_Init+0x2a8>)
 8001128:	4293      	cmp	r3, r2
 800112a:	d052      	beq.n	80011d2 <HAL_GPIO_Init+0xfa>
 800112c:	4a94      	ldr	r2, [pc, #592]	@ (8001380 <HAL_GPIO_Init+0x2a8>)
 800112e:	4293      	cmp	r3, r2
 8001130:	d869      	bhi.n	8001206 <HAL_GPIO_Init+0x12e>
 8001132:	4a94      	ldr	r2, [pc, #592]	@ (8001384 <HAL_GPIO_Init+0x2ac>)
 8001134:	4293      	cmp	r3, r2
 8001136:	d04c      	beq.n	80011d2 <HAL_GPIO_Init+0xfa>
 8001138:	4a92      	ldr	r2, [pc, #584]	@ (8001384 <HAL_GPIO_Init+0x2ac>)
 800113a:	4293      	cmp	r3, r2
 800113c:	d863      	bhi.n	8001206 <HAL_GPIO_Init+0x12e>
 800113e:	4a92      	ldr	r2, [pc, #584]	@ (8001388 <HAL_GPIO_Init+0x2b0>)
 8001140:	4293      	cmp	r3, r2
 8001142:	d046      	beq.n	80011d2 <HAL_GPIO_Init+0xfa>
 8001144:	4a90      	ldr	r2, [pc, #576]	@ (8001388 <HAL_GPIO_Init+0x2b0>)
 8001146:	4293      	cmp	r3, r2
 8001148:	d85d      	bhi.n	8001206 <HAL_GPIO_Init+0x12e>
 800114a:	2b12      	cmp	r3, #18
 800114c:	d82a      	bhi.n	80011a4 <HAL_GPIO_Init+0xcc>
 800114e:	2b12      	cmp	r3, #18
 8001150:	d859      	bhi.n	8001206 <HAL_GPIO_Init+0x12e>
 8001152:	a201      	add	r2, pc, #4	@ (adr r2, 8001158 <HAL_GPIO_Init+0x80>)
 8001154:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001158:	080011d3 	.word	0x080011d3
 800115c:	080011ad 	.word	0x080011ad
 8001160:	080011bf 	.word	0x080011bf
 8001164:	08001201 	.word	0x08001201
 8001168:	08001207 	.word	0x08001207
 800116c:	08001207 	.word	0x08001207
 8001170:	08001207 	.word	0x08001207
 8001174:	08001207 	.word	0x08001207
 8001178:	08001207 	.word	0x08001207
 800117c:	08001207 	.word	0x08001207
 8001180:	08001207 	.word	0x08001207
 8001184:	08001207 	.word	0x08001207
 8001188:	08001207 	.word	0x08001207
 800118c:	08001207 	.word	0x08001207
 8001190:	08001207 	.word	0x08001207
 8001194:	08001207 	.word	0x08001207
 8001198:	08001207 	.word	0x08001207
 800119c:	080011b5 	.word	0x080011b5
 80011a0:	080011c9 	.word	0x080011c9
 80011a4:	4a79      	ldr	r2, [pc, #484]	@ (800138c <HAL_GPIO_Init+0x2b4>)
 80011a6:	4293      	cmp	r3, r2
 80011a8:	d013      	beq.n	80011d2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80011aa:	e02c      	b.n	8001206 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	68db      	ldr	r3, [r3, #12]
 80011b0:	623b      	str	r3, [r7, #32]
          break;
 80011b2:	e029      	b.n	8001208 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	68db      	ldr	r3, [r3, #12]
 80011b8:	3304      	adds	r3, #4
 80011ba:	623b      	str	r3, [r7, #32]
          break;
 80011bc:	e024      	b.n	8001208 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	68db      	ldr	r3, [r3, #12]
 80011c2:	3308      	adds	r3, #8
 80011c4:	623b      	str	r3, [r7, #32]
          break;
 80011c6:	e01f      	b.n	8001208 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	68db      	ldr	r3, [r3, #12]
 80011cc:	330c      	adds	r3, #12
 80011ce:	623b      	str	r3, [r7, #32]
          break;
 80011d0:	e01a      	b.n	8001208 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	689b      	ldr	r3, [r3, #8]
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d102      	bne.n	80011e0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80011da:	2304      	movs	r3, #4
 80011dc:	623b      	str	r3, [r7, #32]
          break;
 80011de:	e013      	b.n	8001208 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	689b      	ldr	r3, [r3, #8]
 80011e4:	2b01      	cmp	r3, #1
 80011e6:	d105      	bne.n	80011f4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80011e8:	2308      	movs	r3, #8
 80011ea:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	69fa      	ldr	r2, [r7, #28]
 80011f0:	611a      	str	r2, [r3, #16]
          break;
 80011f2:	e009      	b.n	8001208 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80011f4:	2308      	movs	r3, #8
 80011f6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	69fa      	ldr	r2, [r7, #28]
 80011fc:	615a      	str	r2, [r3, #20]
          break;
 80011fe:	e003      	b.n	8001208 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001200:	2300      	movs	r3, #0
 8001202:	623b      	str	r3, [r7, #32]
          break;
 8001204:	e000      	b.n	8001208 <HAL_GPIO_Init+0x130>
          break;
 8001206:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001208:	69bb      	ldr	r3, [r7, #24]
 800120a:	2bff      	cmp	r3, #255	@ 0xff
 800120c:	d801      	bhi.n	8001212 <HAL_GPIO_Init+0x13a>
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	e001      	b.n	8001216 <HAL_GPIO_Init+0x13e>
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	3304      	adds	r3, #4
 8001216:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001218:	69bb      	ldr	r3, [r7, #24]
 800121a:	2bff      	cmp	r3, #255	@ 0xff
 800121c:	d802      	bhi.n	8001224 <HAL_GPIO_Init+0x14c>
 800121e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001220:	009b      	lsls	r3, r3, #2
 8001222:	e002      	b.n	800122a <HAL_GPIO_Init+0x152>
 8001224:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001226:	3b08      	subs	r3, #8
 8001228:	009b      	lsls	r3, r3, #2
 800122a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800122c:	697b      	ldr	r3, [r7, #20]
 800122e:	681a      	ldr	r2, [r3, #0]
 8001230:	210f      	movs	r1, #15
 8001232:	693b      	ldr	r3, [r7, #16]
 8001234:	fa01 f303 	lsl.w	r3, r1, r3
 8001238:	43db      	mvns	r3, r3
 800123a:	401a      	ands	r2, r3
 800123c:	6a39      	ldr	r1, [r7, #32]
 800123e:	693b      	ldr	r3, [r7, #16]
 8001240:	fa01 f303 	lsl.w	r3, r1, r3
 8001244:	431a      	orrs	r2, r3
 8001246:	697b      	ldr	r3, [r7, #20]
 8001248:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	685b      	ldr	r3, [r3, #4]
 800124e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001252:	2b00      	cmp	r3, #0
 8001254:	f000 80b1 	beq.w	80013ba <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001258:	4b4d      	ldr	r3, [pc, #308]	@ (8001390 <HAL_GPIO_Init+0x2b8>)
 800125a:	699b      	ldr	r3, [r3, #24]
 800125c:	4a4c      	ldr	r2, [pc, #304]	@ (8001390 <HAL_GPIO_Init+0x2b8>)
 800125e:	f043 0301 	orr.w	r3, r3, #1
 8001262:	6193      	str	r3, [r2, #24]
 8001264:	4b4a      	ldr	r3, [pc, #296]	@ (8001390 <HAL_GPIO_Init+0x2b8>)
 8001266:	699b      	ldr	r3, [r3, #24]
 8001268:	f003 0301 	and.w	r3, r3, #1
 800126c:	60bb      	str	r3, [r7, #8]
 800126e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001270:	4a48      	ldr	r2, [pc, #288]	@ (8001394 <HAL_GPIO_Init+0x2bc>)
 8001272:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001274:	089b      	lsrs	r3, r3, #2
 8001276:	3302      	adds	r3, #2
 8001278:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800127c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800127e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001280:	f003 0303 	and.w	r3, r3, #3
 8001284:	009b      	lsls	r3, r3, #2
 8001286:	220f      	movs	r2, #15
 8001288:	fa02 f303 	lsl.w	r3, r2, r3
 800128c:	43db      	mvns	r3, r3
 800128e:	68fa      	ldr	r2, [r7, #12]
 8001290:	4013      	ands	r3, r2
 8001292:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	4a40      	ldr	r2, [pc, #256]	@ (8001398 <HAL_GPIO_Init+0x2c0>)
 8001298:	4293      	cmp	r3, r2
 800129a:	d013      	beq.n	80012c4 <HAL_GPIO_Init+0x1ec>
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	4a3f      	ldr	r2, [pc, #252]	@ (800139c <HAL_GPIO_Init+0x2c4>)
 80012a0:	4293      	cmp	r3, r2
 80012a2:	d00d      	beq.n	80012c0 <HAL_GPIO_Init+0x1e8>
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	4a3e      	ldr	r2, [pc, #248]	@ (80013a0 <HAL_GPIO_Init+0x2c8>)
 80012a8:	4293      	cmp	r3, r2
 80012aa:	d007      	beq.n	80012bc <HAL_GPIO_Init+0x1e4>
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	4a3d      	ldr	r2, [pc, #244]	@ (80013a4 <HAL_GPIO_Init+0x2cc>)
 80012b0:	4293      	cmp	r3, r2
 80012b2:	d101      	bne.n	80012b8 <HAL_GPIO_Init+0x1e0>
 80012b4:	2303      	movs	r3, #3
 80012b6:	e006      	b.n	80012c6 <HAL_GPIO_Init+0x1ee>
 80012b8:	2304      	movs	r3, #4
 80012ba:	e004      	b.n	80012c6 <HAL_GPIO_Init+0x1ee>
 80012bc:	2302      	movs	r3, #2
 80012be:	e002      	b.n	80012c6 <HAL_GPIO_Init+0x1ee>
 80012c0:	2301      	movs	r3, #1
 80012c2:	e000      	b.n	80012c6 <HAL_GPIO_Init+0x1ee>
 80012c4:	2300      	movs	r3, #0
 80012c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80012c8:	f002 0203 	and.w	r2, r2, #3
 80012cc:	0092      	lsls	r2, r2, #2
 80012ce:	4093      	lsls	r3, r2
 80012d0:	68fa      	ldr	r2, [r7, #12]
 80012d2:	4313      	orrs	r3, r2
 80012d4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80012d6:	492f      	ldr	r1, [pc, #188]	@ (8001394 <HAL_GPIO_Init+0x2bc>)
 80012d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012da:	089b      	lsrs	r3, r3, #2
 80012dc:	3302      	adds	r3, #2
 80012de:	68fa      	ldr	r2, [r7, #12]
 80012e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	685b      	ldr	r3, [r3, #4]
 80012e8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d006      	beq.n	80012fe <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80012f0:	4b2d      	ldr	r3, [pc, #180]	@ (80013a8 <HAL_GPIO_Init+0x2d0>)
 80012f2:	689a      	ldr	r2, [r3, #8]
 80012f4:	492c      	ldr	r1, [pc, #176]	@ (80013a8 <HAL_GPIO_Init+0x2d0>)
 80012f6:	69bb      	ldr	r3, [r7, #24]
 80012f8:	4313      	orrs	r3, r2
 80012fa:	608b      	str	r3, [r1, #8]
 80012fc:	e006      	b.n	800130c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80012fe:	4b2a      	ldr	r3, [pc, #168]	@ (80013a8 <HAL_GPIO_Init+0x2d0>)
 8001300:	689a      	ldr	r2, [r3, #8]
 8001302:	69bb      	ldr	r3, [r7, #24]
 8001304:	43db      	mvns	r3, r3
 8001306:	4928      	ldr	r1, [pc, #160]	@ (80013a8 <HAL_GPIO_Init+0x2d0>)
 8001308:	4013      	ands	r3, r2
 800130a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	685b      	ldr	r3, [r3, #4]
 8001310:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001314:	2b00      	cmp	r3, #0
 8001316:	d006      	beq.n	8001326 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001318:	4b23      	ldr	r3, [pc, #140]	@ (80013a8 <HAL_GPIO_Init+0x2d0>)
 800131a:	68da      	ldr	r2, [r3, #12]
 800131c:	4922      	ldr	r1, [pc, #136]	@ (80013a8 <HAL_GPIO_Init+0x2d0>)
 800131e:	69bb      	ldr	r3, [r7, #24]
 8001320:	4313      	orrs	r3, r2
 8001322:	60cb      	str	r3, [r1, #12]
 8001324:	e006      	b.n	8001334 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001326:	4b20      	ldr	r3, [pc, #128]	@ (80013a8 <HAL_GPIO_Init+0x2d0>)
 8001328:	68da      	ldr	r2, [r3, #12]
 800132a:	69bb      	ldr	r3, [r7, #24]
 800132c:	43db      	mvns	r3, r3
 800132e:	491e      	ldr	r1, [pc, #120]	@ (80013a8 <HAL_GPIO_Init+0x2d0>)
 8001330:	4013      	ands	r3, r2
 8001332:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800133c:	2b00      	cmp	r3, #0
 800133e:	d006      	beq.n	800134e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001340:	4b19      	ldr	r3, [pc, #100]	@ (80013a8 <HAL_GPIO_Init+0x2d0>)
 8001342:	685a      	ldr	r2, [r3, #4]
 8001344:	4918      	ldr	r1, [pc, #96]	@ (80013a8 <HAL_GPIO_Init+0x2d0>)
 8001346:	69bb      	ldr	r3, [r7, #24]
 8001348:	4313      	orrs	r3, r2
 800134a:	604b      	str	r3, [r1, #4]
 800134c:	e006      	b.n	800135c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800134e:	4b16      	ldr	r3, [pc, #88]	@ (80013a8 <HAL_GPIO_Init+0x2d0>)
 8001350:	685a      	ldr	r2, [r3, #4]
 8001352:	69bb      	ldr	r3, [r7, #24]
 8001354:	43db      	mvns	r3, r3
 8001356:	4914      	ldr	r1, [pc, #80]	@ (80013a8 <HAL_GPIO_Init+0x2d0>)
 8001358:	4013      	ands	r3, r2
 800135a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	685b      	ldr	r3, [r3, #4]
 8001360:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001364:	2b00      	cmp	r3, #0
 8001366:	d021      	beq.n	80013ac <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001368:	4b0f      	ldr	r3, [pc, #60]	@ (80013a8 <HAL_GPIO_Init+0x2d0>)
 800136a:	681a      	ldr	r2, [r3, #0]
 800136c:	490e      	ldr	r1, [pc, #56]	@ (80013a8 <HAL_GPIO_Init+0x2d0>)
 800136e:	69bb      	ldr	r3, [r7, #24]
 8001370:	4313      	orrs	r3, r2
 8001372:	600b      	str	r3, [r1, #0]
 8001374:	e021      	b.n	80013ba <HAL_GPIO_Init+0x2e2>
 8001376:	bf00      	nop
 8001378:	10320000 	.word	0x10320000
 800137c:	10310000 	.word	0x10310000
 8001380:	10220000 	.word	0x10220000
 8001384:	10210000 	.word	0x10210000
 8001388:	10120000 	.word	0x10120000
 800138c:	10110000 	.word	0x10110000
 8001390:	40021000 	.word	0x40021000
 8001394:	40010000 	.word	0x40010000
 8001398:	40010800 	.word	0x40010800
 800139c:	40010c00 	.word	0x40010c00
 80013a0:	40011000 	.word	0x40011000
 80013a4:	40011400 	.word	0x40011400
 80013a8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80013ac:	4b0b      	ldr	r3, [pc, #44]	@ (80013dc <HAL_GPIO_Init+0x304>)
 80013ae:	681a      	ldr	r2, [r3, #0]
 80013b0:	69bb      	ldr	r3, [r7, #24]
 80013b2:	43db      	mvns	r3, r3
 80013b4:	4909      	ldr	r1, [pc, #36]	@ (80013dc <HAL_GPIO_Init+0x304>)
 80013b6:	4013      	ands	r3, r2
 80013b8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80013ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013bc:	3301      	adds	r3, #1
 80013be:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	681a      	ldr	r2, [r3, #0]
 80013c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013c6:	fa22 f303 	lsr.w	r3, r2, r3
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	f47f ae8e 	bne.w	80010ec <HAL_GPIO_Init+0x14>
  }
}
 80013d0:	bf00      	nop
 80013d2:	bf00      	nop
 80013d4:	372c      	adds	r7, #44	@ 0x2c
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bc80      	pop	{r7}
 80013da:	4770      	bx	lr
 80013dc:	40010400 	.word	0x40010400

080013e0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80013e0:	b480      	push	{r7}
 80013e2:	b085      	sub	sp, #20
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
 80013e8:	460b      	mov	r3, r1
 80013ea:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	689a      	ldr	r2, [r3, #8]
 80013f0:	887b      	ldrh	r3, [r7, #2]
 80013f2:	4013      	ands	r3, r2
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d002      	beq.n	80013fe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80013f8:	2301      	movs	r3, #1
 80013fa:	73fb      	strb	r3, [r7, #15]
 80013fc:	e001      	b.n	8001402 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80013fe:	2300      	movs	r3, #0
 8001400:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001402:	7bfb      	ldrb	r3, [r7, #15]
}
 8001404:	4618      	mov	r0, r3
 8001406:	3714      	adds	r7, #20
 8001408:	46bd      	mov	sp, r7
 800140a:	bc80      	pop	{r7}
 800140c:	4770      	bx	lr

0800140e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800140e:	b480      	push	{r7}
 8001410:	b083      	sub	sp, #12
 8001412:	af00      	add	r7, sp, #0
 8001414:	6078      	str	r0, [r7, #4]
 8001416:	460b      	mov	r3, r1
 8001418:	807b      	strh	r3, [r7, #2]
 800141a:	4613      	mov	r3, r2
 800141c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800141e:	787b      	ldrb	r3, [r7, #1]
 8001420:	2b00      	cmp	r3, #0
 8001422:	d003      	beq.n	800142c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001424:	887a      	ldrh	r2, [r7, #2]
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800142a:	e003      	b.n	8001434 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800142c:	887b      	ldrh	r3, [r7, #2]
 800142e:	041a      	lsls	r2, r3, #16
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	611a      	str	r2, [r3, #16]
}
 8001434:	bf00      	nop
 8001436:	370c      	adds	r7, #12
 8001438:	46bd      	mov	sp, r7
 800143a:	bc80      	pop	{r7}
 800143c:	4770      	bx	lr
	...

08001440 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b084      	sub	sp, #16
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	2b00      	cmp	r3, #0
 800144c:	d101      	bne.n	8001452 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800144e:	2301      	movs	r3, #1
 8001450:	e12b      	b.n	80016aa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001458:	b2db      	uxtb	r3, r3
 800145a:	2b00      	cmp	r3, #0
 800145c:	d106      	bne.n	800146c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	2200      	movs	r2, #0
 8001462:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001466:	6878      	ldr	r0, [r7, #4]
 8001468:	f7ff fbe2 	bl	8000c30 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	2224      	movs	r2, #36	@ 0x24
 8001470:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	681a      	ldr	r2, [r3, #0]
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f022 0201 	bic.w	r2, r2, #1
 8001482:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	681a      	ldr	r2, [r3, #0]
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001492:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	681a      	ldr	r2, [r3, #0]
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80014a2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80014a4:	f001 f842 	bl	800252c <HAL_RCC_GetPCLK1Freq>
 80014a8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	685b      	ldr	r3, [r3, #4]
 80014ae:	4a81      	ldr	r2, [pc, #516]	@ (80016b4 <HAL_I2C_Init+0x274>)
 80014b0:	4293      	cmp	r3, r2
 80014b2:	d807      	bhi.n	80014c4 <HAL_I2C_Init+0x84>
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	4a80      	ldr	r2, [pc, #512]	@ (80016b8 <HAL_I2C_Init+0x278>)
 80014b8:	4293      	cmp	r3, r2
 80014ba:	bf94      	ite	ls
 80014bc:	2301      	movls	r3, #1
 80014be:	2300      	movhi	r3, #0
 80014c0:	b2db      	uxtb	r3, r3
 80014c2:	e006      	b.n	80014d2 <HAL_I2C_Init+0x92>
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	4a7d      	ldr	r2, [pc, #500]	@ (80016bc <HAL_I2C_Init+0x27c>)
 80014c8:	4293      	cmp	r3, r2
 80014ca:	bf94      	ite	ls
 80014cc:	2301      	movls	r3, #1
 80014ce:	2300      	movhi	r3, #0
 80014d0:	b2db      	uxtb	r3, r3
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d001      	beq.n	80014da <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80014d6:	2301      	movs	r3, #1
 80014d8:	e0e7      	b.n	80016aa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	4a78      	ldr	r2, [pc, #480]	@ (80016c0 <HAL_I2C_Init+0x280>)
 80014de:	fba2 2303 	umull	r2, r3, r2, r3
 80014e2:	0c9b      	lsrs	r3, r3, #18
 80014e4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	685b      	ldr	r3, [r3, #4]
 80014ec:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	68ba      	ldr	r2, [r7, #8]
 80014f6:	430a      	orrs	r2, r1
 80014f8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	6a1b      	ldr	r3, [r3, #32]
 8001500:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	685b      	ldr	r3, [r3, #4]
 8001508:	4a6a      	ldr	r2, [pc, #424]	@ (80016b4 <HAL_I2C_Init+0x274>)
 800150a:	4293      	cmp	r3, r2
 800150c:	d802      	bhi.n	8001514 <HAL_I2C_Init+0xd4>
 800150e:	68bb      	ldr	r3, [r7, #8]
 8001510:	3301      	adds	r3, #1
 8001512:	e009      	b.n	8001528 <HAL_I2C_Init+0xe8>
 8001514:	68bb      	ldr	r3, [r7, #8]
 8001516:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800151a:	fb02 f303 	mul.w	r3, r2, r3
 800151e:	4a69      	ldr	r2, [pc, #420]	@ (80016c4 <HAL_I2C_Init+0x284>)
 8001520:	fba2 2303 	umull	r2, r3, r2, r3
 8001524:	099b      	lsrs	r3, r3, #6
 8001526:	3301      	adds	r3, #1
 8001528:	687a      	ldr	r2, [r7, #4]
 800152a:	6812      	ldr	r2, [r2, #0]
 800152c:	430b      	orrs	r3, r1
 800152e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	69db      	ldr	r3, [r3, #28]
 8001536:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800153a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	685b      	ldr	r3, [r3, #4]
 8001542:	495c      	ldr	r1, [pc, #368]	@ (80016b4 <HAL_I2C_Init+0x274>)
 8001544:	428b      	cmp	r3, r1
 8001546:	d819      	bhi.n	800157c <HAL_I2C_Init+0x13c>
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	1e59      	subs	r1, r3, #1
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	685b      	ldr	r3, [r3, #4]
 8001550:	005b      	lsls	r3, r3, #1
 8001552:	fbb1 f3f3 	udiv	r3, r1, r3
 8001556:	1c59      	adds	r1, r3, #1
 8001558:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800155c:	400b      	ands	r3, r1
 800155e:	2b00      	cmp	r3, #0
 8001560:	d00a      	beq.n	8001578 <HAL_I2C_Init+0x138>
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	1e59      	subs	r1, r3, #1
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	685b      	ldr	r3, [r3, #4]
 800156a:	005b      	lsls	r3, r3, #1
 800156c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001570:	3301      	adds	r3, #1
 8001572:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001576:	e051      	b.n	800161c <HAL_I2C_Init+0x1dc>
 8001578:	2304      	movs	r3, #4
 800157a:	e04f      	b.n	800161c <HAL_I2C_Init+0x1dc>
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	689b      	ldr	r3, [r3, #8]
 8001580:	2b00      	cmp	r3, #0
 8001582:	d111      	bne.n	80015a8 <HAL_I2C_Init+0x168>
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	1e58      	subs	r0, r3, #1
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	6859      	ldr	r1, [r3, #4]
 800158c:	460b      	mov	r3, r1
 800158e:	005b      	lsls	r3, r3, #1
 8001590:	440b      	add	r3, r1
 8001592:	fbb0 f3f3 	udiv	r3, r0, r3
 8001596:	3301      	adds	r3, #1
 8001598:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800159c:	2b00      	cmp	r3, #0
 800159e:	bf0c      	ite	eq
 80015a0:	2301      	moveq	r3, #1
 80015a2:	2300      	movne	r3, #0
 80015a4:	b2db      	uxtb	r3, r3
 80015a6:	e012      	b.n	80015ce <HAL_I2C_Init+0x18e>
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	1e58      	subs	r0, r3, #1
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	6859      	ldr	r1, [r3, #4]
 80015b0:	460b      	mov	r3, r1
 80015b2:	009b      	lsls	r3, r3, #2
 80015b4:	440b      	add	r3, r1
 80015b6:	0099      	lsls	r1, r3, #2
 80015b8:	440b      	add	r3, r1
 80015ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80015be:	3301      	adds	r3, #1
 80015c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	bf0c      	ite	eq
 80015c8:	2301      	moveq	r3, #1
 80015ca:	2300      	movne	r3, #0
 80015cc:	b2db      	uxtb	r3, r3
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d001      	beq.n	80015d6 <HAL_I2C_Init+0x196>
 80015d2:	2301      	movs	r3, #1
 80015d4:	e022      	b.n	800161c <HAL_I2C_Init+0x1dc>
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	689b      	ldr	r3, [r3, #8]
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d10e      	bne.n	80015fc <HAL_I2C_Init+0x1bc>
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	1e58      	subs	r0, r3, #1
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	6859      	ldr	r1, [r3, #4]
 80015e6:	460b      	mov	r3, r1
 80015e8:	005b      	lsls	r3, r3, #1
 80015ea:	440b      	add	r3, r1
 80015ec:	fbb0 f3f3 	udiv	r3, r0, r3
 80015f0:	3301      	adds	r3, #1
 80015f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015f6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80015fa:	e00f      	b.n	800161c <HAL_I2C_Init+0x1dc>
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	1e58      	subs	r0, r3, #1
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	6859      	ldr	r1, [r3, #4]
 8001604:	460b      	mov	r3, r1
 8001606:	009b      	lsls	r3, r3, #2
 8001608:	440b      	add	r3, r1
 800160a:	0099      	lsls	r1, r3, #2
 800160c:	440b      	add	r3, r1
 800160e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001612:	3301      	adds	r3, #1
 8001614:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001618:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800161c:	6879      	ldr	r1, [r7, #4]
 800161e:	6809      	ldr	r1, [r1, #0]
 8001620:	4313      	orrs	r3, r2
 8001622:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	69da      	ldr	r2, [r3, #28]
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	6a1b      	ldr	r3, [r3, #32]
 8001636:	431a      	orrs	r2, r3
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	430a      	orrs	r2, r1
 800163e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	689b      	ldr	r3, [r3, #8]
 8001646:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800164a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800164e:	687a      	ldr	r2, [r7, #4]
 8001650:	6911      	ldr	r1, [r2, #16]
 8001652:	687a      	ldr	r2, [r7, #4]
 8001654:	68d2      	ldr	r2, [r2, #12]
 8001656:	4311      	orrs	r1, r2
 8001658:	687a      	ldr	r2, [r7, #4]
 800165a:	6812      	ldr	r2, [r2, #0]
 800165c:	430b      	orrs	r3, r1
 800165e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	68db      	ldr	r3, [r3, #12]
 8001666:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	695a      	ldr	r2, [r3, #20]
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	699b      	ldr	r3, [r3, #24]
 8001672:	431a      	orrs	r2, r3
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	430a      	orrs	r2, r1
 800167a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	681a      	ldr	r2, [r3, #0]
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f042 0201 	orr.w	r2, r2, #1
 800168a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	2200      	movs	r2, #0
 8001690:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	2220      	movs	r2, #32
 8001696:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	2200      	movs	r2, #0
 800169e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	2200      	movs	r2, #0
 80016a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80016a8:	2300      	movs	r3, #0
}
 80016aa:	4618      	mov	r0, r3
 80016ac:	3710      	adds	r7, #16
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	bf00      	nop
 80016b4:	000186a0 	.word	0x000186a0
 80016b8:	001e847f 	.word	0x001e847f
 80016bc:	003d08ff 	.word	0x003d08ff
 80016c0:	431bde83 	.word	0x431bde83
 80016c4:	10624dd3 	.word	0x10624dd3

080016c8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b088      	sub	sp, #32
 80016cc:	af02      	add	r7, sp, #8
 80016ce:	60f8      	str	r0, [r7, #12]
 80016d0:	4608      	mov	r0, r1
 80016d2:	4611      	mov	r1, r2
 80016d4:	461a      	mov	r2, r3
 80016d6:	4603      	mov	r3, r0
 80016d8:	817b      	strh	r3, [r7, #10]
 80016da:	460b      	mov	r3, r1
 80016dc:	813b      	strh	r3, [r7, #8]
 80016de:	4613      	mov	r3, r2
 80016e0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80016e2:	f7ff fbe7 	bl	8000eb4 <HAL_GetTick>
 80016e6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80016ee:	b2db      	uxtb	r3, r3
 80016f0:	2b20      	cmp	r3, #32
 80016f2:	f040 80d9 	bne.w	80018a8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80016f6:	697b      	ldr	r3, [r7, #20]
 80016f8:	9300      	str	r3, [sp, #0]
 80016fa:	2319      	movs	r3, #25
 80016fc:	2201      	movs	r2, #1
 80016fe:	496d      	ldr	r1, [pc, #436]	@ (80018b4 <HAL_I2C_Mem_Write+0x1ec>)
 8001700:	68f8      	ldr	r0, [r7, #12]
 8001702:	f000 f971 	bl	80019e8 <I2C_WaitOnFlagUntilTimeout>
 8001706:	4603      	mov	r3, r0
 8001708:	2b00      	cmp	r3, #0
 800170a:	d001      	beq.n	8001710 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800170c:	2302      	movs	r3, #2
 800170e:	e0cc      	b.n	80018aa <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001716:	2b01      	cmp	r3, #1
 8001718:	d101      	bne.n	800171e <HAL_I2C_Mem_Write+0x56>
 800171a:	2302      	movs	r3, #2
 800171c:	e0c5      	b.n	80018aa <HAL_I2C_Mem_Write+0x1e2>
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	2201      	movs	r2, #1
 8001722:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f003 0301 	and.w	r3, r3, #1
 8001730:	2b01      	cmp	r3, #1
 8001732:	d007      	beq.n	8001744 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	681a      	ldr	r2, [r3, #0]
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f042 0201 	orr.w	r2, r2, #1
 8001742:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	681a      	ldr	r2, [r3, #0]
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001752:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	2221      	movs	r2, #33	@ 0x21
 8001758:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	2240      	movs	r2, #64	@ 0x40
 8001760:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	2200      	movs	r2, #0
 8001768:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	6a3a      	ldr	r2, [r7, #32]
 800176e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001774:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800177a:	b29a      	uxth	r2, r3
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	4a4d      	ldr	r2, [pc, #308]	@ (80018b8 <HAL_I2C_Mem_Write+0x1f0>)
 8001784:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001786:	88f8      	ldrh	r0, [r7, #6]
 8001788:	893a      	ldrh	r2, [r7, #8]
 800178a:	8979      	ldrh	r1, [r7, #10]
 800178c:	697b      	ldr	r3, [r7, #20]
 800178e:	9301      	str	r3, [sp, #4]
 8001790:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001792:	9300      	str	r3, [sp, #0]
 8001794:	4603      	mov	r3, r0
 8001796:	68f8      	ldr	r0, [r7, #12]
 8001798:	f000 f890 	bl	80018bc <I2C_RequestMemoryWrite>
 800179c:	4603      	mov	r3, r0
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d052      	beq.n	8001848 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80017a2:	2301      	movs	r3, #1
 80017a4:	e081      	b.n	80018aa <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80017a6:	697a      	ldr	r2, [r7, #20]
 80017a8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80017aa:	68f8      	ldr	r0, [r7, #12]
 80017ac:	f000 fa36 	bl	8001c1c <I2C_WaitOnTXEFlagUntilTimeout>
 80017b0:	4603      	mov	r3, r0
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d00d      	beq.n	80017d2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017ba:	2b04      	cmp	r3, #4
 80017bc:	d107      	bne.n	80017ce <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	681a      	ldr	r2, [r3, #0]
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80017cc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80017ce:	2301      	movs	r3, #1
 80017d0:	e06b      	b.n	80018aa <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017d6:	781a      	ldrb	r2, [r3, #0]
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017e2:	1c5a      	adds	r2, r3, #1
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80017ec:	3b01      	subs	r3, #1
 80017ee:	b29a      	uxth	r2, r3
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80017f8:	b29b      	uxth	r3, r3
 80017fa:	3b01      	subs	r3, #1
 80017fc:	b29a      	uxth	r2, r3
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	695b      	ldr	r3, [r3, #20]
 8001808:	f003 0304 	and.w	r3, r3, #4
 800180c:	2b04      	cmp	r3, #4
 800180e:	d11b      	bne.n	8001848 <HAL_I2C_Mem_Write+0x180>
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001814:	2b00      	cmp	r3, #0
 8001816:	d017      	beq.n	8001848 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800181c:	781a      	ldrb	r2, [r3, #0]
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001828:	1c5a      	adds	r2, r3, #1
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001832:	3b01      	subs	r3, #1
 8001834:	b29a      	uxth	r2, r3
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800183e:	b29b      	uxth	r3, r3
 8001840:	3b01      	subs	r3, #1
 8001842:	b29a      	uxth	r2, r3
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800184c:	2b00      	cmp	r3, #0
 800184e:	d1aa      	bne.n	80017a6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001850:	697a      	ldr	r2, [r7, #20]
 8001852:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001854:	68f8      	ldr	r0, [r7, #12]
 8001856:	f000 fa29 	bl	8001cac <I2C_WaitOnBTFFlagUntilTimeout>
 800185a:	4603      	mov	r3, r0
 800185c:	2b00      	cmp	r3, #0
 800185e:	d00d      	beq.n	800187c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001864:	2b04      	cmp	r3, #4
 8001866:	d107      	bne.n	8001878 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	681a      	ldr	r2, [r3, #0]
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001876:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001878:	2301      	movs	r3, #1
 800187a:	e016      	b.n	80018aa <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	681a      	ldr	r2, [r3, #0]
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800188a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	2220      	movs	r2, #32
 8001890:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	2200      	movs	r2, #0
 8001898:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	2200      	movs	r2, #0
 80018a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80018a4:	2300      	movs	r3, #0
 80018a6:	e000      	b.n	80018aa <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80018a8:	2302      	movs	r3, #2
  }
}
 80018aa:	4618      	mov	r0, r3
 80018ac:	3718      	adds	r7, #24
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	bf00      	nop
 80018b4:	00100002 	.word	0x00100002
 80018b8:	ffff0000 	.word	0xffff0000

080018bc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b088      	sub	sp, #32
 80018c0:	af02      	add	r7, sp, #8
 80018c2:	60f8      	str	r0, [r7, #12]
 80018c4:	4608      	mov	r0, r1
 80018c6:	4611      	mov	r1, r2
 80018c8:	461a      	mov	r2, r3
 80018ca:	4603      	mov	r3, r0
 80018cc:	817b      	strh	r3, [r7, #10]
 80018ce:	460b      	mov	r3, r1
 80018d0:	813b      	strh	r3, [r7, #8]
 80018d2:	4613      	mov	r3, r2
 80018d4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	681a      	ldr	r2, [r3, #0]
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80018e4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80018e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018e8:	9300      	str	r3, [sp, #0]
 80018ea:	6a3b      	ldr	r3, [r7, #32]
 80018ec:	2200      	movs	r2, #0
 80018ee:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80018f2:	68f8      	ldr	r0, [r7, #12]
 80018f4:	f000 f878 	bl	80019e8 <I2C_WaitOnFlagUntilTimeout>
 80018f8:	4603      	mov	r3, r0
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d00d      	beq.n	800191a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001908:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800190c:	d103      	bne.n	8001916 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001914:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8001916:	2303      	movs	r3, #3
 8001918:	e05f      	b.n	80019da <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800191a:	897b      	ldrh	r3, [r7, #10]
 800191c:	b2db      	uxtb	r3, r3
 800191e:	461a      	mov	r2, r3
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8001928:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800192a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800192c:	6a3a      	ldr	r2, [r7, #32]
 800192e:	492d      	ldr	r1, [pc, #180]	@ (80019e4 <I2C_RequestMemoryWrite+0x128>)
 8001930:	68f8      	ldr	r0, [r7, #12]
 8001932:	f000 f8d3 	bl	8001adc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001936:	4603      	mov	r3, r0
 8001938:	2b00      	cmp	r3, #0
 800193a:	d001      	beq.n	8001940 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800193c:	2301      	movs	r3, #1
 800193e:	e04c      	b.n	80019da <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001940:	2300      	movs	r3, #0
 8001942:	617b      	str	r3, [r7, #20]
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	695b      	ldr	r3, [r3, #20]
 800194a:	617b      	str	r3, [r7, #20]
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	699b      	ldr	r3, [r3, #24]
 8001952:	617b      	str	r3, [r7, #20]
 8001954:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001956:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001958:	6a39      	ldr	r1, [r7, #32]
 800195a:	68f8      	ldr	r0, [r7, #12]
 800195c:	f000 f95e 	bl	8001c1c <I2C_WaitOnTXEFlagUntilTimeout>
 8001960:	4603      	mov	r3, r0
 8001962:	2b00      	cmp	r3, #0
 8001964:	d00d      	beq.n	8001982 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800196a:	2b04      	cmp	r3, #4
 800196c:	d107      	bne.n	800197e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	681a      	ldr	r2, [r3, #0]
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800197c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800197e:	2301      	movs	r3, #1
 8001980:	e02b      	b.n	80019da <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001982:	88fb      	ldrh	r3, [r7, #6]
 8001984:	2b01      	cmp	r3, #1
 8001986:	d105      	bne.n	8001994 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001988:	893b      	ldrh	r3, [r7, #8]
 800198a:	b2da      	uxtb	r2, r3
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	611a      	str	r2, [r3, #16]
 8001992:	e021      	b.n	80019d8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001994:	893b      	ldrh	r3, [r7, #8]
 8001996:	0a1b      	lsrs	r3, r3, #8
 8001998:	b29b      	uxth	r3, r3
 800199a:	b2da      	uxtb	r2, r3
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80019a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80019a4:	6a39      	ldr	r1, [r7, #32]
 80019a6:	68f8      	ldr	r0, [r7, #12]
 80019a8:	f000 f938 	bl	8001c1c <I2C_WaitOnTXEFlagUntilTimeout>
 80019ac:	4603      	mov	r3, r0
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d00d      	beq.n	80019ce <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019b6:	2b04      	cmp	r3, #4
 80019b8:	d107      	bne.n	80019ca <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	681a      	ldr	r2, [r3, #0]
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80019c8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80019ca:	2301      	movs	r3, #1
 80019cc:	e005      	b.n	80019da <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80019ce:	893b      	ldrh	r3, [r7, #8]
 80019d0:	b2da      	uxtb	r2, r3
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80019d8:	2300      	movs	r3, #0
}
 80019da:	4618      	mov	r0, r3
 80019dc:	3718      	adds	r7, #24
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}
 80019e2:	bf00      	nop
 80019e4:	00010002 	.word	0x00010002

080019e8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b084      	sub	sp, #16
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	60f8      	str	r0, [r7, #12]
 80019f0:	60b9      	str	r1, [r7, #8]
 80019f2:	603b      	str	r3, [r7, #0]
 80019f4:	4613      	mov	r3, r2
 80019f6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80019f8:	e048      	b.n	8001a8c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a00:	d044      	beq.n	8001a8c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001a02:	f7ff fa57 	bl	8000eb4 <HAL_GetTick>
 8001a06:	4602      	mov	r2, r0
 8001a08:	69bb      	ldr	r3, [r7, #24]
 8001a0a:	1ad3      	subs	r3, r2, r3
 8001a0c:	683a      	ldr	r2, [r7, #0]
 8001a0e:	429a      	cmp	r2, r3
 8001a10:	d302      	bcc.n	8001a18 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d139      	bne.n	8001a8c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001a18:	68bb      	ldr	r3, [r7, #8]
 8001a1a:	0c1b      	lsrs	r3, r3, #16
 8001a1c:	b2db      	uxtb	r3, r3
 8001a1e:	2b01      	cmp	r3, #1
 8001a20:	d10d      	bne.n	8001a3e <I2C_WaitOnFlagUntilTimeout+0x56>
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	695b      	ldr	r3, [r3, #20]
 8001a28:	43da      	mvns	r2, r3
 8001a2a:	68bb      	ldr	r3, [r7, #8]
 8001a2c:	4013      	ands	r3, r2
 8001a2e:	b29b      	uxth	r3, r3
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	bf0c      	ite	eq
 8001a34:	2301      	moveq	r3, #1
 8001a36:	2300      	movne	r3, #0
 8001a38:	b2db      	uxtb	r3, r3
 8001a3a:	461a      	mov	r2, r3
 8001a3c:	e00c      	b.n	8001a58 <I2C_WaitOnFlagUntilTimeout+0x70>
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	699b      	ldr	r3, [r3, #24]
 8001a44:	43da      	mvns	r2, r3
 8001a46:	68bb      	ldr	r3, [r7, #8]
 8001a48:	4013      	ands	r3, r2
 8001a4a:	b29b      	uxth	r3, r3
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	bf0c      	ite	eq
 8001a50:	2301      	moveq	r3, #1
 8001a52:	2300      	movne	r3, #0
 8001a54:	b2db      	uxtb	r3, r3
 8001a56:	461a      	mov	r2, r3
 8001a58:	79fb      	ldrb	r3, [r7, #7]
 8001a5a:	429a      	cmp	r2, r3
 8001a5c:	d116      	bne.n	8001a8c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	2200      	movs	r2, #0
 8001a62:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	2220      	movs	r2, #32
 8001a68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	2200      	movs	r2, #0
 8001a70:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a78:	f043 0220 	orr.w	r2, r3, #32
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	2200      	movs	r2, #0
 8001a84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001a88:	2301      	movs	r3, #1
 8001a8a:	e023      	b.n	8001ad4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001a8c:	68bb      	ldr	r3, [r7, #8]
 8001a8e:	0c1b      	lsrs	r3, r3, #16
 8001a90:	b2db      	uxtb	r3, r3
 8001a92:	2b01      	cmp	r3, #1
 8001a94:	d10d      	bne.n	8001ab2 <I2C_WaitOnFlagUntilTimeout+0xca>
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	695b      	ldr	r3, [r3, #20]
 8001a9c:	43da      	mvns	r2, r3
 8001a9e:	68bb      	ldr	r3, [r7, #8]
 8001aa0:	4013      	ands	r3, r2
 8001aa2:	b29b      	uxth	r3, r3
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	bf0c      	ite	eq
 8001aa8:	2301      	moveq	r3, #1
 8001aaa:	2300      	movne	r3, #0
 8001aac:	b2db      	uxtb	r3, r3
 8001aae:	461a      	mov	r2, r3
 8001ab0:	e00c      	b.n	8001acc <I2C_WaitOnFlagUntilTimeout+0xe4>
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	699b      	ldr	r3, [r3, #24]
 8001ab8:	43da      	mvns	r2, r3
 8001aba:	68bb      	ldr	r3, [r7, #8]
 8001abc:	4013      	ands	r3, r2
 8001abe:	b29b      	uxth	r3, r3
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	bf0c      	ite	eq
 8001ac4:	2301      	moveq	r3, #1
 8001ac6:	2300      	movne	r3, #0
 8001ac8:	b2db      	uxtb	r3, r3
 8001aca:	461a      	mov	r2, r3
 8001acc:	79fb      	ldrb	r3, [r7, #7]
 8001ace:	429a      	cmp	r2, r3
 8001ad0:	d093      	beq.n	80019fa <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001ad2:	2300      	movs	r3, #0
}
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	3710      	adds	r7, #16
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bd80      	pop	{r7, pc}

08001adc <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b084      	sub	sp, #16
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	60f8      	str	r0, [r7, #12]
 8001ae4:	60b9      	str	r1, [r7, #8]
 8001ae6:	607a      	str	r2, [r7, #4]
 8001ae8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001aea:	e071      	b.n	8001bd0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	695b      	ldr	r3, [r3, #20]
 8001af2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001af6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001afa:	d123      	bne.n	8001b44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	681a      	ldr	r2, [r3, #0]
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001b0a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001b14:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	2200      	movs	r2, #0
 8001b1a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	2220      	movs	r2, #32
 8001b20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	2200      	movs	r2, #0
 8001b28:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b30:	f043 0204 	orr.w	r2, r3, #4
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8001b40:	2301      	movs	r3, #1
 8001b42:	e067      	b.n	8001c14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b4a:	d041      	beq.n	8001bd0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b4c:	f7ff f9b2 	bl	8000eb4 <HAL_GetTick>
 8001b50:	4602      	mov	r2, r0
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	1ad3      	subs	r3, r2, r3
 8001b56:	687a      	ldr	r2, [r7, #4]
 8001b58:	429a      	cmp	r2, r3
 8001b5a:	d302      	bcc.n	8001b62 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d136      	bne.n	8001bd0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8001b62:	68bb      	ldr	r3, [r7, #8]
 8001b64:	0c1b      	lsrs	r3, r3, #16
 8001b66:	b2db      	uxtb	r3, r3
 8001b68:	2b01      	cmp	r3, #1
 8001b6a:	d10c      	bne.n	8001b86 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	695b      	ldr	r3, [r3, #20]
 8001b72:	43da      	mvns	r2, r3
 8001b74:	68bb      	ldr	r3, [r7, #8]
 8001b76:	4013      	ands	r3, r2
 8001b78:	b29b      	uxth	r3, r3
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	bf14      	ite	ne
 8001b7e:	2301      	movne	r3, #1
 8001b80:	2300      	moveq	r3, #0
 8001b82:	b2db      	uxtb	r3, r3
 8001b84:	e00b      	b.n	8001b9e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	699b      	ldr	r3, [r3, #24]
 8001b8c:	43da      	mvns	r2, r3
 8001b8e:	68bb      	ldr	r3, [r7, #8]
 8001b90:	4013      	ands	r3, r2
 8001b92:	b29b      	uxth	r3, r3
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	bf14      	ite	ne
 8001b98:	2301      	movne	r3, #1
 8001b9a:	2300      	moveq	r3, #0
 8001b9c:	b2db      	uxtb	r3, r3
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d016      	beq.n	8001bd0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	2220      	movs	r2, #32
 8001bac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bbc:	f043 0220 	orr.w	r2, r3, #32
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001bcc:	2301      	movs	r3, #1
 8001bce:	e021      	b.n	8001c14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001bd0:	68bb      	ldr	r3, [r7, #8]
 8001bd2:	0c1b      	lsrs	r3, r3, #16
 8001bd4:	b2db      	uxtb	r3, r3
 8001bd6:	2b01      	cmp	r3, #1
 8001bd8:	d10c      	bne.n	8001bf4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	695b      	ldr	r3, [r3, #20]
 8001be0:	43da      	mvns	r2, r3
 8001be2:	68bb      	ldr	r3, [r7, #8]
 8001be4:	4013      	ands	r3, r2
 8001be6:	b29b      	uxth	r3, r3
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	bf14      	ite	ne
 8001bec:	2301      	movne	r3, #1
 8001bee:	2300      	moveq	r3, #0
 8001bf0:	b2db      	uxtb	r3, r3
 8001bf2:	e00b      	b.n	8001c0c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	699b      	ldr	r3, [r3, #24]
 8001bfa:	43da      	mvns	r2, r3
 8001bfc:	68bb      	ldr	r3, [r7, #8]
 8001bfe:	4013      	ands	r3, r2
 8001c00:	b29b      	uxth	r3, r3
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	bf14      	ite	ne
 8001c06:	2301      	movne	r3, #1
 8001c08:	2300      	moveq	r3, #0
 8001c0a:	b2db      	uxtb	r3, r3
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	f47f af6d 	bne.w	8001aec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8001c12:	2300      	movs	r3, #0
}
 8001c14:	4618      	mov	r0, r3
 8001c16:	3710      	adds	r7, #16
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bd80      	pop	{r7, pc}

08001c1c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b084      	sub	sp, #16
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	60f8      	str	r0, [r7, #12]
 8001c24:	60b9      	str	r1, [r7, #8]
 8001c26:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001c28:	e034      	b.n	8001c94 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001c2a:	68f8      	ldr	r0, [r7, #12]
 8001c2c:	f000 f886 	bl	8001d3c <I2C_IsAcknowledgeFailed>
 8001c30:	4603      	mov	r3, r0
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d001      	beq.n	8001c3a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001c36:	2301      	movs	r3, #1
 8001c38:	e034      	b.n	8001ca4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001c3a:	68bb      	ldr	r3, [r7, #8]
 8001c3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c40:	d028      	beq.n	8001c94 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c42:	f7ff f937 	bl	8000eb4 <HAL_GetTick>
 8001c46:	4602      	mov	r2, r0
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	1ad3      	subs	r3, r2, r3
 8001c4c:	68ba      	ldr	r2, [r7, #8]
 8001c4e:	429a      	cmp	r2, r3
 8001c50:	d302      	bcc.n	8001c58 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001c52:	68bb      	ldr	r3, [r7, #8]
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d11d      	bne.n	8001c94 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	695b      	ldr	r3, [r3, #20]
 8001c5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c62:	2b80      	cmp	r3, #128	@ 0x80
 8001c64:	d016      	beq.n	8001c94 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	2200      	movs	r2, #0
 8001c6a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	2220      	movs	r2, #32
 8001c70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	2200      	movs	r2, #0
 8001c78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c80:	f043 0220 	orr.w	r2, r3, #32
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001c90:	2301      	movs	r3, #1
 8001c92:	e007      	b.n	8001ca4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	695b      	ldr	r3, [r3, #20]
 8001c9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c9e:	2b80      	cmp	r3, #128	@ 0x80
 8001ca0:	d1c3      	bne.n	8001c2a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001ca2:	2300      	movs	r3, #0
}
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	3710      	adds	r7, #16
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bd80      	pop	{r7, pc}

08001cac <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b084      	sub	sp, #16
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	60f8      	str	r0, [r7, #12]
 8001cb4:	60b9      	str	r1, [r7, #8]
 8001cb6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001cb8:	e034      	b.n	8001d24 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001cba:	68f8      	ldr	r0, [r7, #12]
 8001cbc:	f000 f83e 	bl	8001d3c <I2C_IsAcknowledgeFailed>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d001      	beq.n	8001cca <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	e034      	b.n	8001d34 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001cca:	68bb      	ldr	r3, [r7, #8]
 8001ccc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cd0:	d028      	beq.n	8001d24 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001cd2:	f7ff f8ef 	bl	8000eb4 <HAL_GetTick>
 8001cd6:	4602      	mov	r2, r0
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	1ad3      	subs	r3, r2, r3
 8001cdc:	68ba      	ldr	r2, [r7, #8]
 8001cde:	429a      	cmp	r2, r3
 8001ce0:	d302      	bcc.n	8001ce8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001ce2:	68bb      	ldr	r3, [r7, #8]
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d11d      	bne.n	8001d24 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	695b      	ldr	r3, [r3, #20]
 8001cee:	f003 0304 	and.w	r3, r3, #4
 8001cf2:	2b04      	cmp	r3, #4
 8001cf4:	d016      	beq.n	8001d24 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	2220      	movs	r2, #32
 8001d00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	2200      	movs	r2, #0
 8001d08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d10:	f043 0220 	orr.w	r2, r3, #32
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001d20:	2301      	movs	r3, #1
 8001d22:	e007      	b.n	8001d34 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	695b      	ldr	r3, [r3, #20]
 8001d2a:	f003 0304 	and.w	r3, r3, #4
 8001d2e:	2b04      	cmp	r3, #4
 8001d30:	d1c3      	bne.n	8001cba <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001d32:	2300      	movs	r3, #0
}
 8001d34:	4618      	mov	r0, r3
 8001d36:	3710      	adds	r7, #16
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bd80      	pop	{r7, pc}

08001d3c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	b083      	sub	sp, #12
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	695b      	ldr	r3, [r3, #20]
 8001d4a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d4e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001d52:	d11b      	bne.n	8001d8c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001d5c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	2200      	movs	r2, #0
 8001d62:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2220      	movs	r2, #32
 8001d68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2200      	movs	r2, #0
 8001d70:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d78:	f043 0204 	orr.w	r2, r3, #4
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2200      	movs	r2, #0
 8001d84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8001d88:	2301      	movs	r3, #1
 8001d8a:	e000      	b.n	8001d8e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8001d8c:	2300      	movs	r3, #0
}
 8001d8e:	4618      	mov	r0, r3
 8001d90:	370c      	adds	r7, #12
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bc80      	pop	{r7}
 8001d96:	4770      	bx	lr

08001d98 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b086      	sub	sp, #24
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d101      	bne.n	8001daa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001da6:	2301      	movs	r3, #1
 8001da8:	e272      	b.n	8002290 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f003 0301 	and.w	r3, r3, #1
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	f000 8087 	beq.w	8001ec6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001db8:	4b92      	ldr	r3, [pc, #584]	@ (8002004 <HAL_RCC_OscConfig+0x26c>)
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	f003 030c 	and.w	r3, r3, #12
 8001dc0:	2b04      	cmp	r3, #4
 8001dc2:	d00c      	beq.n	8001dde <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001dc4:	4b8f      	ldr	r3, [pc, #572]	@ (8002004 <HAL_RCC_OscConfig+0x26c>)
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	f003 030c 	and.w	r3, r3, #12
 8001dcc:	2b08      	cmp	r3, #8
 8001dce:	d112      	bne.n	8001df6 <HAL_RCC_OscConfig+0x5e>
 8001dd0:	4b8c      	ldr	r3, [pc, #560]	@ (8002004 <HAL_RCC_OscConfig+0x26c>)
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001dd8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001ddc:	d10b      	bne.n	8001df6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001dde:	4b89      	ldr	r3, [pc, #548]	@ (8002004 <HAL_RCC_OscConfig+0x26c>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d06c      	beq.n	8001ec4 <HAL_RCC_OscConfig+0x12c>
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	685b      	ldr	r3, [r3, #4]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d168      	bne.n	8001ec4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001df2:	2301      	movs	r3, #1
 8001df4:	e24c      	b.n	8002290 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	685b      	ldr	r3, [r3, #4]
 8001dfa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001dfe:	d106      	bne.n	8001e0e <HAL_RCC_OscConfig+0x76>
 8001e00:	4b80      	ldr	r3, [pc, #512]	@ (8002004 <HAL_RCC_OscConfig+0x26c>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4a7f      	ldr	r2, [pc, #508]	@ (8002004 <HAL_RCC_OscConfig+0x26c>)
 8001e06:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e0a:	6013      	str	r3, [r2, #0]
 8001e0c:	e02e      	b.n	8001e6c <HAL_RCC_OscConfig+0xd4>
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	685b      	ldr	r3, [r3, #4]
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d10c      	bne.n	8001e30 <HAL_RCC_OscConfig+0x98>
 8001e16:	4b7b      	ldr	r3, [pc, #492]	@ (8002004 <HAL_RCC_OscConfig+0x26c>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	4a7a      	ldr	r2, [pc, #488]	@ (8002004 <HAL_RCC_OscConfig+0x26c>)
 8001e1c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001e20:	6013      	str	r3, [r2, #0]
 8001e22:	4b78      	ldr	r3, [pc, #480]	@ (8002004 <HAL_RCC_OscConfig+0x26c>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4a77      	ldr	r2, [pc, #476]	@ (8002004 <HAL_RCC_OscConfig+0x26c>)
 8001e28:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001e2c:	6013      	str	r3, [r2, #0]
 8001e2e:	e01d      	b.n	8001e6c <HAL_RCC_OscConfig+0xd4>
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001e38:	d10c      	bne.n	8001e54 <HAL_RCC_OscConfig+0xbc>
 8001e3a:	4b72      	ldr	r3, [pc, #456]	@ (8002004 <HAL_RCC_OscConfig+0x26c>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	4a71      	ldr	r2, [pc, #452]	@ (8002004 <HAL_RCC_OscConfig+0x26c>)
 8001e40:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001e44:	6013      	str	r3, [r2, #0]
 8001e46:	4b6f      	ldr	r3, [pc, #444]	@ (8002004 <HAL_RCC_OscConfig+0x26c>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	4a6e      	ldr	r2, [pc, #440]	@ (8002004 <HAL_RCC_OscConfig+0x26c>)
 8001e4c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e50:	6013      	str	r3, [r2, #0]
 8001e52:	e00b      	b.n	8001e6c <HAL_RCC_OscConfig+0xd4>
 8001e54:	4b6b      	ldr	r3, [pc, #428]	@ (8002004 <HAL_RCC_OscConfig+0x26c>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4a6a      	ldr	r2, [pc, #424]	@ (8002004 <HAL_RCC_OscConfig+0x26c>)
 8001e5a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001e5e:	6013      	str	r3, [r2, #0]
 8001e60:	4b68      	ldr	r3, [pc, #416]	@ (8002004 <HAL_RCC_OscConfig+0x26c>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4a67      	ldr	r2, [pc, #412]	@ (8002004 <HAL_RCC_OscConfig+0x26c>)
 8001e66:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001e6a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d013      	beq.n	8001e9c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e74:	f7ff f81e 	bl	8000eb4 <HAL_GetTick>
 8001e78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e7a:	e008      	b.n	8001e8e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e7c:	f7ff f81a 	bl	8000eb4 <HAL_GetTick>
 8001e80:	4602      	mov	r2, r0
 8001e82:	693b      	ldr	r3, [r7, #16]
 8001e84:	1ad3      	subs	r3, r2, r3
 8001e86:	2b64      	cmp	r3, #100	@ 0x64
 8001e88:	d901      	bls.n	8001e8e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001e8a:	2303      	movs	r3, #3
 8001e8c:	e200      	b.n	8002290 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e8e:	4b5d      	ldr	r3, [pc, #372]	@ (8002004 <HAL_RCC_OscConfig+0x26c>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d0f0      	beq.n	8001e7c <HAL_RCC_OscConfig+0xe4>
 8001e9a:	e014      	b.n	8001ec6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e9c:	f7ff f80a 	bl	8000eb4 <HAL_GetTick>
 8001ea0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ea2:	e008      	b.n	8001eb6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ea4:	f7ff f806 	bl	8000eb4 <HAL_GetTick>
 8001ea8:	4602      	mov	r2, r0
 8001eaa:	693b      	ldr	r3, [r7, #16]
 8001eac:	1ad3      	subs	r3, r2, r3
 8001eae:	2b64      	cmp	r3, #100	@ 0x64
 8001eb0:	d901      	bls.n	8001eb6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001eb2:	2303      	movs	r3, #3
 8001eb4:	e1ec      	b.n	8002290 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001eb6:	4b53      	ldr	r3, [pc, #332]	@ (8002004 <HAL_RCC_OscConfig+0x26c>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d1f0      	bne.n	8001ea4 <HAL_RCC_OscConfig+0x10c>
 8001ec2:	e000      	b.n	8001ec6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ec4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f003 0302 	and.w	r3, r3, #2
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d063      	beq.n	8001f9a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001ed2:	4b4c      	ldr	r3, [pc, #304]	@ (8002004 <HAL_RCC_OscConfig+0x26c>)
 8001ed4:	685b      	ldr	r3, [r3, #4]
 8001ed6:	f003 030c 	and.w	r3, r3, #12
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d00b      	beq.n	8001ef6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001ede:	4b49      	ldr	r3, [pc, #292]	@ (8002004 <HAL_RCC_OscConfig+0x26c>)
 8001ee0:	685b      	ldr	r3, [r3, #4]
 8001ee2:	f003 030c 	and.w	r3, r3, #12
 8001ee6:	2b08      	cmp	r3, #8
 8001ee8:	d11c      	bne.n	8001f24 <HAL_RCC_OscConfig+0x18c>
 8001eea:	4b46      	ldr	r3, [pc, #280]	@ (8002004 <HAL_RCC_OscConfig+0x26c>)
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d116      	bne.n	8001f24 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ef6:	4b43      	ldr	r3, [pc, #268]	@ (8002004 <HAL_RCC_OscConfig+0x26c>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f003 0302 	and.w	r3, r3, #2
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d005      	beq.n	8001f0e <HAL_RCC_OscConfig+0x176>
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	691b      	ldr	r3, [r3, #16]
 8001f06:	2b01      	cmp	r3, #1
 8001f08:	d001      	beq.n	8001f0e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	e1c0      	b.n	8002290 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f0e:	4b3d      	ldr	r3, [pc, #244]	@ (8002004 <HAL_RCC_OscConfig+0x26c>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	695b      	ldr	r3, [r3, #20]
 8001f1a:	00db      	lsls	r3, r3, #3
 8001f1c:	4939      	ldr	r1, [pc, #228]	@ (8002004 <HAL_RCC_OscConfig+0x26c>)
 8001f1e:	4313      	orrs	r3, r2
 8001f20:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f22:	e03a      	b.n	8001f9a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	691b      	ldr	r3, [r3, #16]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d020      	beq.n	8001f6e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f2c:	4b36      	ldr	r3, [pc, #216]	@ (8002008 <HAL_RCC_OscConfig+0x270>)
 8001f2e:	2201      	movs	r2, #1
 8001f30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f32:	f7fe ffbf 	bl	8000eb4 <HAL_GetTick>
 8001f36:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f38:	e008      	b.n	8001f4c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f3a:	f7fe ffbb 	bl	8000eb4 <HAL_GetTick>
 8001f3e:	4602      	mov	r2, r0
 8001f40:	693b      	ldr	r3, [r7, #16]
 8001f42:	1ad3      	subs	r3, r2, r3
 8001f44:	2b02      	cmp	r3, #2
 8001f46:	d901      	bls.n	8001f4c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001f48:	2303      	movs	r3, #3
 8001f4a:	e1a1      	b.n	8002290 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f4c:	4b2d      	ldr	r3, [pc, #180]	@ (8002004 <HAL_RCC_OscConfig+0x26c>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f003 0302 	and.w	r3, r3, #2
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d0f0      	beq.n	8001f3a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f58:	4b2a      	ldr	r3, [pc, #168]	@ (8002004 <HAL_RCC_OscConfig+0x26c>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	695b      	ldr	r3, [r3, #20]
 8001f64:	00db      	lsls	r3, r3, #3
 8001f66:	4927      	ldr	r1, [pc, #156]	@ (8002004 <HAL_RCC_OscConfig+0x26c>)
 8001f68:	4313      	orrs	r3, r2
 8001f6a:	600b      	str	r3, [r1, #0]
 8001f6c:	e015      	b.n	8001f9a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f6e:	4b26      	ldr	r3, [pc, #152]	@ (8002008 <HAL_RCC_OscConfig+0x270>)
 8001f70:	2200      	movs	r2, #0
 8001f72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f74:	f7fe ff9e 	bl	8000eb4 <HAL_GetTick>
 8001f78:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f7a:	e008      	b.n	8001f8e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f7c:	f7fe ff9a 	bl	8000eb4 <HAL_GetTick>
 8001f80:	4602      	mov	r2, r0
 8001f82:	693b      	ldr	r3, [r7, #16]
 8001f84:	1ad3      	subs	r3, r2, r3
 8001f86:	2b02      	cmp	r3, #2
 8001f88:	d901      	bls.n	8001f8e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001f8a:	2303      	movs	r3, #3
 8001f8c:	e180      	b.n	8002290 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f8e:	4b1d      	ldr	r3, [pc, #116]	@ (8002004 <HAL_RCC_OscConfig+0x26c>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f003 0302 	and.w	r3, r3, #2
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d1f0      	bne.n	8001f7c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f003 0308 	and.w	r3, r3, #8
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d03a      	beq.n	800201c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	699b      	ldr	r3, [r3, #24]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d019      	beq.n	8001fe2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001fae:	4b17      	ldr	r3, [pc, #92]	@ (800200c <HAL_RCC_OscConfig+0x274>)
 8001fb0:	2201      	movs	r2, #1
 8001fb2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fb4:	f7fe ff7e 	bl	8000eb4 <HAL_GetTick>
 8001fb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fba:	e008      	b.n	8001fce <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001fbc:	f7fe ff7a 	bl	8000eb4 <HAL_GetTick>
 8001fc0:	4602      	mov	r2, r0
 8001fc2:	693b      	ldr	r3, [r7, #16]
 8001fc4:	1ad3      	subs	r3, r2, r3
 8001fc6:	2b02      	cmp	r3, #2
 8001fc8:	d901      	bls.n	8001fce <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001fca:	2303      	movs	r3, #3
 8001fcc:	e160      	b.n	8002290 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fce:	4b0d      	ldr	r3, [pc, #52]	@ (8002004 <HAL_RCC_OscConfig+0x26c>)
 8001fd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fd2:	f003 0302 	and.w	r3, r3, #2
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d0f0      	beq.n	8001fbc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001fda:	2001      	movs	r0, #1
 8001fdc:	f000 faba 	bl	8002554 <RCC_Delay>
 8001fe0:	e01c      	b.n	800201c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001fe2:	4b0a      	ldr	r3, [pc, #40]	@ (800200c <HAL_RCC_OscConfig+0x274>)
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fe8:	f7fe ff64 	bl	8000eb4 <HAL_GetTick>
 8001fec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fee:	e00f      	b.n	8002010 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ff0:	f7fe ff60 	bl	8000eb4 <HAL_GetTick>
 8001ff4:	4602      	mov	r2, r0
 8001ff6:	693b      	ldr	r3, [r7, #16]
 8001ff8:	1ad3      	subs	r3, r2, r3
 8001ffa:	2b02      	cmp	r3, #2
 8001ffc:	d908      	bls.n	8002010 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001ffe:	2303      	movs	r3, #3
 8002000:	e146      	b.n	8002290 <HAL_RCC_OscConfig+0x4f8>
 8002002:	bf00      	nop
 8002004:	40021000 	.word	0x40021000
 8002008:	42420000 	.word	0x42420000
 800200c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002010:	4b92      	ldr	r3, [pc, #584]	@ (800225c <HAL_RCC_OscConfig+0x4c4>)
 8002012:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002014:	f003 0302 	and.w	r3, r3, #2
 8002018:	2b00      	cmp	r3, #0
 800201a:	d1e9      	bne.n	8001ff0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f003 0304 	and.w	r3, r3, #4
 8002024:	2b00      	cmp	r3, #0
 8002026:	f000 80a6 	beq.w	8002176 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800202a:	2300      	movs	r3, #0
 800202c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800202e:	4b8b      	ldr	r3, [pc, #556]	@ (800225c <HAL_RCC_OscConfig+0x4c4>)
 8002030:	69db      	ldr	r3, [r3, #28]
 8002032:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002036:	2b00      	cmp	r3, #0
 8002038:	d10d      	bne.n	8002056 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800203a:	4b88      	ldr	r3, [pc, #544]	@ (800225c <HAL_RCC_OscConfig+0x4c4>)
 800203c:	69db      	ldr	r3, [r3, #28]
 800203e:	4a87      	ldr	r2, [pc, #540]	@ (800225c <HAL_RCC_OscConfig+0x4c4>)
 8002040:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002044:	61d3      	str	r3, [r2, #28]
 8002046:	4b85      	ldr	r3, [pc, #532]	@ (800225c <HAL_RCC_OscConfig+0x4c4>)
 8002048:	69db      	ldr	r3, [r3, #28]
 800204a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800204e:	60bb      	str	r3, [r7, #8]
 8002050:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002052:	2301      	movs	r3, #1
 8002054:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002056:	4b82      	ldr	r3, [pc, #520]	@ (8002260 <HAL_RCC_OscConfig+0x4c8>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800205e:	2b00      	cmp	r3, #0
 8002060:	d118      	bne.n	8002094 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002062:	4b7f      	ldr	r3, [pc, #508]	@ (8002260 <HAL_RCC_OscConfig+0x4c8>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	4a7e      	ldr	r2, [pc, #504]	@ (8002260 <HAL_RCC_OscConfig+0x4c8>)
 8002068:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800206c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800206e:	f7fe ff21 	bl	8000eb4 <HAL_GetTick>
 8002072:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002074:	e008      	b.n	8002088 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002076:	f7fe ff1d 	bl	8000eb4 <HAL_GetTick>
 800207a:	4602      	mov	r2, r0
 800207c:	693b      	ldr	r3, [r7, #16]
 800207e:	1ad3      	subs	r3, r2, r3
 8002080:	2b64      	cmp	r3, #100	@ 0x64
 8002082:	d901      	bls.n	8002088 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002084:	2303      	movs	r3, #3
 8002086:	e103      	b.n	8002290 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002088:	4b75      	ldr	r3, [pc, #468]	@ (8002260 <HAL_RCC_OscConfig+0x4c8>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002090:	2b00      	cmp	r3, #0
 8002092:	d0f0      	beq.n	8002076 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	68db      	ldr	r3, [r3, #12]
 8002098:	2b01      	cmp	r3, #1
 800209a:	d106      	bne.n	80020aa <HAL_RCC_OscConfig+0x312>
 800209c:	4b6f      	ldr	r3, [pc, #444]	@ (800225c <HAL_RCC_OscConfig+0x4c4>)
 800209e:	6a1b      	ldr	r3, [r3, #32]
 80020a0:	4a6e      	ldr	r2, [pc, #440]	@ (800225c <HAL_RCC_OscConfig+0x4c4>)
 80020a2:	f043 0301 	orr.w	r3, r3, #1
 80020a6:	6213      	str	r3, [r2, #32]
 80020a8:	e02d      	b.n	8002106 <HAL_RCC_OscConfig+0x36e>
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	68db      	ldr	r3, [r3, #12]
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d10c      	bne.n	80020cc <HAL_RCC_OscConfig+0x334>
 80020b2:	4b6a      	ldr	r3, [pc, #424]	@ (800225c <HAL_RCC_OscConfig+0x4c4>)
 80020b4:	6a1b      	ldr	r3, [r3, #32]
 80020b6:	4a69      	ldr	r2, [pc, #420]	@ (800225c <HAL_RCC_OscConfig+0x4c4>)
 80020b8:	f023 0301 	bic.w	r3, r3, #1
 80020bc:	6213      	str	r3, [r2, #32]
 80020be:	4b67      	ldr	r3, [pc, #412]	@ (800225c <HAL_RCC_OscConfig+0x4c4>)
 80020c0:	6a1b      	ldr	r3, [r3, #32]
 80020c2:	4a66      	ldr	r2, [pc, #408]	@ (800225c <HAL_RCC_OscConfig+0x4c4>)
 80020c4:	f023 0304 	bic.w	r3, r3, #4
 80020c8:	6213      	str	r3, [r2, #32]
 80020ca:	e01c      	b.n	8002106 <HAL_RCC_OscConfig+0x36e>
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	68db      	ldr	r3, [r3, #12]
 80020d0:	2b05      	cmp	r3, #5
 80020d2:	d10c      	bne.n	80020ee <HAL_RCC_OscConfig+0x356>
 80020d4:	4b61      	ldr	r3, [pc, #388]	@ (800225c <HAL_RCC_OscConfig+0x4c4>)
 80020d6:	6a1b      	ldr	r3, [r3, #32]
 80020d8:	4a60      	ldr	r2, [pc, #384]	@ (800225c <HAL_RCC_OscConfig+0x4c4>)
 80020da:	f043 0304 	orr.w	r3, r3, #4
 80020de:	6213      	str	r3, [r2, #32]
 80020e0:	4b5e      	ldr	r3, [pc, #376]	@ (800225c <HAL_RCC_OscConfig+0x4c4>)
 80020e2:	6a1b      	ldr	r3, [r3, #32]
 80020e4:	4a5d      	ldr	r2, [pc, #372]	@ (800225c <HAL_RCC_OscConfig+0x4c4>)
 80020e6:	f043 0301 	orr.w	r3, r3, #1
 80020ea:	6213      	str	r3, [r2, #32]
 80020ec:	e00b      	b.n	8002106 <HAL_RCC_OscConfig+0x36e>
 80020ee:	4b5b      	ldr	r3, [pc, #364]	@ (800225c <HAL_RCC_OscConfig+0x4c4>)
 80020f0:	6a1b      	ldr	r3, [r3, #32]
 80020f2:	4a5a      	ldr	r2, [pc, #360]	@ (800225c <HAL_RCC_OscConfig+0x4c4>)
 80020f4:	f023 0301 	bic.w	r3, r3, #1
 80020f8:	6213      	str	r3, [r2, #32]
 80020fa:	4b58      	ldr	r3, [pc, #352]	@ (800225c <HAL_RCC_OscConfig+0x4c4>)
 80020fc:	6a1b      	ldr	r3, [r3, #32]
 80020fe:	4a57      	ldr	r2, [pc, #348]	@ (800225c <HAL_RCC_OscConfig+0x4c4>)
 8002100:	f023 0304 	bic.w	r3, r3, #4
 8002104:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	68db      	ldr	r3, [r3, #12]
 800210a:	2b00      	cmp	r3, #0
 800210c:	d015      	beq.n	800213a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800210e:	f7fe fed1 	bl	8000eb4 <HAL_GetTick>
 8002112:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002114:	e00a      	b.n	800212c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002116:	f7fe fecd 	bl	8000eb4 <HAL_GetTick>
 800211a:	4602      	mov	r2, r0
 800211c:	693b      	ldr	r3, [r7, #16]
 800211e:	1ad3      	subs	r3, r2, r3
 8002120:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002124:	4293      	cmp	r3, r2
 8002126:	d901      	bls.n	800212c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002128:	2303      	movs	r3, #3
 800212a:	e0b1      	b.n	8002290 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800212c:	4b4b      	ldr	r3, [pc, #300]	@ (800225c <HAL_RCC_OscConfig+0x4c4>)
 800212e:	6a1b      	ldr	r3, [r3, #32]
 8002130:	f003 0302 	and.w	r3, r3, #2
 8002134:	2b00      	cmp	r3, #0
 8002136:	d0ee      	beq.n	8002116 <HAL_RCC_OscConfig+0x37e>
 8002138:	e014      	b.n	8002164 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800213a:	f7fe febb 	bl	8000eb4 <HAL_GetTick>
 800213e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002140:	e00a      	b.n	8002158 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002142:	f7fe feb7 	bl	8000eb4 <HAL_GetTick>
 8002146:	4602      	mov	r2, r0
 8002148:	693b      	ldr	r3, [r7, #16]
 800214a:	1ad3      	subs	r3, r2, r3
 800214c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002150:	4293      	cmp	r3, r2
 8002152:	d901      	bls.n	8002158 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002154:	2303      	movs	r3, #3
 8002156:	e09b      	b.n	8002290 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002158:	4b40      	ldr	r3, [pc, #256]	@ (800225c <HAL_RCC_OscConfig+0x4c4>)
 800215a:	6a1b      	ldr	r3, [r3, #32]
 800215c:	f003 0302 	and.w	r3, r3, #2
 8002160:	2b00      	cmp	r3, #0
 8002162:	d1ee      	bne.n	8002142 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002164:	7dfb      	ldrb	r3, [r7, #23]
 8002166:	2b01      	cmp	r3, #1
 8002168:	d105      	bne.n	8002176 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800216a:	4b3c      	ldr	r3, [pc, #240]	@ (800225c <HAL_RCC_OscConfig+0x4c4>)
 800216c:	69db      	ldr	r3, [r3, #28]
 800216e:	4a3b      	ldr	r2, [pc, #236]	@ (800225c <HAL_RCC_OscConfig+0x4c4>)
 8002170:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002174:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	69db      	ldr	r3, [r3, #28]
 800217a:	2b00      	cmp	r3, #0
 800217c:	f000 8087 	beq.w	800228e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002180:	4b36      	ldr	r3, [pc, #216]	@ (800225c <HAL_RCC_OscConfig+0x4c4>)
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	f003 030c 	and.w	r3, r3, #12
 8002188:	2b08      	cmp	r3, #8
 800218a:	d061      	beq.n	8002250 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	69db      	ldr	r3, [r3, #28]
 8002190:	2b02      	cmp	r3, #2
 8002192:	d146      	bne.n	8002222 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002194:	4b33      	ldr	r3, [pc, #204]	@ (8002264 <HAL_RCC_OscConfig+0x4cc>)
 8002196:	2200      	movs	r2, #0
 8002198:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800219a:	f7fe fe8b 	bl	8000eb4 <HAL_GetTick>
 800219e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021a0:	e008      	b.n	80021b4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021a2:	f7fe fe87 	bl	8000eb4 <HAL_GetTick>
 80021a6:	4602      	mov	r2, r0
 80021a8:	693b      	ldr	r3, [r7, #16]
 80021aa:	1ad3      	subs	r3, r2, r3
 80021ac:	2b02      	cmp	r3, #2
 80021ae:	d901      	bls.n	80021b4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80021b0:	2303      	movs	r3, #3
 80021b2:	e06d      	b.n	8002290 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021b4:	4b29      	ldr	r3, [pc, #164]	@ (800225c <HAL_RCC_OscConfig+0x4c4>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d1f0      	bne.n	80021a2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6a1b      	ldr	r3, [r3, #32]
 80021c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80021c8:	d108      	bne.n	80021dc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80021ca:	4b24      	ldr	r3, [pc, #144]	@ (800225c <HAL_RCC_OscConfig+0x4c4>)
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	689b      	ldr	r3, [r3, #8]
 80021d6:	4921      	ldr	r1, [pc, #132]	@ (800225c <HAL_RCC_OscConfig+0x4c4>)
 80021d8:	4313      	orrs	r3, r2
 80021da:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80021dc:	4b1f      	ldr	r3, [pc, #124]	@ (800225c <HAL_RCC_OscConfig+0x4c4>)
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6a19      	ldr	r1, [r3, #32]
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021ec:	430b      	orrs	r3, r1
 80021ee:	491b      	ldr	r1, [pc, #108]	@ (800225c <HAL_RCC_OscConfig+0x4c4>)
 80021f0:	4313      	orrs	r3, r2
 80021f2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80021f4:	4b1b      	ldr	r3, [pc, #108]	@ (8002264 <HAL_RCC_OscConfig+0x4cc>)
 80021f6:	2201      	movs	r2, #1
 80021f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021fa:	f7fe fe5b 	bl	8000eb4 <HAL_GetTick>
 80021fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002200:	e008      	b.n	8002214 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002202:	f7fe fe57 	bl	8000eb4 <HAL_GetTick>
 8002206:	4602      	mov	r2, r0
 8002208:	693b      	ldr	r3, [r7, #16]
 800220a:	1ad3      	subs	r3, r2, r3
 800220c:	2b02      	cmp	r3, #2
 800220e:	d901      	bls.n	8002214 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002210:	2303      	movs	r3, #3
 8002212:	e03d      	b.n	8002290 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002214:	4b11      	ldr	r3, [pc, #68]	@ (800225c <HAL_RCC_OscConfig+0x4c4>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800221c:	2b00      	cmp	r3, #0
 800221e:	d0f0      	beq.n	8002202 <HAL_RCC_OscConfig+0x46a>
 8002220:	e035      	b.n	800228e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002222:	4b10      	ldr	r3, [pc, #64]	@ (8002264 <HAL_RCC_OscConfig+0x4cc>)
 8002224:	2200      	movs	r2, #0
 8002226:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002228:	f7fe fe44 	bl	8000eb4 <HAL_GetTick>
 800222c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800222e:	e008      	b.n	8002242 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002230:	f7fe fe40 	bl	8000eb4 <HAL_GetTick>
 8002234:	4602      	mov	r2, r0
 8002236:	693b      	ldr	r3, [r7, #16]
 8002238:	1ad3      	subs	r3, r2, r3
 800223a:	2b02      	cmp	r3, #2
 800223c:	d901      	bls.n	8002242 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800223e:	2303      	movs	r3, #3
 8002240:	e026      	b.n	8002290 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002242:	4b06      	ldr	r3, [pc, #24]	@ (800225c <HAL_RCC_OscConfig+0x4c4>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800224a:	2b00      	cmp	r3, #0
 800224c:	d1f0      	bne.n	8002230 <HAL_RCC_OscConfig+0x498>
 800224e:	e01e      	b.n	800228e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	69db      	ldr	r3, [r3, #28]
 8002254:	2b01      	cmp	r3, #1
 8002256:	d107      	bne.n	8002268 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002258:	2301      	movs	r3, #1
 800225a:	e019      	b.n	8002290 <HAL_RCC_OscConfig+0x4f8>
 800225c:	40021000 	.word	0x40021000
 8002260:	40007000 	.word	0x40007000
 8002264:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002268:	4b0b      	ldr	r3, [pc, #44]	@ (8002298 <HAL_RCC_OscConfig+0x500>)
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6a1b      	ldr	r3, [r3, #32]
 8002278:	429a      	cmp	r2, r3
 800227a:	d106      	bne.n	800228a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002286:	429a      	cmp	r2, r3
 8002288:	d001      	beq.n	800228e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800228a:	2301      	movs	r3, #1
 800228c:	e000      	b.n	8002290 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800228e:	2300      	movs	r3, #0
}
 8002290:	4618      	mov	r0, r3
 8002292:	3718      	adds	r7, #24
 8002294:	46bd      	mov	sp, r7
 8002296:	bd80      	pop	{r7, pc}
 8002298:	40021000 	.word	0x40021000

0800229c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b084      	sub	sp, #16
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
 80022a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d101      	bne.n	80022b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80022ac:	2301      	movs	r3, #1
 80022ae:	e0d0      	b.n	8002452 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80022b0:	4b6a      	ldr	r3, [pc, #424]	@ (800245c <HAL_RCC_ClockConfig+0x1c0>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f003 0307 	and.w	r3, r3, #7
 80022b8:	683a      	ldr	r2, [r7, #0]
 80022ba:	429a      	cmp	r2, r3
 80022bc:	d910      	bls.n	80022e0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022be:	4b67      	ldr	r3, [pc, #412]	@ (800245c <HAL_RCC_ClockConfig+0x1c0>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f023 0207 	bic.w	r2, r3, #7
 80022c6:	4965      	ldr	r1, [pc, #404]	@ (800245c <HAL_RCC_ClockConfig+0x1c0>)
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	4313      	orrs	r3, r2
 80022cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022ce:	4b63      	ldr	r3, [pc, #396]	@ (800245c <HAL_RCC_ClockConfig+0x1c0>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f003 0307 	and.w	r3, r3, #7
 80022d6:	683a      	ldr	r2, [r7, #0]
 80022d8:	429a      	cmp	r2, r3
 80022da:	d001      	beq.n	80022e0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80022dc:	2301      	movs	r3, #1
 80022de:	e0b8      	b.n	8002452 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f003 0302 	and.w	r3, r3, #2
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d020      	beq.n	800232e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f003 0304 	and.w	r3, r3, #4
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d005      	beq.n	8002304 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80022f8:	4b59      	ldr	r3, [pc, #356]	@ (8002460 <HAL_RCC_ClockConfig+0x1c4>)
 80022fa:	685b      	ldr	r3, [r3, #4]
 80022fc:	4a58      	ldr	r2, [pc, #352]	@ (8002460 <HAL_RCC_ClockConfig+0x1c4>)
 80022fe:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002302:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f003 0308 	and.w	r3, r3, #8
 800230c:	2b00      	cmp	r3, #0
 800230e:	d005      	beq.n	800231c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002310:	4b53      	ldr	r3, [pc, #332]	@ (8002460 <HAL_RCC_ClockConfig+0x1c4>)
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	4a52      	ldr	r2, [pc, #328]	@ (8002460 <HAL_RCC_ClockConfig+0x1c4>)
 8002316:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800231a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800231c:	4b50      	ldr	r3, [pc, #320]	@ (8002460 <HAL_RCC_ClockConfig+0x1c4>)
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	689b      	ldr	r3, [r3, #8]
 8002328:	494d      	ldr	r1, [pc, #308]	@ (8002460 <HAL_RCC_ClockConfig+0x1c4>)
 800232a:	4313      	orrs	r3, r2
 800232c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f003 0301 	and.w	r3, r3, #1
 8002336:	2b00      	cmp	r3, #0
 8002338:	d040      	beq.n	80023bc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	685b      	ldr	r3, [r3, #4]
 800233e:	2b01      	cmp	r3, #1
 8002340:	d107      	bne.n	8002352 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002342:	4b47      	ldr	r3, [pc, #284]	@ (8002460 <HAL_RCC_ClockConfig+0x1c4>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800234a:	2b00      	cmp	r3, #0
 800234c:	d115      	bne.n	800237a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800234e:	2301      	movs	r3, #1
 8002350:	e07f      	b.n	8002452 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	685b      	ldr	r3, [r3, #4]
 8002356:	2b02      	cmp	r3, #2
 8002358:	d107      	bne.n	800236a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800235a:	4b41      	ldr	r3, [pc, #260]	@ (8002460 <HAL_RCC_ClockConfig+0x1c4>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002362:	2b00      	cmp	r3, #0
 8002364:	d109      	bne.n	800237a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002366:	2301      	movs	r3, #1
 8002368:	e073      	b.n	8002452 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800236a:	4b3d      	ldr	r3, [pc, #244]	@ (8002460 <HAL_RCC_ClockConfig+0x1c4>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f003 0302 	and.w	r3, r3, #2
 8002372:	2b00      	cmp	r3, #0
 8002374:	d101      	bne.n	800237a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002376:	2301      	movs	r3, #1
 8002378:	e06b      	b.n	8002452 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800237a:	4b39      	ldr	r3, [pc, #228]	@ (8002460 <HAL_RCC_ClockConfig+0x1c4>)
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	f023 0203 	bic.w	r2, r3, #3
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	685b      	ldr	r3, [r3, #4]
 8002386:	4936      	ldr	r1, [pc, #216]	@ (8002460 <HAL_RCC_ClockConfig+0x1c4>)
 8002388:	4313      	orrs	r3, r2
 800238a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800238c:	f7fe fd92 	bl	8000eb4 <HAL_GetTick>
 8002390:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002392:	e00a      	b.n	80023aa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002394:	f7fe fd8e 	bl	8000eb4 <HAL_GetTick>
 8002398:	4602      	mov	r2, r0
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	1ad3      	subs	r3, r2, r3
 800239e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d901      	bls.n	80023aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80023a6:	2303      	movs	r3, #3
 80023a8:	e053      	b.n	8002452 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023aa:	4b2d      	ldr	r3, [pc, #180]	@ (8002460 <HAL_RCC_ClockConfig+0x1c4>)
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	f003 020c 	and.w	r2, r3, #12
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	009b      	lsls	r3, r3, #2
 80023b8:	429a      	cmp	r2, r3
 80023ba:	d1eb      	bne.n	8002394 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80023bc:	4b27      	ldr	r3, [pc, #156]	@ (800245c <HAL_RCC_ClockConfig+0x1c0>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f003 0307 	and.w	r3, r3, #7
 80023c4:	683a      	ldr	r2, [r7, #0]
 80023c6:	429a      	cmp	r2, r3
 80023c8:	d210      	bcs.n	80023ec <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023ca:	4b24      	ldr	r3, [pc, #144]	@ (800245c <HAL_RCC_ClockConfig+0x1c0>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f023 0207 	bic.w	r2, r3, #7
 80023d2:	4922      	ldr	r1, [pc, #136]	@ (800245c <HAL_RCC_ClockConfig+0x1c0>)
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	4313      	orrs	r3, r2
 80023d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023da:	4b20      	ldr	r3, [pc, #128]	@ (800245c <HAL_RCC_ClockConfig+0x1c0>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f003 0307 	and.w	r3, r3, #7
 80023e2:	683a      	ldr	r2, [r7, #0]
 80023e4:	429a      	cmp	r2, r3
 80023e6:	d001      	beq.n	80023ec <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80023e8:	2301      	movs	r3, #1
 80023ea:	e032      	b.n	8002452 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f003 0304 	and.w	r3, r3, #4
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d008      	beq.n	800240a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80023f8:	4b19      	ldr	r3, [pc, #100]	@ (8002460 <HAL_RCC_ClockConfig+0x1c4>)
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	68db      	ldr	r3, [r3, #12]
 8002404:	4916      	ldr	r1, [pc, #88]	@ (8002460 <HAL_RCC_ClockConfig+0x1c4>)
 8002406:	4313      	orrs	r3, r2
 8002408:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f003 0308 	and.w	r3, r3, #8
 8002412:	2b00      	cmp	r3, #0
 8002414:	d009      	beq.n	800242a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002416:	4b12      	ldr	r3, [pc, #72]	@ (8002460 <HAL_RCC_ClockConfig+0x1c4>)
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	691b      	ldr	r3, [r3, #16]
 8002422:	00db      	lsls	r3, r3, #3
 8002424:	490e      	ldr	r1, [pc, #56]	@ (8002460 <HAL_RCC_ClockConfig+0x1c4>)
 8002426:	4313      	orrs	r3, r2
 8002428:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800242a:	f000 f821 	bl	8002470 <HAL_RCC_GetSysClockFreq>
 800242e:	4602      	mov	r2, r0
 8002430:	4b0b      	ldr	r3, [pc, #44]	@ (8002460 <HAL_RCC_ClockConfig+0x1c4>)
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	091b      	lsrs	r3, r3, #4
 8002436:	f003 030f 	and.w	r3, r3, #15
 800243a:	490a      	ldr	r1, [pc, #40]	@ (8002464 <HAL_RCC_ClockConfig+0x1c8>)
 800243c:	5ccb      	ldrb	r3, [r1, r3]
 800243e:	fa22 f303 	lsr.w	r3, r2, r3
 8002442:	4a09      	ldr	r2, [pc, #36]	@ (8002468 <HAL_RCC_ClockConfig+0x1cc>)
 8002444:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002446:	4b09      	ldr	r3, [pc, #36]	@ (800246c <HAL_RCC_ClockConfig+0x1d0>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	4618      	mov	r0, r3
 800244c:	f7fe fcf0 	bl	8000e30 <HAL_InitTick>

  return HAL_OK;
 8002450:	2300      	movs	r3, #0
}
 8002452:	4618      	mov	r0, r3
 8002454:	3710      	adds	r7, #16
 8002456:	46bd      	mov	sp, r7
 8002458:	bd80      	pop	{r7, pc}
 800245a:	bf00      	nop
 800245c:	40022000 	.word	0x40022000
 8002460:	40021000 	.word	0x40021000
 8002464:	08003c40 	.word	0x08003c40
 8002468:	20000000 	.word	0x20000000
 800246c:	20000004 	.word	0x20000004

08002470 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002470:	b480      	push	{r7}
 8002472:	b087      	sub	sp, #28
 8002474:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002476:	2300      	movs	r3, #0
 8002478:	60fb      	str	r3, [r7, #12]
 800247a:	2300      	movs	r3, #0
 800247c:	60bb      	str	r3, [r7, #8]
 800247e:	2300      	movs	r3, #0
 8002480:	617b      	str	r3, [r7, #20]
 8002482:	2300      	movs	r3, #0
 8002484:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002486:	2300      	movs	r3, #0
 8002488:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800248a:	4b1e      	ldr	r3, [pc, #120]	@ (8002504 <HAL_RCC_GetSysClockFreq+0x94>)
 800248c:	685b      	ldr	r3, [r3, #4]
 800248e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	f003 030c 	and.w	r3, r3, #12
 8002496:	2b04      	cmp	r3, #4
 8002498:	d002      	beq.n	80024a0 <HAL_RCC_GetSysClockFreq+0x30>
 800249a:	2b08      	cmp	r3, #8
 800249c:	d003      	beq.n	80024a6 <HAL_RCC_GetSysClockFreq+0x36>
 800249e:	e027      	b.n	80024f0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80024a0:	4b19      	ldr	r3, [pc, #100]	@ (8002508 <HAL_RCC_GetSysClockFreq+0x98>)
 80024a2:	613b      	str	r3, [r7, #16]
      break;
 80024a4:	e027      	b.n	80024f6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	0c9b      	lsrs	r3, r3, #18
 80024aa:	f003 030f 	and.w	r3, r3, #15
 80024ae:	4a17      	ldr	r2, [pc, #92]	@ (800250c <HAL_RCC_GetSysClockFreq+0x9c>)
 80024b0:	5cd3      	ldrb	r3, [r2, r3]
 80024b2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d010      	beq.n	80024e0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80024be:	4b11      	ldr	r3, [pc, #68]	@ (8002504 <HAL_RCC_GetSysClockFreq+0x94>)
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	0c5b      	lsrs	r3, r3, #17
 80024c4:	f003 0301 	and.w	r3, r3, #1
 80024c8:	4a11      	ldr	r2, [pc, #68]	@ (8002510 <HAL_RCC_GetSysClockFreq+0xa0>)
 80024ca:	5cd3      	ldrb	r3, [r2, r3]
 80024cc:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	4a0d      	ldr	r2, [pc, #52]	@ (8002508 <HAL_RCC_GetSysClockFreq+0x98>)
 80024d2:	fb03 f202 	mul.w	r2, r3, r2
 80024d6:	68bb      	ldr	r3, [r7, #8]
 80024d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80024dc:	617b      	str	r3, [r7, #20]
 80024de:	e004      	b.n	80024ea <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	4a0c      	ldr	r2, [pc, #48]	@ (8002514 <HAL_RCC_GetSysClockFreq+0xa4>)
 80024e4:	fb02 f303 	mul.w	r3, r2, r3
 80024e8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80024ea:	697b      	ldr	r3, [r7, #20]
 80024ec:	613b      	str	r3, [r7, #16]
      break;
 80024ee:	e002      	b.n	80024f6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80024f0:	4b05      	ldr	r3, [pc, #20]	@ (8002508 <HAL_RCC_GetSysClockFreq+0x98>)
 80024f2:	613b      	str	r3, [r7, #16]
      break;
 80024f4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80024f6:	693b      	ldr	r3, [r7, #16]
}
 80024f8:	4618      	mov	r0, r3
 80024fa:	371c      	adds	r7, #28
 80024fc:	46bd      	mov	sp, r7
 80024fe:	bc80      	pop	{r7}
 8002500:	4770      	bx	lr
 8002502:	bf00      	nop
 8002504:	40021000 	.word	0x40021000
 8002508:	007a1200 	.word	0x007a1200
 800250c:	08003c58 	.word	0x08003c58
 8002510:	08003c68 	.word	0x08003c68
 8002514:	003d0900 	.word	0x003d0900

08002518 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002518:	b480      	push	{r7}
 800251a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800251c:	4b02      	ldr	r3, [pc, #8]	@ (8002528 <HAL_RCC_GetHCLKFreq+0x10>)
 800251e:	681b      	ldr	r3, [r3, #0]
}
 8002520:	4618      	mov	r0, r3
 8002522:	46bd      	mov	sp, r7
 8002524:	bc80      	pop	{r7}
 8002526:	4770      	bx	lr
 8002528:	20000000 	.word	0x20000000

0800252c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002530:	f7ff fff2 	bl	8002518 <HAL_RCC_GetHCLKFreq>
 8002534:	4602      	mov	r2, r0
 8002536:	4b05      	ldr	r3, [pc, #20]	@ (800254c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002538:	685b      	ldr	r3, [r3, #4]
 800253a:	0a1b      	lsrs	r3, r3, #8
 800253c:	f003 0307 	and.w	r3, r3, #7
 8002540:	4903      	ldr	r1, [pc, #12]	@ (8002550 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002542:	5ccb      	ldrb	r3, [r1, r3]
 8002544:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002548:	4618      	mov	r0, r3
 800254a:	bd80      	pop	{r7, pc}
 800254c:	40021000 	.word	0x40021000
 8002550:	08003c50 	.word	0x08003c50

08002554 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002554:	b480      	push	{r7}
 8002556:	b085      	sub	sp, #20
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800255c:	4b0a      	ldr	r3, [pc, #40]	@ (8002588 <RCC_Delay+0x34>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	4a0a      	ldr	r2, [pc, #40]	@ (800258c <RCC_Delay+0x38>)
 8002562:	fba2 2303 	umull	r2, r3, r2, r3
 8002566:	0a5b      	lsrs	r3, r3, #9
 8002568:	687a      	ldr	r2, [r7, #4]
 800256a:	fb02 f303 	mul.w	r3, r2, r3
 800256e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002570:	bf00      	nop
  }
  while (Delay --);
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	1e5a      	subs	r2, r3, #1
 8002576:	60fa      	str	r2, [r7, #12]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d1f9      	bne.n	8002570 <RCC_Delay+0x1c>
}
 800257c:	bf00      	nop
 800257e:	bf00      	nop
 8002580:	3714      	adds	r7, #20
 8002582:	46bd      	mov	sp, r7
 8002584:	bc80      	pop	{r7}
 8002586:	4770      	bx	lr
 8002588:	20000000 	.word	0x20000000
 800258c:	10624dd3 	.word	0x10624dd3

08002590 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b082      	sub	sp, #8
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2b00      	cmp	r3, #0
 800259c:	d101      	bne.n	80025a2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800259e:	2301      	movs	r3, #1
 80025a0:	e041      	b.n	8002626 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80025a8:	b2db      	uxtb	r3, r3
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d106      	bne.n	80025bc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2200      	movs	r2, #0
 80025b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80025b6:	6878      	ldr	r0, [r7, #4]
 80025b8:	f7fe fb78 	bl	8000cac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2202      	movs	r2, #2
 80025c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681a      	ldr	r2, [r3, #0]
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	3304      	adds	r3, #4
 80025cc:	4619      	mov	r1, r3
 80025ce:	4610      	mov	r0, r2
 80025d0:	f000 f940 	bl	8002854 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2201      	movs	r2, #1
 80025d8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2201      	movs	r2, #1
 80025e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2201      	movs	r2, #1
 80025e8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2201      	movs	r2, #1
 80025f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2201      	movs	r2, #1
 80025f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2201      	movs	r2, #1
 8002600:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2201      	movs	r2, #1
 8002608:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2201      	movs	r2, #1
 8002610:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2201      	movs	r2, #1
 8002618:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2201      	movs	r2, #1
 8002620:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002624:	2300      	movs	r3, #0
}
 8002626:	4618      	mov	r0, r3
 8002628:	3708      	adds	r7, #8
 800262a:	46bd      	mov	sp, r7
 800262c:	bd80      	pop	{r7, pc}
	...

08002630 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002630:	b480      	push	{r7}
 8002632:	b085      	sub	sp, #20
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800263e:	b2db      	uxtb	r3, r3
 8002640:	2b01      	cmp	r3, #1
 8002642:	d001      	beq.n	8002648 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002644:	2301      	movs	r3, #1
 8002646:	e032      	b.n	80026ae <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2202      	movs	r2, #2
 800264c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	4a18      	ldr	r2, [pc, #96]	@ (80026b8 <HAL_TIM_Base_Start+0x88>)
 8002656:	4293      	cmp	r3, r2
 8002658:	d00e      	beq.n	8002678 <HAL_TIM_Base_Start+0x48>
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002662:	d009      	beq.n	8002678 <HAL_TIM_Base_Start+0x48>
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4a14      	ldr	r2, [pc, #80]	@ (80026bc <HAL_TIM_Base_Start+0x8c>)
 800266a:	4293      	cmp	r3, r2
 800266c:	d004      	beq.n	8002678 <HAL_TIM_Base_Start+0x48>
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	4a13      	ldr	r2, [pc, #76]	@ (80026c0 <HAL_TIM_Base_Start+0x90>)
 8002674:	4293      	cmp	r3, r2
 8002676:	d111      	bne.n	800269c <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	689b      	ldr	r3, [r3, #8]
 800267e:	f003 0307 	and.w	r3, r3, #7
 8002682:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	2b06      	cmp	r3, #6
 8002688:	d010      	beq.n	80026ac <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	681a      	ldr	r2, [r3, #0]
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f042 0201 	orr.w	r2, r2, #1
 8002698:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800269a:	e007      	b.n	80026ac <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	681a      	ldr	r2, [r3, #0]
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f042 0201 	orr.w	r2, r2, #1
 80026aa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80026ac:	2300      	movs	r3, #0
}
 80026ae:	4618      	mov	r0, r3
 80026b0:	3714      	adds	r7, #20
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bc80      	pop	{r7}
 80026b6:	4770      	bx	lr
 80026b8:	40012c00 	.word	0x40012c00
 80026bc:	40000400 	.word	0x40000400
 80026c0:	40000800 	.word	0x40000800

080026c4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b084      	sub	sp, #16
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
 80026cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80026ce:	2300      	movs	r3, #0
 80026d0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80026d8:	2b01      	cmp	r3, #1
 80026da:	d101      	bne.n	80026e0 <HAL_TIM_ConfigClockSource+0x1c>
 80026dc:	2302      	movs	r3, #2
 80026de:	e0b4      	b.n	800284a <HAL_TIM_ConfigClockSource+0x186>
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2201      	movs	r2, #1
 80026e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2202      	movs	r2, #2
 80026ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	689b      	ldr	r3, [r3, #8]
 80026f6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80026f8:	68bb      	ldr	r3, [r7, #8]
 80026fa:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80026fe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002700:	68bb      	ldr	r3, [r7, #8]
 8002702:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002706:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	68ba      	ldr	r2, [r7, #8]
 800270e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002718:	d03e      	beq.n	8002798 <HAL_TIM_ConfigClockSource+0xd4>
 800271a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800271e:	f200 8087 	bhi.w	8002830 <HAL_TIM_ConfigClockSource+0x16c>
 8002722:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002726:	f000 8086 	beq.w	8002836 <HAL_TIM_ConfigClockSource+0x172>
 800272a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800272e:	d87f      	bhi.n	8002830 <HAL_TIM_ConfigClockSource+0x16c>
 8002730:	2b70      	cmp	r3, #112	@ 0x70
 8002732:	d01a      	beq.n	800276a <HAL_TIM_ConfigClockSource+0xa6>
 8002734:	2b70      	cmp	r3, #112	@ 0x70
 8002736:	d87b      	bhi.n	8002830 <HAL_TIM_ConfigClockSource+0x16c>
 8002738:	2b60      	cmp	r3, #96	@ 0x60
 800273a:	d050      	beq.n	80027de <HAL_TIM_ConfigClockSource+0x11a>
 800273c:	2b60      	cmp	r3, #96	@ 0x60
 800273e:	d877      	bhi.n	8002830 <HAL_TIM_ConfigClockSource+0x16c>
 8002740:	2b50      	cmp	r3, #80	@ 0x50
 8002742:	d03c      	beq.n	80027be <HAL_TIM_ConfigClockSource+0xfa>
 8002744:	2b50      	cmp	r3, #80	@ 0x50
 8002746:	d873      	bhi.n	8002830 <HAL_TIM_ConfigClockSource+0x16c>
 8002748:	2b40      	cmp	r3, #64	@ 0x40
 800274a:	d058      	beq.n	80027fe <HAL_TIM_ConfigClockSource+0x13a>
 800274c:	2b40      	cmp	r3, #64	@ 0x40
 800274e:	d86f      	bhi.n	8002830 <HAL_TIM_ConfigClockSource+0x16c>
 8002750:	2b30      	cmp	r3, #48	@ 0x30
 8002752:	d064      	beq.n	800281e <HAL_TIM_ConfigClockSource+0x15a>
 8002754:	2b30      	cmp	r3, #48	@ 0x30
 8002756:	d86b      	bhi.n	8002830 <HAL_TIM_ConfigClockSource+0x16c>
 8002758:	2b20      	cmp	r3, #32
 800275a:	d060      	beq.n	800281e <HAL_TIM_ConfigClockSource+0x15a>
 800275c:	2b20      	cmp	r3, #32
 800275e:	d867      	bhi.n	8002830 <HAL_TIM_ConfigClockSource+0x16c>
 8002760:	2b00      	cmp	r3, #0
 8002762:	d05c      	beq.n	800281e <HAL_TIM_ConfigClockSource+0x15a>
 8002764:	2b10      	cmp	r3, #16
 8002766:	d05a      	beq.n	800281e <HAL_TIM_ConfigClockSource+0x15a>
 8002768:	e062      	b.n	8002830 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800277a:	f000 f950 	bl	8002a1e <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	689b      	ldr	r3, [r3, #8]
 8002784:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002786:	68bb      	ldr	r3, [r7, #8]
 8002788:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800278c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	68ba      	ldr	r2, [r7, #8]
 8002794:	609a      	str	r2, [r3, #8]
      break;
 8002796:	e04f      	b.n	8002838 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80027a8:	f000 f939 	bl	8002a1e <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	689a      	ldr	r2, [r3, #8]
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80027ba:	609a      	str	r2, [r3, #8]
      break;
 80027bc:	e03c      	b.n	8002838 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80027ca:	461a      	mov	r2, r3
 80027cc:	f000 f8b0 	bl	8002930 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	2150      	movs	r1, #80	@ 0x50
 80027d6:	4618      	mov	r0, r3
 80027d8:	f000 f907 	bl	80029ea <TIM_ITRx_SetConfig>
      break;
 80027dc:	e02c      	b.n	8002838 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80027ea:	461a      	mov	r2, r3
 80027ec:	f000 f8ce 	bl	800298c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	2160      	movs	r1, #96	@ 0x60
 80027f6:	4618      	mov	r0, r3
 80027f8:	f000 f8f7 	bl	80029ea <TIM_ITRx_SetConfig>
      break;
 80027fc:	e01c      	b.n	8002838 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800280a:	461a      	mov	r2, r3
 800280c:	f000 f890 	bl	8002930 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	2140      	movs	r1, #64	@ 0x40
 8002816:	4618      	mov	r0, r3
 8002818:	f000 f8e7 	bl	80029ea <TIM_ITRx_SetConfig>
      break;
 800281c:	e00c      	b.n	8002838 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681a      	ldr	r2, [r3, #0]
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4619      	mov	r1, r3
 8002828:	4610      	mov	r0, r2
 800282a:	f000 f8de 	bl	80029ea <TIM_ITRx_SetConfig>
      break;
 800282e:	e003      	b.n	8002838 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002830:	2301      	movs	r3, #1
 8002832:	73fb      	strb	r3, [r7, #15]
      break;
 8002834:	e000      	b.n	8002838 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002836:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2201      	movs	r2, #1
 800283c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2200      	movs	r2, #0
 8002844:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002848:	7bfb      	ldrb	r3, [r7, #15]
}
 800284a:	4618      	mov	r0, r3
 800284c:	3710      	adds	r7, #16
 800284e:	46bd      	mov	sp, r7
 8002850:	bd80      	pop	{r7, pc}
	...

08002854 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002854:	b480      	push	{r7}
 8002856:	b085      	sub	sp, #20
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
 800285c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	4a2f      	ldr	r2, [pc, #188]	@ (8002924 <TIM_Base_SetConfig+0xd0>)
 8002868:	4293      	cmp	r3, r2
 800286a:	d00b      	beq.n	8002884 <TIM_Base_SetConfig+0x30>
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002872:	d007      	beq.n	8002884 <TIM_Base_SetConfig+0x30>
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	4a2c      	ldr	r2, [pc, #176]	@ (8002928 <TIM_Base_SetConfig+0xd4>)
 8002878:	4293      	cmp	r3, r2
 800287a:	d003      	beq.n	8002884 <TIM_Base_SetConfig+0x30>
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	4a2b      	ldr	r2, [pc, #172]	@ (800292c <TIM_Base_SetConfig+0xd8>)
 8002880:	4293      	cmp	r3, r2
 8002882:	d108      	bne.n	8002896 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800288a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	685b      	ldr	r3, [r3, #4]
 8002890:	68fa      	ldr	r2, [r7, #12]
 8002892:	4313      	orrs	r3, r2
 8002894:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	4a22      	ldr	r2, [pc, #136]	@ (8002924 <TIM_Base_SetConfig+0xd0>)
 800289a:	4293      	cmp	r3, r2
 800289c:	d00b      	beq.n	80028b6 <TIM_Base_SetConfig+0x62>
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80028a4:	d007      	beq.n	80028b6 <TIM_Base_SetConfig+0x62>
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	4a1f      	ldr	r2, [pc, #124]	@ (8002928 <TIM_Base_SetConfig+0xd4>)
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d003      	beq.n	80028b6 <TIM_Base_SetConfig+0x62>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	4a1e      	ldr	r2, [pc, #120]	@ (800292c <TIM_Base_SetConfig+0xd8>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d108      	bne.n	80028c8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80028bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	68db      	ldr	r3, [r3, #12]
 80028c2:	68fa      	ldr	r2, [r7, #12]
 80028c4:	4313      	orrs	r3, r2
 80028c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	695b      	ldr	r3, [r3, #20]
 80028d2:	4313      	orrs	r3, r2
 80028d4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	68fa      	ldr	r2, [r7, #12]
 80028da:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	689a      	ldr	r2, [r3, #8]
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	681a      	ldr	r2, [r3, #0]
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	4a0d      	ldr	r2, [pc, #52]	@ (8002924 <TIM_Base_SetConfig+0xd0>)
 80028f0:	4293      	cmp	r3, r2
 80028f2:	d103      	bne.n	80028fc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	691a      	ldr	r2, [r3, #16]
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2201      	movs	r2, #1
 8002900:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	691b      	ldr	r3, [r3, #16]
 8002906:	f003 0301 	and.w	r3, r3, #1
 800290a:	2b00      	cmp	r3, #0
 800290c:	d005      	beq.n	800291a <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	691b      	ldr	r3, [r3, #16]
 8002912:	f023 0201 	bic.w	r2, r3, #1
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	611a      	str	r2, [r3, #16]
  }
}
 800291a:	bf00      	nop
 800291c:	3714      	adds	r7, #20
 800291e:	46bd      	mov	sp, r7
 8002920:	bc80      	pop	{r7}
 8002922:	4770      	bx	lr
 8002924:	40012c00 	.word	0x40012c00
 8002928:	40000400 	.word	0x40000400
 800292c:	40000800 	.word	0x40000800

08002930 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002930:	b480      	push	{r7}
 8002932:	b087      	sub	sp, #28
 8002934:	af00      	add	r7, sp, #0
 8002936:	60f8      	str	r0, [r7, #12]
 8002938:	60b9      	str	r1, [r7, #8]
 800293a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	6a1b      	ldr	r3, [r3, #32]
 8002940:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	6a1b      	ldr	r3, [r3, #32]
 8002946:	f023 0201 	bic.w	r2, r3, #1
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	699b      	ldr	r3, [r3, #24]
 8002952:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002954:	693b      	ldr	r3, [r7, #16]
 8002956:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800295a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	011b      	lsls	r3, r3, #4
 8002960:	693a      	ldr	r2, [r7, #16]
 8002962:	4313      	orrs	r3, r2
 8002964:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002966:	697b      	ldr	r3, [r7, #20]
 8002968:	f023 030a 	bic.w	r3, r3, #10
 800296c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800296e:	697a      	ldr	r2, [r7, #20]
 8002970:	68bb      	ldr	r3, [r7, #8]
 8002972:	4313      	orrs	r3, r2
 8002974:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	693a      	ldr	r2, [r7, #16]
 800297a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	697a      	ldr	r2, [r7, #20]
 8002980:	621a      	str	r2, [r3, #32]
}
 8002982:	bf00      	nop
 8002984:	371c      	adds	r7, #28
 8002986:	46bd      	mov	sp, r7
 8002988:	bc80      	pop	{r7}
 800298a:	4770      	bx	lr

0800298c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800298c:	b480      	push	{r7}
 800298e:	b087      	sub	sp, #28
 8002990:	af00      	add	r7, sp, #0
 8002992:	60f8      	str	r0, [r7, #12]
 8002994:	60b9      	str	r1, [r7, #8]
 8002996:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	6a1b      	ldr	r3, [r3, #32]
 800299c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	6a1b      	ldr	r3, [r3, #32]
 80029a2:	f023 0210 	bic.w	r2, r3, #16
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	699b      	ldr	r3, [r3, #24]
 80029ae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80029b0:	693b      	ldr	r3, [r7, #16]
 80029b2:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80029b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	031b      	lsls	r3, r3, #12
 80029bc:	693a      	ldr	r2, [r7, #16]
 80029be:	4313      	orrs	r3, r2
 80029c0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80029c2:	697b      	ldr	r3, [r7, #20]
 80029c4:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80029c8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80029ca:	68bb      	ldr	r3, [r7, #8]
 80029cc:	011b      	lsls	r3, r3, #4
 80029ce:	697a      	ldr	r2, [r7, #20]
 80029d0:	4313      	orrs	r3, r2
 80029d2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	693a      	ldr	r2, [r7, #16]
 80029d8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	697a      	ldr	r2, [r7, #20]
 80029de:	621a      	str	r2, [r3, #32]
}
 80029e0:	bf00      	nop
 80029e2:	371c      	adds	r7, #28
 80029e4:	46bd      	mov	sp, r7
 80029e6:	bc80      	pop	{r7}
 80029e8:	4770      	bx	lr

080029ea <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80029ea:	b480      	push	{r7}
 80029ec:	b085      	sub	sp, #20
 80029ee:	af00      	add	r7, sp, #0
 80029f0:	6078      	str	r0, [r7, #4]
 80029f2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	689b      	ldr	r3, [r3, #8]
 80029f8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002a00:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002a02:	683a      	ldr	r2, [r7, #0]
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	4313      	orrs	r3, r2
 8002a08:	f043 0307 	orr.w	r3, r3, #7
 8002a0c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	68fa      	ldr	r2, [r7, #12]
 8002a12:	609a      	str	r2, [r3, #8]
}
 8002a14:	bf00      	nop
 8002a16:	3714      	adds	r7, #20
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	bc80      	pop	{r7}
 8002a1c:	4770      	bx	lr

08002a1e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002a1e:	b480      	push	{r7}
 8002a20:	b087      	sub	sp, #28
 8002a22:	af00      	add	r7, sp, #0
 8002a24:	60f8      	str	r0, [r7, #12]
 8002a26:	60b9      	str	r1, [r7, #8]
 8002a28:	607a      	str	r2, [r7, #4]
 8002a2a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	689b      	ldr	r3, [r3, #8]
 8002a30:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002a32:	697b      	ldr	r3, [r7, #20]
 8002a34:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002a38:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	021a      	lsls	r2, r3, #8
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	431a      	orrs	r2, r3
 8002a42:	68bb      	ldr	r3, [r7, #8]
 8002a44:	4313      	orrs	r3, r2
 8002a46:	697a      	ldr	r2, [r7, #20]
 8002a48:	4313      	orrs	r3, r2
 8002a4a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	697a      	ldr	r2, [r7, #20]
 8002a50:	609a      	str	r2, [r3, #8]
}
 8002a52:	bf00      	nop
 8002a54:	371c      	adds	r7, #28
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bc80      	pop	{r7}
 8002a5a:	4770      	bx	lr

08002a5c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	b085      	sub	sp, #20
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
 8002a64:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002a6c:	2b01      	cmp	r3, #1
 8002a6e:	d101      	bne.n	8002a74 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002a70:	2302      	movs	r3, #2
 8002a72:	e046      	b.n	8002b02 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2201      	movs	r2, #1
 8002a78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2202      	movs	r2, #2
 8002a80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	689b      	ldr	r3, [r3, #8]
 8002a92:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002a9a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	68fa      	ldr	r2, [r7, #12]
 8002aa2:	4313      	orrs	r3, r2
 8002aa4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	68fa      	ldr	r2, [r7, #12]
 8002aac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4a16      	ldr	r2, [pc, #88]	@ (8002b0c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	d00e      	beq.n	8002ad6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002ac0:	d009      	beq.n	8002ad6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4a12      	ldr	r2, [pc, #72]	@ (8002b10 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d004      	beq.n	8002ad6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4a10      	ldr	r2, [pc, #64]	@ (8002b14 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d10c      	bne.n	8002af0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002ad6:	68bb      	ldr	r3, [r7, #8]
 8002ad8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002adc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	68ba      	ldr	r2, [r7, #8]
 8002ae4:	4313      	orrs	r3, r2
 8002ae6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	68ba      	ldr	r2, [r7, #8]
 8002aee:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2201      	movs	r2, #1
 8002af4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2200      	movs	r2, #0
 8002afc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002b00:	2300      	movs	r3, #0
}
 8002b02:	4618      	mov	r0, r3
 8002b04:	3714      	adds	r7, #20
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bc80      	pop	{r7}
 8002b0a:	4770      	bx	lr
 8002b0c:	40012c00 	.word	0x40012c00
 8002b10:	40000400 	.word	0x40000400
 8002b14:	40000800 	.word	0x40000800

08002b18 <siprintf>:
 8002b18:	b40e      	push	{r1, r2, r3}
 8002b1a:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8002b1e:	b510      	push	{r4, lr}
 8002b20:	2400      	movs	r4, #0
 8002b22:	b09d      	sub	sp, #116	@ 0x74
 8002b24:	ab1f      	add	r3, sp, #124	@ 0x7c
 8002b26:	9002      	str	r0, [sp, #8]
 8002b28:	9006      	str	r0, [sp, #24]
 8002b2a:	9107      	str	r1, [sp, #28]
 8002b2c:	9104      	str	r1, [sp, #16]
 8002b2e:	4809      	ldr	r0, [pc, #36]	@ (8002b54 <siprintf+0x3c>)
 8002b30:	4909      	ldr	r1, [pc, #36]	@ (8002b58 <siprintf+0x40>)
 8002b32:	f853 2b04 	ldr.w	r2, [r3], #4
 8002b36:	9105      	str	r1, [sp, #20]
 8002b38:	6800      	ldr	r0, [r0, #0]
 8002b3a:	a902      	add	r1, sp, #8
 8002b3c:	9301      	str	r3, [sp, #4]
 8002b3e:	941b      	str	r4, [sp, #108]	@ 0x6c
 8002b40:	f000 f9a0 	bl	8002e84 <_svfiprintf_r>
 8002b44:	9b02      	ldr	r3, [sp, #8]
 8002b46:	701c      	strb	r4, [r3, #0]
 8002b48:	b01d      	add	sp, #116	@ 0x74
 8002b4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002b4e:	b003      	add	sp, #12
 8002b50:	4770      	bx	lr
 8002b52:	bf00      	nop
 8002b54:	2000000c 	.word	0x2000000c
 8002b58:	ffff0208 	.word	0xffff0208

08002b5c <memset>:
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	4402      	add	r2, r0
 8002b60:	4293      	cmp	r3, r2
 8002b62:	d100      	bne.n	8002b66 <memset+0xa>
 8002b64:	4770      	bx	lr
 8002b66:	f803 1b01 	strb.w	r1, [r3], #1
 8002b6a:	e7f9      	b.n	8002b60 <memset+0x4>

08002b6c <__errno>:
 8002b6c:	4b01      	ldr	r3, [pc, #4]	@ (8002b74 <__errno+0x8>)
 8002b6e:	6818      	ldr	r0, [r3, #0]
 8002b70:	4770      	bx	lr
 8002b72:	bf00      	nop
 8002b74:	2000000c 	.word	0x2000000c

08002b78 <__libc_init_array>:
 8002b78:	b570      	push	{r4, r5, r6, lr}
 8002b7a:	2600      	movs	r6, #0
 8002b7c:	4d0c      	ldr	r5, [pc, #48]	@ (8002bb0 <__libc_init_array+0x38>)
 8002b7e:	4c0d      	ldr	r4, [pc, #52]	@ (8002bb4 <__libc_init_array+0x3c>)
 8002b80:	1b64      	subs	r4, r4, r5
 8002b82:	10a4      	asrs	r4, r4, #2
 8002b84:	42a6      	cmp	r6, r4
 8002b86:	d109      	bne.n	8002b9c <__libc_init_array+0x24>
 8002b88:	f000 fc76 	bl	8003478 <_init>
 8002b8c:	2600      	movs	r6, #0
 8002b8e:	4d0a      	ldr	r5, [pc, #40]	@ (8002bb8 <__libc_init_array+0x40>)
 8002b90:	4c0a      	ldr	r4, [pc, #40]	@ (8002bbc <__libc_init_array+0x44>)
 8002b92:	1b64      	subs	r4, r4, r5
 8002b94:	10a4      	asrs	r4, r4, #2
 8002b96:	42a6      	cmp	r6, r4
 8002b98:	d105      	bne.n	8002ba6 <__libc_init_array+0x2e>
 8002b9a:	bd70      	pop	{r4, r5, r6, pc}
 8002b9c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ba0:	4798      	blx	r3
 8002ba2:	3601      	adds	r6, #1
 8002ba4:	e7ee      	b.n	8002b84 <__libc_init_array+0xc>
 8002ba6:	f855 3b04 	ldr.w	r3, [r5], #4
 8002baa:	4798      	blx	r3
 8002bac:	3601      	adds	r6, #1
 8002bae:	e7f2      	b.n	8002b96 <__libc_init_array+0x1e>
 8002bb0:	08003ca0 	.word	0x08003ca0
 8002bb4:	08003ca0 	.word	0x08003ca0
 8002bb8:	08003ca0 	.word	0x08003ca0
 8002bbc:	08003ca4 	.word	0x08003ca4

08002bc0 <__retarget_lock_acquire_recursive>:
 8002bc0:	4770      	bx	lr

08002bc2 <__retarget_lock_release_recursive>:
 8002bc2:	4770      	bx	lr

08002bc4 <memcpy>:
 8002bc4:	440a      	add	r2, r1
 8002bc6:	4291      	cmp	r1, r2
 8002bc8:	f100 33ff 	add.w	r3, r0, #4294967295
 8002bcc:	d100      	bne.n	8002bd0 <memcpy+0xc>
 8002bce:	4770      	bx	lr
 8002bd0:	b510      	push	{r4, lr}
 8002bd2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002bd6:	4291      	cmp	r1, r2
 8002bd8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002bdc:	d1f9      	bne.n	8002bd2 <memcpy+0xe>
 8002bde:	bd10      	pop	{r4, pc}

08002be0 <_free_r>:
 8002be0:	b538      	push	{r3, r4, r5, lr}
 8002be2:	4605      	mov	r5, r0
 8002be4:	2900      	cmp	r1, #0
 8002be6:	d040      	beq.n	8002c6a <_free_r+0x8a>
 8002be8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002bec:	1f0c      	subs	r4, r1, #4
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	bfb8      	it	lt
 8002bf2:	18e4      	addlt	r4, r4, r3
 8002bf4:	f000 f8de 	bl	8002db4 <__malloc_lock>
 8002bf8:	4a1c      	ldr	r2, [pc, #112]	@ (8002c6c <_free_r+0x8c>)
 8002bfa:	6813      	ldr	r3, [r2, #0]
 8002bfc:	b933      	cbnz	r3, 8002c0c <_free_r+0x2c>
 8002bfe:	6063      	str	r3, [r4, #4]
 8002c00:	6014      	str	r4, [r2, #0]
 8002c02:	4628      	mov	r0, r5
 8002c04:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002c08:	f000 b8da 	b.w	8002dc0 <__malloc_unlock>
 8002c0c:	42a3      	cmp	r3, r4
 8002c0e:	d908      	bls.n	8002c22 <_free_r+0x42>
 8002c10:	6820      	ldr	r0, [r4, #0]
 8002c12:	1821      	adds	r1, r4, r0
 8002c14:	428b      	cmp	r3, r1
 8002c16:	bf01      	itttt	eq
 8002c18:	6819      	ldreq	r1, [r3, #0]
 8002c1a:	685b      	ldreq	r3, [r3, #4]
 8002c1c:	1809      	addeq	r1, r1, r0
 8002c1e:	6021      	streq	r1, [r4, #0]
 8002c20:	e7ed      	b.n	8002bfe <_free_r+0x1e>
 8002c22:	461a      	mov	r2, r3
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	b10b      	cbz	r3, 8002c2c <_free_r+0x4c>
 8002c28:	42a3      	cmp	r3, r4
 8002c2a:	d9fa      	bls.n	8002c22 <_free_r+0x42>
 8002c2c:	6811      	ldr	r1, [r2, #0]
 8002c2e:	1850      	adds	r0, r2, r1
 8002c30:	42a0      	cmp	r0, r4
 8002c32:	d10b      	bne.n	8002c4c <_free_r+0x6c>
 8002c34:	6820      	ldr	r0, [r4, #0]
 8002c36:	4401      	add	r1, r0
 8002c38:	1850      	adds	r0, r2, r1
 8002c3a:	4283      	cmp	r3, r0
 8002c3c:	6011      	str	r1, [r2, #0]
 8002c3e:	d1e0      	bne.n	8002c02 <_free_r+0x22>
 8002c40:	6818      	ldr	r0, [r3, #0]
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	4408      	add	r0, r1
 8002c46:	6010      	str	r0, [r2, #0]
 8002c48:	6053      	str	r3, [r2, #4]
 8002c4a:	e7da      	b.n	8002c02 <_free_r+0x22>
 8002c4c:	d902      	bls.n	8002c54 <_free_r+0x74>
 8002c4e:	230c      	movs	r3, #12
 8002c50:	602b      	str	r3, [r5, #0]
 8002c52:	e7d6      	b.n	8002c02 <_free_r+0x22>
 8002c54:	6820      	ldr	r0, [r4, #0]
 8002c56:	1821      	adds	r1, r4, r0
 8002c58:	428b      	cmp	r3, r1
 8002c5a:	bf01      	itttt	eq
 8002c5c:	6819      	ldreq	r1, [r3, #0]
 8002c5e:	685b      	ldreq	r3, [r3, #4]
 8002c60:	1809      	addeq	r1, r1, r0
 8002c62:	6021      	streq	r1, [r4, #0]
 8002c64:	6063      	str	r3, [r4, #4]
 8002c66:	6054      	str	r4, [r2, #4]
 8002c68:	e7cb      	b.n	8002c02 <_free_r+0x22>
 8002c6a:	bd38      	pop	{r3, r4, r5, pc}
 8002c6c:	20000668 	.word	0x20000668

08002c70 <sbrk_aligned>:
 8002c70:	b570      	push	{r4, r5, r6, lr}
 8002c72:	4e0f      	ldr	r6, [pc, #60]	@ (8002cb0 <sbrk_aligned+0x40>)
 8002c74:	460c      	mov	r4, r1
 8002c76:	6831      	ldr	r1, [r6, #0]
 8002c78:	4605      	mov	r5, r0
 8002c7a:	b911      	cbnz	r1, 8002c82 <sbrk_aligned+0x12>
 8002c7c:	f000 fba8 	bl	80033d0 <_sbrk_r>
 8002c80:	6030      	str	r0, [r6, #0]
 8002c82:	4621      	mov	r1, r4
 8002c84:	4628      	mov	r0, r5
 8002c86:	f000 fba3 	bl	80033d0 <_sbrk_r>
 8002c8a:	1c43      	adds	r3, r0, #1
 8002c8c:	d103      	bne.n	8002c96 <sbrk_aligned+0x26>
 8002c8e:	f04f 34ff 	mov.w	r4, #4294967295
 8002c92:	4620      	mov	r0, r4
 8002c94:	bd70      	pop	{r4, r5, r6, pc}
 8002c96:	1cc4      	adds	r4, r0, #3
 8002c98:	f024 0403 	bic.w	r4, r4, #3
 8002c9c:	42a0      	cmp	r0, r4
 8002c9e:	d0f8      	beq.n	8002c92 <sbrk_aligned+0x22>
 8002ca0:	1a21      	subs	r1, r4, r0
 8002ca2:	4628      	mov	r0, r5
 8002ca4:	f000 fb94 	bl	80033d0 <_sbrk_r>
 8002ca8:	3001      	adds	r0, #1
 8002caa:	d1f2      	bne.n	8002c92 <sbrk_aligned+0x22>
 8002cac:	e7ef      	b.n	8002c8e <sbrk_aligned+0x1e>
 8002cae:	bf00      	nop
 8002cb0:	20000664 	.word	0x20000664

08002cb4 <_malloc_r>:
 8002cb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002cb8:	1ccd      	adds	r5, r1, #3
 8002cba:	f025 0503 	bic.w	r5, r5, #3
 8002cbe:	3508      	adds	r5, #8
 8002cc0:	2d0c      	cmp	r5, #12
 8002cc2:	bf38      	it	cc
 8002cc4:	250c      	movcc	r5, #12
 8002cc6:	2d00      	cmp	r5, #0
 8002cc8:	4606      	mov	r6, r0
 8002cca:	db01      	blt.n	8002cd0 <_malloc_r+0x1c>
 8002ccc:	42a9      	cmp	r1, r5
 8002cce:	d904      	bls.n	8002cda <_malloc_r+0x26>
 8002cd0:	230c      	movs	r3, #12
 8002cd2:	6033      	str	r3, [r6, #0]
 8002cd4:	2000      	movs	r0, #0
 8002cd6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002cda:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8002db0 <_malloc_r+0xfc>
 8002cde:	f000 f869 	bl	8002db4 <__malloc_lock>
 8002ce2:	f8d8 3000 	ldr.w	r3, [r8]
 8002ce6:	461c      	mov	r4, r3
 8002ce8:	bb44      	cbnz	r4, 8002d3c <_malloc_r+0x88>
 8002cea:	4629      	mov	r1, r5
 8002cec:	4630      	mov	r0, r6
 8002cee:	f7ff ffbf 	bl	8002c70 <sbrk_aligned>
 8002cf2:	1c43      	adds	r3, r0, #1
 8002cf4:	4604      	mov	r4, r0
 8002cf6:	d158      	bne.n	8002daa <_malloc_r+0xf6>
 8002cf8:	f8d8 4000 	ldr.w	r4, [r8]
 8002cfc:	4627      	mov	r7, r4
 8002cfe:	2f00      	cmp	r7, #0
 8002d00:	d143      	bne.n	8002d8a <_malloc_r+0xd6>
 8002d02:	2c00      	cmp	r4, #0
 8002d04:	d04b      	beq.n	8002d9e <_malloc_r+0xea>
 8002d06:	6823      	ldr	r3, [r4, #0]
 8002d08:	4639      	mov	r1, r7
 8002d0a:	4630      	mov	r0, r6
 8002d0c:	eb04 0903 	add.w	r9, r4, r3
 8002d10:	f000 fb5e 	bl	80033d0 <_sbrk_r>
 8002d14:	4581      	cmp	r9, r0
 8002d16:	d142      	bne.n	8002d9e <_malloc_r+0xea>
 8002d18:	6821      	ldr	r1, [r4, #0]
 8002d1a:	4630      	mov	r0, r6
 8002d1c:	1a6d      	subs	r5, r5, r1
 8002d1e:	4629      	mov	r1, r5
 8002d20:	f7ff ffa6 	bl	8002c70 <sbrk_aligned>
 8002d24:	3001      	adds	r0, #1
 8002d26:	d03a      	beq.n	8002d9e <_malloc_r+0xea>
 8002d28:	6823      	ldr	r3, [r4, #0]
 8002d2a:	442b      	add	r3, r5
 8002d2c:	6023      	str	r3, [r4, #0]
 8002d2e:	f8d8 3000 	ldr.w	r3, [r8]
 8002d32:	685a      	ldr	r2, [r3, #4]
 8002d34:	bb62      	cbnz	r2, 8002d90 <_malloc_r+0xdc>
 8002d36:	f8c8 7000 	str.w	r7, [r8]
 8002d3a:	e00f      	b.n	8002d5c <_malloc_r+0xa8>
 8002d3c:	6822      	ldr	r2, [r4, #0]
 8002d3e:	1b52      	subs	r2, r2, r5
 8002d40:	d420      	bmi.n	8002d84 <_malloc_r+0xd0>
 8002d42:	2a0b      	cmp	r2, #11
 8002d44:	d917      	bls.n	8002d76 <_malloc_r+0xc2>
 8002d46:	1961      	adds	r1, r4, r5
 8002d48:	42a3      	cmp	r3, r4
 8002d4a:	6025      	str	r5, [r4, #0]
 8002d4c:	bf18      	it	ne
 8002d4e:	6059      	strne	r1, [r3, #4]
 8002d50:	6863      	ldr	r3, [r4, #4]
 8002d52:	bf08      	it	eq
 8002d54:	f8c8 1000 	streq.w	r1, [r8]
 8002d58:	5162      	str	r2, [r4, r5]
 8002d5a:	604b      	str	r3, [r1, #4]
 8002d5c:	4630      	mov	r0, r6
 8002d5e:	f000 f82f 	bl	8002dc0 <__malloc_unlock>
 8002d62:	f104 000b 	add.w	r0, r4, #11
 8002d66:	1d23      	adds	r3, r4, #4
 8002d68:	f020 0007 	bic.w	r0, r0, #7
 8002d6c:	1ac2      	subs	r2, r0, r3
 8002d6e:	bf1c      	itt	ne
 8002d70:	1a1b      	subne	r3, r3, r0
 8002d72:	50a3      	strne	r3, [r4, r2]
 8002d74:	e7af      	b.n	8002cd6 <_malloc_r+0x22>
 8002d76:	6862      	ldr	r2, [r4, #4]
 8002d78:	42a3      	cmp	r3, r4
 8002d7a:	bf0c      	ite	eq
 8002d7c:	f8c8 2000 	streq.w	r2, [r8]
 8002d80:	605a      	strne	r2, [r3, #4]
 8002d82:	e7eb      	b.n	8002d5c <_malloc_r+0xa8>
 8002d84:	4623      	mov	r3, r4
 8002d86:	6864      	ldr	r4, [r4, #4]
 8002d88:	e7ae      	b.n	8002ce8 <_malloc_r+0x34>
 8002d8a:	463c      	mov	r4, r7
 8002d8c:	687f      	ldr	r7, [r7, #4]
 8002d8e:	e7b6      	b.n	8002cfe <_malloc_r+0x4a>
 8002d90:	461a      	mov	r2, r3
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	42a3      	cmp	r3, r4
 8002d96:	d1fb      	bne.n	8002d90 <_malloc_r+0xdc>
 8002d98:	2300      	movs	r3, #0
 8002d9a:	6053      	str	r3, [r2, #4]
 8002d9c:	e7de      	b.n	8002d5c <_malloc_r+0xa8>
 8002d9e:	230c      	movs	r3, #12
 8002da0:	4630      	mov	r0, r6
 8002da2:	6033      	str	r3, [r6, #0]
 8002da4:	f000 f80c 	bl	8002dc0 <__malloc_unlock>
 8002da8:	e794      	b.n	8002cd4 <_malloc_r+0x20>
 8002daa:	6005      	str	r5, [r0, #0]
 8002dac:	e7d6      	b.n	8002d5c <_malloc_r+0xa8>
 8002dae:	bf00      	nop
 8002db0:	20000668 	.word	0x20000668

08002db4 <__malloc_lock>:
 8002db4:	4801      	ldr	r0, [pc, #4]	@ (8002dbc <__malloc_lock+0x8>)
 8002db6:	f7ff bf03 	b.w	8002bc0 <__retarget_lock_acquire_recursive>
 8002dba:	bf00      	nop
 8002dbc:	20000660 	.word	0x20000660

08002dc0 <__malloc_unlock>:
 8002dc0:	4801      	ldr	r0, [pc, #4]	@ (8002dc8 <__malloc_unlock+0x8>)
 8002dc2:	f7ff befe 	b.w	8002bc2 <__retarget_lock_release_recursive>
 8002dc6:	bf00      	nop
 8002dc8:	20000660 	.word	0x20000660

08002dcc <__ssputs_r>:
 8002dcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002dd0:	461f      	mov	r7, r3
 8002dd2:	688e      	ldr	r6, [r1, #8]
 8002dd4:	4682      	mov	sl, r0
 8002dd6:	42be      	cmp	r6, r7
 8002dd8:	460c      	mov	r4, r1
 8002dda:	4690      	mov	r8, r2
 8002ddc:	680b      	ldr	r3, [r1, #0]
 8002dde:	d82d      	bhi.n	8002e3c <__ssputs_r+0x70>
 8002de0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8002de4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8002de8:	d026      	beq.n	8002e38 <__ssputs_r+0x6c>
 8002dea:	6965      	ldr	r5, [r4, #20]
 8002dec:	6909      	ldr	r1, [r1, #16]
 8002dee:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002df2:	eba3 0901 	sub.w	r9, r3, r1
 8002df6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002dfa:	1c7b      	adds	r3, r7, #1
 8002dfc:	444b      	add	r3, r9
 8002dfe:	106d      	asrs	r5, r5, #1
 8002e00:	429d      	cmp	r5, r3
 8002e02:	bf38      	it	cc
 8002e04:	461d      	movcc	r5, r3
 8002e06:	0553      	lsls	r3, r2, #21
 8002e08:	d527      	bpl.n	8002e5a <__ssputs_r+0x8e>
 8002e0a:	4629      	mov	r1, r5
 8002e0c:	f7ff ff52 	bl	8002cb4 <_malloc_r>
 8002e10:	4606      	mov	r6, r0
 8002e12:	b360      	cbz	r0, 8002e6e <__ssputs_r+0xa2>
 8002e14:	464a      	mov	r2, r9
 8002e16:	6921      	ldr	r1, [r4, #16]
 8002e18:	f7ff fed4 	bl	8002bc4 <memcpy>
 8002e1c:	89a3      	ldrh	r3, [r4, #12]
 8002e1e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8002e22:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002e26:	81a3      	strh	r3, [r4, #12]
 8002e28:	6126      	str	r6, [r4, #16]
 8002e2a:	444e      	add	r6, r9
 8002e2c:	6026      	str	r6, [r4, #0]
 8002e2e:	463e      	mov	r6, r7
 8002e30:	6165      	str	r5, [r4, #20]
 8002e32:	eba5 0509 	sub.w	r5, r5, r9
 8002e36:	60a5      	str	r5, [r4, #8]
 8002e38:	42be      	cmp	r6, r7
 8002e3a:	d900      	bls.n	8002e3e <__ssputs_r+0x72>
 8002e3c:	463e      	mov	r6, r7
 8002e3e:	4632      	mov	r2, r6
 8002e40:	4641      	mov	r1, r8
 8002e42:	6820      	ldr	r0, [r4, #0]
 8002e44:	f000 faaa 	bl	800339c <memmove>
 8002e48:	2000      	movs	r0, #0
 8002e4a:	68a3      	ldr	r3, [r4, #8]
 8002e4c:	1b9b      	subs	r3, r3, r6
 8002e4e:	60a3      	str	r3, [r4, #8]
 8002e50:	6823      	ldr	r3, [r4, #0]
 8002e52:	4433      	add	r3, r6
 8002e54:	6023      	str	r3, [r4, #0]
 8002e56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002e5a:	462a      	mov	r2, r5
 8002e5c:	f000 fad6 	bl	800340c <_realloc_r>
 8002e60:	4606      	mov	r6, r0
 8002e62:	2800      	cmp	r0, #0
 8002e64:	d1e0      	bne.n	8002e28 <__ssputs_r+0x5c>
 8002e66:	4650      	mov	r0, sl
 8002e68:	6921      	ldr	r1, [r4, #16]
 8002e6a:	f7ff feb9 	bl	8002be0 <_free_r>
 8002e6e:	230c      	movs	r3, #12
 8002e70:	f8ca 3000 	str.w	r3, [sl]
 8002e74:	89a3      	ldrh	r3, [r4, #12]
 8002e76:	f04f 30ff 	mov.w	r0, #4294967295
 8002e7a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002e7e:	81a3      	strh	r3, [r4, #12]
 8002e80:	e7e9      	b.n	8002e56 <__ssputs_r+0x8a>
	...

08002e84 <_svfiprintf_r>:
 8002e84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002e88:	4698      	mov	r8, r3
 8002e8a:	898b      	ldrh	r3, [r1, #12]
 8002e8c:	4607      	mov	r7, r0
 8002e8e:	061b      	lsls	r3, r3, #24
 8002e90:	460d      	mov	r5, r1
 8002e92:	4614      	mov	r4, r2
 8002e94:	b09d      	sub	sp, #116	@ 0x74
 8002e96:	d510      	bpl.n	8002eba <_svfiprintf_r+0x36>
 8002e98:	690b      	ldr	r3, [r1, #16]
 8002e9a:	b973      	cbnz	r3, 8002eba <_svfiprintf_r+0x36>
 8002e9c:	2140      	movs	r1, #64	@ 0x40
 8002e9e:	f7ff ff09 	bl	8002cb4 <_malloc_r>
 8002ea2:	6028      	str	r0, [r5, #0]
 8002ea4:	6128      	str	r0, [r5, #16]
 8002ea6:	b930      	cbnz	r0, 8002eb6 <_svfiprintf_r+0x32>
 8002ea8:	230c      	movs	r3, #12
 8002eaa:	603b      	str	r3, [r7, #0]
 8002eac:	f04f 30ff 	mov.w	r0, #4294967295
 8002eb0:	b01d      	add	sp, #116	@ 0x74
 8002eb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002eb6:	2340      	movs	r3, #64	@ 0x40
 8002eb8:	616b      	str	r3, [r5, #20]
 8002eba:	2300      	movs	r3, #0
 8002ebc:	9309      	str	r3, [sp, #36]	@ 0x24
 8002ebe:	2320      	movs	r3, #32
 8002ec0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8002ec4:	2330      	movs	r3, #48	@ 0x30
 8002ec6:	f04f 0901 	mov.w	r9, #1
 8002eca:	f8cd 800c 	str.w	r8, [sp, #12]
 8002ece:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8003068 <_svfiprintf_r+0x1e4>
 8002ed2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8002ed6:	4623      	mov	r3, r4
 8002ed8:	469a      	mov	sl, r3
 8002eda:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002ede:	b10a      	cbz	r2, 8002ee4 <_svfiprintf_r+0x60>
 8002ee0:	2a25      	cmp	r2, #37	@ 0x25
 8002ee2:	d1f9      	bne.n	8002ed8 <_svfiprintf_r+0x54>
 8002ee4:	ebba 0b04 	subs.w	fp, sl, r4
 8002ee8:	d00b      	beq.n	8002f02 <_svfiprintf_r+0x7e>
 8002eea:	465b      	mov	r3, fp
 8002eec:	4622      	mov	r2, r4
 8002eee:	4629      	mov	r1, r5
 8002ef0:	4638      	mov	r0, r7
 8002ef2:	f7ff ff6b 	bl	8002dcc <__ssputs_r>
 8002ef6:	3001      	adds	r0, #1
 8002ef8:	f000 80a7 	beq.w	800304a <_svfiprintf_r+0x1c6>
 8002efc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8002efe:	445a      	add	r2, fp
 8002f00:	9209      	str	r2, [sp, #36]	@ 0x24
 8002f02:	f89a 3000 	ldrb.w	r3, [sl]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	f000 809f 	beq.w	800304a <_svfiprintf_r+0x1c6>
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	f04f 32ff 	mov.w	r2, #4294967295
 8002f12:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002f16:	f10a 0a01 	add.w	sl, sl, #1
 8002f1a:	9304      	str	r3, [sp, #16]
 8002f1c:	9307      	str	r3, [sp, #28]
 8002f1e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8002f22:	931a      	str	r3, [sp, #104]	@ 0x68
 8002f24:	4654      	mov	r4, sl
 8002f26:	2205      	movs	r2, #5
 8002f28:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002f2c:	484e      	ldr	r0, [pc, #312]	@ (8003068 <_svfiprintf_r+0x1e4>)
 8002f2e:	f000 fa5f 	bl	80033f0 <memchr>
 8002f32:	9a04      	ldr	r2, [sp, #16]
 8002f34:	b9d8      	cbnz	r0, 8002f6e <_svfiprintf_r+0xea>
 8002f36:	06d0      	lsls	r0, r2, #27
 8002f38:	bf44      	itt	mi
 8002f3a:	2320      	movmi	r3, #32
 8002f3c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002f40:	0711      	lsls	r1, r2, #28
 8002f42:	bf44      	itt	mi
 8002f44:	232b      	movmi	r3, #43	@ 0x2b
 8002f46:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002f4a:	f89a 3000 	ldrb.w	r3, [sl]
 8002f4e:	2b2a      	cmp	r3, #42	@ 0x2a
 8002f50:	d015      	beq.n	8002f7e <_svfiprintf_r+0xfa>
 8002f52:	4654      	mov	r4, sl
 8002f54:	2000      	movs	r0, #0
 8002f56:	f04f 0c0a 	mov.w	ip, #10
 8002f5a:	9a07      	ldr	r2, [sp, #28]
 8002f5c:	4621      	mov	r1, r4
 8002f5e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002f62:	3b30      	subs	r3, #48	@ 0x30
 8002f64:	2b09      	cmp	r3, #9
 8002f66:	d94b      	bls.n	8003000 <_svfiprintf_r+0x17c>
 8002f68:	b1b0      	cbz	r0, 8002f98 <_svfiprintf_r+0x114>
 8002f6a:	9207      	str	r2, [sp, #28]
 8002f6c:	e014      	b.n	8002f98 <_svfiprintf_r+0x114>
 8002f6e:	eba0 0308 	sub.w	r3, r0, r8
 8002f72:	fa09 f303 	lsl.w	r3, r9, r3
 8002f76:	4313      	orrs	r3, r2
 8002f78:	46a2      	mov	sl, r4
 8002f7a:	9304      	str	r3, [sp, #16]
 8002f7c:	e7d2      	b.n	8002f24 <_svfiprintf_r+0xa0>
 8002f7e:	9b03      	ldr	r3, [sp, #12]
 8002f80:	1d19      	adds	r1, r3, #4
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	9103      	str	r1, [sp, #12]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	bfbb      	ittet	lt
 8002f8a:	425b      	neglt	r3, r3
 8002f8c:	f042 0202 	orrlt.w	r2, r2, #2
 8002f90:	9307      	strge	r3, [sp, #28]
 8002f92:	9307      	strlt	r3, [sp, #28]
 8002f94:	bfb8      	it	lt
 8002f96:	9204      	strlt	r2, [sp, #16]
 8002f98:	7823      	ldrb	r3, [r4, #0]
 8002f9a:	2b2e      	cmp	r3, #46	@ 0x2e
 8002f9c:	d10a      	bne.n	8002fb4 <_svfiprintf_r+0x130>
 8002f9e:	7863      	ldrb	r3, [r4, #1]
 8002fa0:	2b2a      	cmp	r3, #42	@ 0x2a
 8002fa2:	d132      	bne.n	800300a <_svfiprintf_r+0x186>
 8002fa4:	9b03      	ldr	r3, [sp, #12]
 8002fa6:	3402      	adds	r4, #2
 8002fa8:	1d1a      	adds	r2, r3, #4
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	9203      	str	r2, [sp, #12]
 8002fae:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8002fb2:	9305      	str	r3, [sp, #20]
 8002fb4:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800306c <_svfiprintf_r+0x1e8>
 8002fb8:	2203      	movs	r2, #3
 8002fba:	4650      	mov	r0, sl
 8002fbc:	7821      	ldrb	r1, [r4, #0]
 8002fbe:	f000 fa17 	bl	80033f0 <memchr>
 8002fc2:	b138      	cbz	r0, 8002fd4 <_svfiprintf_r+0x150>
 8002fc4:	2240      	movs	r2, #64	@ 0x40
 8002fc6:	9b04      	ldr	r3, [sp, #16]
 8002fc8:	eba0 000a 	sub.w	r0, r0, sl
 8002fcc:	4082      	lsls	r2, r0
 8002fce:	4313      	orrs	r3, r2
 8002fd0:	3401      	adds	r4, #1
 8002fd2:	9304      	str	r3, [sp, #16]
 8002fd4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002fd8:	2206      	movs	r2, #6
 8002fda:	4825      	ldr	r0, [pc, #148]	@ (8003070 <_svfiprintf_r+0x1ec>)
 8002fdc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8002fe0:	f000 fa06 	bl	80033f0 <memchr>
 8002fe4:	2800      	cmp	r0, #0
 8002fe6:	d036      	beq.n	8003056 <_svfiprintf_r+0x1d2>
 8002fe8:	4b22      	ldr	r3, [pc, #136]	@ (8003074 <_svfiprintf_r+0x1f0>)
 8002fea:	bb1b      	cbnz	r3, 8003034 <_svfiprintf_r+0x1b0>
 8002fec:	9b03      	ldr	r3, [sp, #12]
 8002fee:	3307      	adds	r3, #7
 8002ff0:	f023 0307 	bic.w	r3, r3, #7
 8002ff4:	3308      	adds	r3, #8
 8002ff6:	9303      	str	r3, [sp, #12]
 8002ff8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002ffa:	4433      	add	r3, r6
 8002ffc:	9309      	str	r3, [sp, #36]	@ 0x24
 8002ffe:	e76a      	b.n	8002ed6 <_svfiprintf_r+0x52>
 8003000:	460c      	mov	r4, r1
 8003002:	2001      	movs	r0, #1
 8003004:	fb0c 3202 	mla	r2, ip, r2, r3
 8003008:	e7a8      	b.n	8002f5c <_svfiprintf_r+0xd8>
 800300a:	2300      	movs	r3, #0
 800300c:	f04f 0c0a 	mov.w	ip, #10
 8003010:	4619      	mov	r1, r3
 8003012:	3401      	adds	r4, #1
 8003014:	9305      	str	r3, [sp, #20]
 8003016:	4620      	mov	r0, r4
 8003018:	f810 2b01 	ldrb.w	r2, [r0], #1
 800301c:	3a30      	subs	r2, #48	@ 0x30
 800301e:	2a09      	cmp	r2, #9
 8003020:	d903      	bls.n	800302a <_svfiprintf_r+0x1a6>
 8003022:	2b00      	cmp	r3, #0
 8003024:	d0c6      	beq.n	8002fb4 <_svfiprintf_r+0x130>
 8003026:	9105      	str	r1, [sp, #20]
 8003028:	e7c4      	b.n	8002fb4 <_svfiprintf_r+0x130>
 800302a:	4604      	mov	r4, r0
 800302c:	2301      	movs	r3, #1
 800302e:	fb0c 2101 	mla	r1, ip, r1, r2
 8003032:	e7f0      	b.n	8003016 <_svfiprintf_r+0x192>
 8003034:	ab03      	add	r3, sp, #12
 8003036:	9300      	str	r3, [sp, #0]
 8003038:	462a      	mov	r2, r5
 800303a:	4638      	mov	r0, r7
 800303c:	4b0e      	ldr	r3, [pc, #56]	@ (8003078 <_svfiprintf_r+0x1f4>)
 800303e:	a904      	add	r1, sp, #16
 8003040:	f3af 8000 	nop.w
 8003044:	1c42      	adds	r2, r0, #1
 8003046:	4606      	mov	r6, r0
 8003048:	d1d6      	bne.n	8002ff8 <_svfiprintf_r+0x174>
 800304a:	89ab      	ldrh	r3, [r5, #12]
 800304c:	065b      	lsls	r3, r3, #25
 800304e:	f53f af2d 	bmi.w	8002eac <_svfiprintf_r+0x28>
 8003052:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003054:	e72c      	b.n	8002eb0 <_svfiprintf_r+0x2c>
 8003056:	ab03      	add	r3, sp, #12
 8003058:	9300      	str	r3, [sp, #0]
 800305a:	462a      	mov	r2, r5
 800305c:	4638      	mov	r0, r7
 800305e:	4b06      	ldr	r3, [pc, #24]	@ (8003078 <_svfiprintf_r+0x1f4>)
 8003060:	a904      	add	r1, sp, #16
 8003062:	f000 f87d 	bl	8003160 <_printf_i>
 8003066:	e7ed      	b.n	8003044 <_svfiprintf_r+0x1c0>
 8003068:	08003c6a 	.word	0x08003c6a
 800306c:	08003c70 	.word	0x08003c70
 8003070:	08003c74 	.word	0x08003c74
 8003074:	00000000 	.word	0x00000000
 8003078:	08002dcd 	.word	0x08002dcd

0800307c <_printf_common>:
 800307c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003080:	4616      	mov	r6, r2
 8003082:	4698      	mov	r8, r3
 8003084:	688a      	ldr	r2, [r1, #8]
 8003086:	690b      	ldr	r3, [r1, #16]
 8003088:	4607      	mov	r7, r0
 800308a:	4293      	cmp	r3, r2
 800308c:	bfb8      	it	lt
 800308e:	4613      	movlt	r3, r2
 8003090:	6033      	str	r3, [r6, #0]
 8003092:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003096:	460c      	mov	r4, r1
 8003098:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800309c:	b10a      	cbz	r2, 80030a2 <_printf_common+0x26>
 800309e:	3301      	adds	r3, #1
 80030a0:	6033      	str	r3, [r6, #0]
 80030a2:	6823      	ldr	r3, [r4, #0]
 80030a4:	0699      	lsls	r1, r3, #26
 80030a6:	bf42      	ittt	mi
 80030a8:	6833      	ldrmi	r3, [r6, #0]
 80030aa:	3302      	addmi	r3, #2
 80030ac:	6033      	strmi	r3, [r6, #0]
 80030ae:	6825      	ldr	r5, [r4, #0]
 80030b0:	f015 0506 	ands.w	r5, r5, #6
 80030b4:	d106      	bne.n	80030c4 <_printf_common+0x48>
 80030b6:	f104 0a19 	add.w	sl, r4, #25
 80030ba:	68e3      	ldr	r3, [r4, #12]
 80030bc:	6832      	ldr	r2, [r6, #0]
 80030be:	1a9b      	subs	r3, r3, r2
 80030c0:	42ab      	cmp	r3, r5
 80030c2:	dc2b      	bgt.n	800311c <_printf_common+0xa0>
 80030c4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80030c8:	6822      	ldr	r2, [r4, #0]
 80030ca:	3b00      	subs	r3, #0
 80030cc:	bf18      	it	ne
 80030ce:	2301      	movne	r3, #1
 80030d0:	0692      	lsls	r2, r2, #26
 80030d2:	d430      	bmi.n	8003136 <_printf_common+0xba>
 80030d4:	4641      	mov	r1, r8
 80030d6:	4638      	mov	r0, r7
 80030d8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80030dc:	47c8      	blx	r9
 80030de:	3001      	adds	r0, #1
 80030e0:	d023      	beq.n	800312a <_printf_common+0xae>
 80030e2:	6823      	ldr	r3, [r4, #0]
 80030e4:	6922      	ldr	r2, [r4, #16]
 80030e6:	f003 0306 	and.w	r3, r3, #6
 80030ea:	2b04      	cmp	r3, #4
 80030ec:	bf14      	ite	ne
 80030ee:	2500      	movne	r5, #0
 80030f0:	6833      	ldreq	r3, [r6, #0]
 80030f2:	f04f 0600 	mov.w	r6, #0
 80030f6:	bf08      	it	eq
 80030f8:	68e5      	ldreq	r5, [r4, #12]
 80030fa:	f104 041a 	add.w	r4, r4, #26
 80030fe:	bf08      	it	eq
 8003100:	1aed      	subeq	r5, r5, r3
 8003102:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8003106:	bf08      	it	eq
 8003108:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800310c:	4293      	cmp	r3, r2
 800310e:	bfc4      	itt	gt
 8003110:	1a9b      	subgt	r3, r3, r2
 8003112:	18ed      	addgt	r5, r5, r3
 8003114:	42b5      	cmp	r5, r6
 8003116:	d11a      	bne.n	800314e <_printf_common+0xd2>
 8003118:	2000      	movs	r0, #0
 800311a:	e008      	b.n	800312e <_printf_common+0xb2>
 800311c:	2301      	movs	r3, #1
 800311e:	4652      	mov	r2, sl
 8003120:	4641      	mov	r1, r8
 8003122:	4638      	mov	r0, r7
 8003124:	47c8      	blx	r9
 8003126:	3001      	adds	r0, #1
 8003128:	d103      	bne.n	8003132 <_printf_common+0xb6>
 800312a:	f04f 30ff 	mov.w	r0, #4294967295
 800312e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003132:	3501      	adds	r5, #1
 8003134:	e7c1      	b.n	80030ba <_printf_common+0x3e>
 8003136:	2030      	movs	r0, #48	@ 0x30
 8003138:	18e1      	adds	r1, r4, r3
 800313a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800313e:	1c5a      	adds	r2, r3, #1
 8003140:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003144:	4422      	add	r2, r4
 8003146:	3302      	adds	r3, #2
 8003148:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800314c:	e7c2      	b.n	80030d4 <_printf_common+0x58>
 800314e:	2301      	movs	r3, #1
 8003150:	4622      	mov	r2, r4
 8003152:	4641      	mov	r1, r8
 8003154:	4638      	mov	r0, r7
 8003156:	47c8      	blx	r9
 8003158:	3001      	adds	r0, #1
 800315a:	d0e6      	beq.n	800312a <_printf_common+0xae>
 800315c:	3601      	adds	r6, #1
 800315e:	e7d9      	b.n	8003114 <_printf_common+0x98>

08003160 <_printf_i>:
 8003160:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003164:	7e0f      	ldrb	r7, [r1, #24]
 8003166:	4691      	mov	r9, r2
 8003168:	2f78      	cmp	r7, #120	@ 0x78
 800316a:	4680      	mov	r8, r0
 800316c:	460c      	mov	r4, r1
 800316e:	469a      	mov	sl, r3
 8003170:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003172:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003176:	d807      	bhi.n	8003188 <_printf_i+0x28>
 8003178:	2f62      	cmp	r7, #98	@ 0x62
 800317a:	d80a      	bhi.n	8003192 <_printf_i+0x32>
 800317c:	2f00      	cmp	r7, #0
 800317e:	f000 80d1 	beq.w	8003324 <_printf_i+0x1c4>
 8003182:	2f58      	cmp	r7, #88	@ 0x58
 8003184:	f000 80b8 	beq.w	80032f8 <_printf_i+0x198>
 8003188:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800318c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003190:	e03a      	b.n	8003208 <_printf_i+0xa8>
 8003192:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003196:	2b15      	cmp	r3, #21
 8003198:	d8f6      	bhi.n	8003188 <_printf_i+0x28>
 800319a:	a101      	add	r1, pc, #4	@ (adr r1, 80031a0 <_printf_i+0x40>)
 800319c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80031a0:	080031f9 	.word	0x080031f9
 80031a4:	0800320d 	.word	0x0800320d
 80031a8:	08003189 	.word	0x08003189
 80031ac:	08003189 	.word	0x08003189
 80031b0:	08003189 	.word	0x08003189
 80031b4:	08003189 	.word	0x08003189
 80031b8:	0800320d 	.word	0x0800320d
 80031bc:	08003189 	.word	0x08003189
 80031c0:	08003189 	.word	0x08003189
 80031c4:	08003189 	.word	0x08003189
 80031c8:	08003189 	.word	0x08003189
 80031cc:	0800330b 	.word	0x0800330b
 80031d0:	08003237 	.word	0x08003237
 80031d4:	080032c5 	.word	0x080032c5
 80031d8:	08003189 	.word	0x08003189
 80031dc:	08003189 	.word	0x08003189
 80031e0:	0800332d 	.word	0x0800332d
 80031e4:	08003189 	.word	0x08003189
 80031e8:	08003237 	.word	0x08003237
 80031ec:	08003189 	.word	0x08003189
 80031f0:	08003189 	.word	0x08003189
 80031f4:	080032cd 	.word	0x080032cd
 80031f8:	6833      	ldr	r3, [r6, #0]
 80031fa:	1d1a      	adds	r2, r3, #4
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	6032      	str	r2, [r6, #0]
 8003200:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003204:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003208:	2301      	movs	r3, #1
 800320a:	e09c      	b.n	8003346 <_printf_i+0x1e6>
 800320c:	6833      	ldr	r3, [r6, #0]
 800320e:	6820      	ldr	r0, [r4, #0]
 8003210:	1d19      	adds	r1, r3, #4
 8003212:	6031      	str	r1, [r6, #0]
 8003214:	0606      	lsls	r6, r0, #24
 8003216:	d501      	bpl.n	800321c <_printf_i+0xbc>
 8003218:	681d      	ldr	r5, [r3, #0]
 800321a:	e003      	b.n	8003224 <_printf_i+0xc4>
 800321c:	0645      	lsls	r5, r0, #25
 800321e:	d5fb      	bpl.n	8003218 <_printf_i+0xb8>
 8003220:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003224:	2d00      	cmp	r5, #0
 8003226:	da03      	bge.n	8003230 <_printf_i+0xd0>
 8003228:	232d      	movs	r3, #45	@ 0x2d
 800322a:	426d      	negs	r5, r5
 800322c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003230:	230a      	movs	r3, #10
 8003232:	4858      	ldr	r0, [pc, #352]	@ (8003394 <_printf_i+0x234>)
 8003234:	e011      	b.n	800325a <_printf_i+0xfa>
 8003236:	6821      	ldr	r1, [r4, #0]
 8003238:	6833      	ldr	r3, [r6, #0]
 800323a:	0608      	lsls	r0, r1, #24
 800323c:	f853 5b04 	ldr.w	r5, [r3], #4
 8003240:	d402      	bmi.n	8003248 <_printf_i+0xe8>
 8003242:	0649      	lsls	r1, r1, #25
 8003244:	bf48      	it	mi
 8003246:	b2ad      	uxthmi	r5, r5
 8003248:	2f6f      	cmp	r7, #111	@ 0x6f
 800324a:	6033      	str	r3, [r6, #0]
 800324c:	bf14      	ite	ne
 800324e:	230a      	movne	r3, #10
 8003250:	2308      	moveq	r3, #8
 8003252:	4850      	ldr	r0, [pc, #320]	@ (8003394 <_printf_i+0x234>)
 8003254:	2100      	movs	r1, #0
 8003256:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800325a:	6866      	ldr	r6, [r4, #4]
 800325c:	2e00      	cmp	r6, #0
 800325e:	60a6      	str	r6, [r4, #8]
 8003260:	db05      	blt.n	800326e <_printf_i+0x10e>
 8003262:	6821      	ldr	r1, [r4, #0]
 8003264:	432e      	orrs	r6, r5
 8003266:	f021 0104 	bic.w	r1, r1, #4
 800326a:	6021      	str	r1, [r4, #0]
 800326c:	d04b      	beq.n	8003306 <_printf_i+0x1a6>
 800326e:	4616      	mov	r6, r2
 8003270:	fbb5 f1f3 	udiv	r1, r5, r3
 8003274:	fb03 5711 	mls	r7, r3, r1, r5
 8003278:	5dc7      	ldrb	r7, [r0, r7]
 800327a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800327e:	462f      	mov	r7, r5
 8003280:	42bb      	cmp	r3, r7
 8003282:	460d      	mov	r5, r1
 8003284:	d9f4      	bls.n	8003270 <_printf_i+0x110>
 8003286:	2b08      	cmp	r3, #8
 8003288:	d10b      	bne.n	80032a2 <_printf_i+0x142>
 800328a:	6823      	ldr	r3, [r4, #0]
 800328c:	07df      	lsls	r7, r3, #31
 800328e:	d508      	bpl.n	80032a2 <_printf_i+0x142>
 8003290:	6923      	ldr	r3, [r4, #16]
 8003292:	6861      	ldr	r1, [r4, #4]
 8003294:	4299      	cmp	r1, r3
 8003296:	bfde      	ittt	le
 8003298:	2330      	movle	r3, #48	@ 0x30
 800329a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800329e:	f106 36ff 	addle.w	r6, r6, #4294967295
 80032a2:	1b92      	subs	r2, r2, r6
 80032a4:	6122      	str	r2, [r4, #16]
 80032a6:	464b      	mov	r3, r9
 80032a8:	4621      	mov	r1, r4
 80032aa:	4640      	mov	r0, r8
 80032ac:	f8cd a000 	str.w	sl, [sp]
 80032b0:	aa03      	add	r2, sp, #12
 80032b2:	f7ff fee3 	bl	800307c <_printf_common>
 80032b6:	3001      	adds	r0, #1
 80032b8:	d14a      	bne.n	8003350 <_printf_i+0x1f0>
 80032ba:	f04f 30ff 	mov.w	r0, #4294967295
 80032be:	b004      	add	sp, #16
 80032c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80032c4:	6823      	ldr	r3, [r4, #0]
 80032c6:	f043 0320 	orr.w	r3, r3, #32
 80032ca:	6023      	str	r3, [r4, #0]
 80032cc:	2778      	movs	r7, #120	@ 0x78
 80032ce:	4832      	ldr	r0, [pc, #200]	@ (8003398 <_printf_i+0x238>)
 80032d0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80032d4:	6823      	ldr	r3, [r4, #0]
 80032d6:	6831      	ldr	r1, [r6, #0]
 80032d8:	061f      	lsls	r7, r3, #24
 80032da:	f851 5b04 	ldr.w	r5, [r1], #4
 80032de:	d402      	bmi.n	80032e6 <_printf_i+0x186>
 80032e0:	065f      	lsls	r7, r3, #25
 80032e2:	bf48      	it	mi
 80032e4:	b2ad      	uxthmi	r5, r5
 80032e6:	6031      	str	r1, [r6, #0]
 80032e8:	07d9      	lsls	r1, r3, #31
 80032ea:	bf44      	itt	mi
 80032ec:	f043 0320 	orrmi.w	r3, r3, #32
 80032f0:	6023      	strmi	r3, [r4, #0]
 80032f2:	b11d      	cbz	r5, 80032fc <_printf_i+0x19c>
 80032f4:	2310      	movs	r3, #16
 80032f6:	e7ad      	b.n	8003254 <_printf_i+0xf4>
 80032f8:	4826      	ldr	r0, [pc, #152]	@ (8003394 <_printf_i+0x234>)
 80032fa:	e7e9      	b.n	80032d0 <_printf_i+0x170>
 80032fc:	6823      	ldr	r3, [r4, #0]
 80032fe:	f023 0320 	bic.w	r3, r3, #32
 8003302:	6023      	str	r3, [r4, #0]
 8003304:	e7f6      	b.n	80032f4 <_printf_i+0x194>
 8003306:	4616      	mov	r6, r2
 8003308:	e7bd      	b.n	8003286 <_printf_i+0x126>
 800330a:	6833      	ldr	r3, [r6, #0]
 800330c:	6825      	ldr	r5, [r4, #0]
 800330e:	1d18      	adds	r0, r3, #4
 8003310:	6961      	ldr	r1, [r4, #20]
 8003312:	6030      	str	r0, [r6, #0]
 8003314:	062e      	lsls	r6, r5, #24
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	d501      	bpl.n	800331e <_printf_i+0x1be>
 800331a:	6019      	str	r1, [r3, #0]
 800331c:	e002      	b.n	8003324 <_printf_i+0x1c4>
 800331e:	0668      	lsls	r0, r5, #25
 8003320:	d5fb      	bpl.n	800331a <_printf_i+0x1ba>
 8003322:	8019      	strh	r1, [r3, #0]
 8003324:	2300      	movs	r3, #0
 8003326:	4616      	mov	r6, r2
 8003328:	6123      	str	r3, [r4, #16]
 800332a:	e7bc      	b.n	80032a6 <_printf_i+0x146>
 800332c:	6833      	ldr	r3, [r6, #0]
 800332e:	2100      	movs	r1, #0
 8003330:	1d1a      	adds	r2, r3, #4
 8003332:	6032      	str	r2, [r6, #0]
 8003334:	681e      	ldr	r6, [r3, #0]
 8003336:	6862      	ldr	r2, [r4, #4]
 8003338:	4630      	mov	r0, r6
 800333a:	f000 f859 	bl	80033f0 <memchr>
 800333e:	b108      	cbz	r0, 8003344 <_printf_i+0x1e4>
 8003340:	1b80      	subs	r0, r0, r6
 8003342:	6060      	str	r0, [r4, #4]
 8003344:	6863      	ldr	r3, [r4, #4]
 8003346:	6123      	str	r3, [r4, #16]
 8003348:	2300      	movs	r3, #0
 800334a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800334e:	e7aa      	b.n	80032a6 <_printf_i+0x146>
 8003350:	4632      	mov	r2, r6
 8003352:	4649      	mov	r1, r9
 8003354:	4640      	mov	r0, r8
 8003356:	6923      	ldr	r3, [r4, #16]
 8003358:	47d0      	blx	sl
 800335a:	3001      	adds	r0, #1
 800335c:	d0ad      	beq.n	80032ba <_printf_i+0x15a>
 800335e:	6823      	ldr	r3, [r4, #0]
 8003360:	079b      	lsls	r3, r3, #30
 8003362:	d413      	bmi.n	800338c <_printf_i+0x22c>
 8003364:	68e0      	ldr	r0, [r4, #12]
 8003366:	9b03      	ldr	r3, [sp, #12]
 8003368:	4298      	cmp	r0, r3
 800336a:	bfb8      	it	lt
 800336c:	4618      	movlt	r0, r3
 800336e:	e7a6      	b.n	80032be <_printf_i+0x15e>
 8003370:	2301      	movs	r3, #1
 8003372:	4632      	mov	r2, r6
 8003374:	4649      	mov	r1, r9
 8003376:	4640      	mov	r0, r8
 8003378:	47d0      	blx	sl
 800337a:	3001      	adds	r0, #1
 800337c:	d09d      	beq.n	80032ba <_printf_i+0x15a>
 800337e:	3501      	adds	r5, #1
 8003380:	68e3      	ldr	r3, [r4, #12]
 8003382:	9903      	ldr	r1, [sp, #12]
 8003384:	1a5b      	subs	r3, r3, r1
 8003386:	42ab      	cmp	r3, r5
 8003388:	dcf2      	bgt.n	8003370 <_printf_i+0x210>
 800338a:	e7eb      	b.n	8003364 <_printf_i+0x204>
 800338c:	2500      	movs	r5, #0
 800338e:	f104 0619 	add.w	r6, r4, #25
 8003392:	e7f5      	b.n	8003380 <_printf_i+0x220>
 8003394:	08003c7b 	.word	0x08003c7b
 8003398:	08003c8c 	.word	0x08003c8c

0800339c <memmove>:
 800339c:	4288      	cmp	r0, r1
 800339e:	b510      	push	{r4, lr}
 80033a0:	eb01 0402 	add.w	r4, r1, r2
 80033a4:	d902      	bls.n	80033ac <memmove+0x10>
 80033a6:	4284      	cmp	r4, r0
 80033a8:	4623      	mov	r3, r4
 80033aa:	d807      	bhi.n	80033bc <memmove+0x20>
 80033ac:	1e43      	subs	r3, r0, #1
 80033ae:	42a1      	cmp	r1, r4
 80033b0:	d008      	beq.n	80033c4 <memmove+0x28>
 80033b2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80033b6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80033ba:	e7f8      	b.n	80033ae <memmove+0x12>
 80033bc:	4601      	mov	r1, r0
 80033be:	4402      	add	r2, r0
 80033c0:	428a      	cmp	r2, r1
 80033c2:	d100      	bne.n	80033c6 <memmove+0x2a>
 80033c4:	bd10      	pop	{r4, pc}
 80033c6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80033ca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80033ce:	e7f7      	b.n	80033c0 <memmove+0x24>

080033d0 <_sbrk_r>:
 80033d0:	b538      	push	{r3, r4, r5, lr}
 80033d2:	2300      	movs	r3, #0
 80033d4:	4d05      	ldr	r5, [pc, #20]	@ (80033ec <_sbrk_r+0x1c>)
 80033d6:	4604      	mov	r4, r0
 80033d8:	4608      	mov	r0, r1
 80033da:	602b      	str	r3, [r5, #0]
 80033dc:	f7fd fcb0 	bl	8000d40 <_sbrk>
 80033e0:	1c43      	adds	r3, r0, #1
 80033e2:	d102      	bne.n	80033ea <_sbrk_r+0x1a>
 80033e4:	682b      	ldr	r3, [r5, #0]
 80033e6:	b103      	cbz	r3, 80033ea <_sbrk_r+0x1a>
 80033e8:	6023      	str	r3, [r4, #0]
 80033ea:	bd38      	pop	{r3, r4, r5, pc}
 80033ec:	2000065c 	.word	0x2000065c

080033f0 <memchr>:
 80033f0:	4603      	mov	r3, r0
 80033f2:	b510      	push	{r4, lr}
 80033f4:	b2c9      	uxtb	r1, r1
 80033f6:	4402      	add	r2, r0
 80033f8:	4293      	cmp	r3, r2
 80033fa:	4618      	mov	r0, r3
 80033fc:	d101      	bne.n	8003402 <memchr+0x12>
 80033fe:	2000      	movs	r0, #0
 8003400:	e003      	b.n	800340a <memchr+0x1a>
 8003402:	7804      	ldrb	r4, [r0, #0]
 8003404:	3301      	adds	r3, #1
 8003406:	428c      	cmp	r4, r1
 8003408:	d1f6      	bne.n	80033f8 <memchr+0x8>
 800340a:	bd10      	pop	{r4, pc}

0800340c <_realloc_r>:
 800340c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003410:	4607      	mov	r7, r0
 8003412:	4614      	mov	r4, r2
 8003414:	460d      	mov	r5, r1
 8003416:	b921      	cbnz	r1, 8003422 <_realloc_r+0x16>
 8003418:	4611      	mov	r1, r2
 800341a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800341e:	f7ff bc49 	b.w	8002cb4 <_malloc_r>
 8003422:	b92a      	cbnz	r2, 8003430 <_realloc_r+0x24>
 8003424:	f7ff fbdc 	bl	8002be0 <_free_r>
 8003428:	4625      	mov	r5, r4
 800342a:	4628      	mov	r0, r5
 800342c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003430:	f000 f81a 	bl	8003468 <_malloc_usable_size_r>
 8003434:	4284      	cmp	r4, r0
 8003436:	4606      	mov	r6, r0
 8003438:	d802      	bhi.n	8003440 <_realloc_r+0x34>
 800343a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800343e:	d8f4      	bhi.n	800342a <_realloc_r+0x1e>
 8003440:	4621      	mov	r1, r4
 8003442:	4638      	mov	r0, r7
 8003444:	f7ff fc36 	bl	8002cb4 <_malloc_r>
 8003448:	4680      	mov	r8, r0
 800344a:	b908      	cbnz	r0, 8003450 <_realloc_r+0x44>
 800344c:	4645      	mov	r5, r8
 800344e:	e7ec      	b.n	800342a <_realloc_r+0x1e>
 8003450:	42b4      	cmp	r4, r6
 8003452:	4622      	mov	r2, r4
 8003454:	4629      	mov	r1, r5
 8003456:	bf28      	it	cs
 8003458:	4632      	movcs	r2, r6
 800345a:	f7ff fbb3 	bl	8002bc4 <memcpy>
 800345e:	4629      	mov	r1, r5
 8003460:	4638      	mov	r0, r7
 8003462:	f7ff fbbd 	bl	8002be0 <_free_r>
 8003466:	e7f1      	b.n	800344c <_realloc_r+0x40>

08003468 <_malloc_usable_size_r>:
 8003468:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800346c:	1f18      	subs	r0, r3, #4
 800346e:	2b00      	cmp	r3, #0
 8003470:	bfbc      	itt	lt
 8003472:	580b      	ldrlt	r3, [r1, r0]
 8003474:	18c0      	addlt	r0, r0, r3
 8003476:	4770      	bx	lr

08003478 <_init>:
 8003478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800347a:	bf00      	nop
 800347c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800347e:	bc08      	pop	{r3}
 8003480:	469e      	mov	lr, r3
 8003482:	4770      	bx	lr

08003484 <_fini>:
 8003484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003486:	bf00      	nop
 8003488:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800348a:	bc08      	pop	{r3}
 800348c:	469e      	mov	lr, r3
 800348e:	4770      	bx	lr
